diff --git a/demos/chapter3/chapter3-interactive.html b/demos/chapter3/chapter3-interactive.html
deleted file mode 100644
index 8646c749be975e0e479572bec03be41019725c21..0000000000000000000000000000000000000000
--- a/demos/chapter3/chapter3-interactive.html
+++ /dev/null
@@ -1,559 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>The World of Simple Programs: An Interactive Exploration</title>
-    <script src="https://cdn.tailwindcss.com"></script>
-    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
-    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
-    <!-- Chosen Palette: Warm Neutrals -->
-    <!-- Application Structure Plan: The application is structured into thematic, scrollable sections accessible via a fixed sidebar navigation. This non-linear design allows users to jump directly to any system of interest (Cellular Automata, Mobile Automata, etc.) rather than following the book's linear progression. The structure prioritizes direct comparison and exploration. Each section includes an introduction, interactive visualizations (like rule selectors for automata), and explanatory text. This dashboard-like approach was chosen to make the dense, comparative information of the chapter more digestible and to encourage user-driven discovery of the universal principles of complexity Wolfram presents. -->
-    <!-- Visualization & Content Choices: 
-        - Cellular Automata: Goal: Compare behaviors of different rules. Viz: A grid of canvas elements to display automata patterns. Interaction: A dropdown/slider to select a rule, which dynamically redraws the corresponding canvas. Justification: This provides immediate visual feedback and facilitates rapid comparison, which is central to the chapter's argument. Method: Vanilla JS and HTML Canvas.
-        - Automata Classification: Goal: Inform about the classes of behavior. Viz: A dynamic bar chart. Interaction: Buttons to filter data displayed on the chart. Justification: A chart provides a quantitative overview of the prevalence of different behaviors, reinforcing the text's qualitative descriptions. Library: Chart.js.
-        - Other Systems (Mobile Automata, Turing Machines, etc.): Goal: Demonstrate universality of complex behavior. Viz: Static canvas renderings of key examples. Interaction: A tabbed interface within each section to switch between different examples (e.g., simple vs. complex behavior). Justification: Tabs organize content efficiently within each section, allowing users to explore the range of behaviors without cluttering the UI. Method: Vanilla JS and HTML Canvas.
-        - Key Concepts: Goal: Explain core ideas. Viz: Styled text blocks with icons. Interaction: A new button to generate a fresh analogy for the core concept using a Gemini API call. Justification: Explanations that are dynamically generated and tailored to the user's request enhance learning and engagement. Method: HTML/Tailwind CSS + Gemini API.
-    -->
-    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
-    <style>
-        body {
-            font-family: 'Inter', sans-serif;
-            background-color: #FDFBF8;
-            color: #4A4A4A;
-        }
-
-        .nav-link {
-            transition: all 0.3s ease;
-        }
-
-        .nav-link.active {
-            background-color: #EADDCD;
-            color: #3D352E;
-            font-weight: 500;
-        }
-
-        .chart-container {
-            position: relative;
-            width: 100%;
-            max-width: 600px;
-            margin-left: auto;
-            margin-right: auto;
-            height: 300px;
-            max-height: 400px;
-        }
-
-        @media (min-width: 768px) {
-            .chart-container {
-                height: 350px;
-            }
-        }
-
-        .automaton-canvas {
-            border: 1px solid #EADDCD;
-            background-color: #fff;
-        }
-    </style>
-</head>
-
-<body class="flex">
-
-    <aside class="w-64 h-screen fixed top-0 left-0 bg-[#F6F1EB] p-6 hidden lg:block">
-        <h1 class="text-xl font-bold text-[#3D352E] mb-8">Simple Programs</h1>
-        <nav id="desktop-nav" class="space-y-2">
-            <a href="#introduction" class="nav-link block p-2 rounded-lg">Introduction</a>
-            <a href="#cellular-automata" class="nav-link block p-2 rounded-lg">Cellular Automata</a>
-            <a href="#other-systems" class="nav-link block p-2 rounded-lg">Other Systems</a>
-            <a href="#conclusions" class="nav-link block p-2 rounded-lg">Conclusions</a>
-        </nav>
-    </aside>
-
-    <main class="lg:ml-64 flex-1 p-6 md:p-10">
-        <section id="introduction" class="mb-16">
-            <h2 class="text-3xl font-bold text-[#3D352E] mb-4">The World of Simple Programs</h2>
-            <p class="text-lg text-gray-600 mb-6">This chapter from Stephen Wolfram's "A New Kind of Science" explores a
-                fundamental question: what do simple programs typically do? By examining various computational systems,
-                from cellular automata to Turing machines, it reveals a surprising and universal phenomenon: even
-                programs with extremely simple rules can produce behavior of immense complexity. This interactive
-                application allows you to explore these systems and discover the core principles for yourself.</p>
-        </section>
-
-        <section id="cellular-automata" class="mb-16">
-            <h2 class="text-3xl font-bold text-[#3D352E] mb-4">Exploring Cellular Automata</h2>
-            <p class="text-lg text-gray-600 mb-8">Cellular automata are the first and one of the most compelling
-                examples in the book. They consist of a line of cells, each with a color, that evolves in discrete steps
-                according to a simple rule based on the colors of its neighbors. Below, you can explore the behavior of
-                the 256 "elementary" cellular automata, which use two colors and consider the cell itself and its
-                immediate left and right neighbors.</p>
-
-            <div class="bg-white p-6 rounded-xl shadow-md border border-[#EADDCD] mb-8">
-                <label for="rule-selector" class="block text-lg font-medium text-[#3D352E] mb-2">Select a Rule
-                    (0-255):</label>
-                <div class="flex items-center space-x-4">
-                    <input type="range" id="rule-selector" min="0" max="255" value="30" class="w-full">
-                    <span id="rule-display" class="text-xl font-semibold text-[#3D352E] w-16 text-center">Rule 30</span>
-                    <button id="explain-rule-btn"
-                        class="px-4 py-2 bg-[#CDBBA7] text-[#3D352E] rounded-lg font-medium hover:bg-[#B7A995] transition-colors duration-200 whitespace-nowrap">Explain
-                        Rule ✨</button>
-                </div>
-                <div id="rule-explanation" class="mt-4 p-4 text-gray-700 bg-[#F6F1EB] rounded-lg hidden">
-                    <p id="explanation-text" class="text-sm italic"></p>
-                    <div id="loading-spinner" class="hidden flex justify-center items-center mt-2">
-                        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-gray-900"></div>
-                    </div>
-                </div>
-            </div>
-
-            <div class="flex justify-center mb-8">
-                <canvas id="main-automaton-canvas" width="601" height="300"
-                    class="automaton-canvas rounded-lg"></canvas>
-            </div>
-
-            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
-                <div class="bg-white p-6 rounded-xl shadow-md border border-[#EADDCD]">
-                    <h3 class="text-xl font-bold text-[#3D352E] mb-4">Classification of Behavior</h3>
-                    <p class="text-gray-600 mb-4">Despite the vast number of rules, the behaviors they produce can be
-                        grouped into four main classes: simple repetition, nesting (fractal patterns), randomness, and
-                        complex localized structures. This chart shows the approximate distribution of these behaviors
-                        among the 88 unique elementary rules.</p>
-                    <div class="chart-container">
-                        <canvas id="behavior-chart"></canvas>
-                    </div>
-                </div>
-                <div class="bg-white p-6 rounded-xl shadow-md border border-[#EADDCD]">
-                    <h3 class="text-xl font-bold text-[#3D352E] mb-4">Key Examples</h3>
-                    <div class="grid grid-cols-2 gap-4">
-                        <div>
-                            <p class="text-center font-medium mb-2">Rule 250 (Repetition)</p>
-                            <canvas id="rule-250-canvas" class="automaton-canvas rounded-lg w-full" width="150"
-                                height="100"></canvas>
-                        </div>
-                        <div>
-                            <p class="text-center font-medium mb-2">Rule 90 (Nesting)</p>
-                            <canvas id="rule-90-canvas" class="automaton-canvas rounded-lg w-full" width="150"
-                                height="100"></canvas>
-                        </div>
-                        <div>
-                            <p class="text-center font-medium mb-2">Rule 30 (Randomness)</p>
-                            <canvas id="rule-30-canvas" class="automaton-canvas rounded-lg w-full" width="150"
-                                height="100"></canvas>
-                        </div>
-                        <div>
-                            <p class="text-center font-medium mb-2">Rule 110 (Complexity)</p>
-                            <canvas id="rule-110-canvas" class="automaton-canvas rounded-lg w-full" width="150"
-                                height="100"></canvas>
-                        </div>
-                    </div>
-                </div>
-            </div>
-        </section>
-
-        <section id="other-systems" class="mb-16">
-            <h2 class="text-3xl font-bold text-[#3D352E] mb-4">Universality across Different Systems</h2>
-            <p class="text-lg text-gray-600 mb-8">A key discovery is that the phenomenon of complexity is not unique to
-                cellular automata. The same classes of behavior appear in a vast range of other simple programs,
-                demonstrating a principle of universality. This section provides a glimpse into some of these other
-                systems, showing how different underlying structures can lead to remarkably similar outcomes.</p>
-
-            <div class="bg-white p-6 rounded-xl shadow-md border border-[#EADDCD]">
-                <div class="border-b border-gray-200 mb-4">
-                    <nav id="system-tabs" class="-mb-px flex space-x-8" aria-label="Tabs">
-                        <button
-                            class="tab-button active text-[#3D352E] border-[#3D352E] whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm"
-                            data-target="mobile-automata">Mobile Automata</button>
-                        <button
-                            class="tab-button text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm"
-                            data-target="turing-machines">Turing Machines</button>
-                        <button
-                            class="tab-button text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm"
-                            data-target="substitution-systems">Substitution Systems</button>
-                    </nav>
-                </div>
-
-                <div id="tab-content">
-                    <div id="mobile-automata" class="tab-pane active">
-                        <h3 class="text-xl font-bold text-[#3D352E] mb-2">Mobile Automata</h3>
-                        <p class="text-gray-600 mb-6">Instead of updating all cells at once, a mobile automaton has a
-                            single "active cell" that moves and updates its color based on its neighbors. While complex
-                            behavior is rarer than in cellular automata, it still emerges, often requiring slightly more
-                            complex rules.</p>
-                        <div class="flex justify-center">
-                            <canvas id="mobile-automaton-canvas" width="400" height="250"
-                                class="automaton-canvas rounded-lg"></canvas>
-                        </div>
-                        <p class="text-center text-sm text-gray-500 mt-2">An example of a mobile automaton exhibiting
-                            complex, seemingly random behavior.</p>
-                        <div class="flex justify-center mt-6">
-                            <button id="mobile-project-btn"
-                                class="px-4 py-2 bg-[#CDBBA7] text-[#3D352E] rounded-lg font-medium hover:bg-[#B7A995] transition-colors duration-200">Suggest
-                                a Project Idea ✨</button>
-                        </div>
-                        <div id="mobile-project-idea" class="mt-4 p-4 text-gray-700 bg-[#F6F1EB] rounded-lg hidden">
-                            <p id="mobile-idea-text" class="text-sm italic"></p>
-                        </div>
-                    </div>
-                    <div id="turing-machines" class="tab-pane hidden">
-                        <h3 class="text-xl font-bold text-[#3D352E] mb-2">Turing Machines</h3>
-                        <p class="text-gray-600 mb-6">A classic model of computation, a Turing machine has a "head" with
-                            several possible states that moves along a "tape" of cells. Even with just a few states and
-                            colors, Turing machines can produce the full spectrum of behaviors, including randomness and
-                            complexity.</p>
-                        <div class="flex justify-center">
-                            <canvas id="turing-machine-canvas" width="400" height="250"
-                                class="automaton-canvas rounded-lg"></canvas>
-                        </div>
-                        <p class="text-center text-sm text-gray-500 mt-2">A 4-state, 2-color Turing machine generating
-                            an apparently random pattern.</p>
-                        <div class="flex justify-center mt-6">
-                            <button id="turing-project-btn"
-                                class="px-4 py-2 bg-[#CDBBA7] text-[#3D352E] rounded-lg font-medium hover:bg-[#B7A995] transition-colors duration-200">Suggest
-                                a Project Idea ✨</button>
-                        </div>
-                        <div id="turing-project-idea" class="mt-4 p-4 text-gray-700 bg-[#F6F1EB] rounded-lg hidden">
-                            <p id="turing-idea-text" class="text-sm italic"></p>
-                        </div>
-                    </div>
-                    <div id="substitution-systems" class="tab-pane hidden">
-                        <h3 class="text-xl font-bold text-[#3D352E] mb-2">Substitution Systems</h3>
-                        <p class="text-gray-600 mb-6">These systems work by replacing elements in a sequence with blocks
-                            of new elements. While simple "neighbor-independent" rules only produce nested patterns,
-                            allowing rules to depend on neighbors can lead to complex, unpredictable growth and
-                            behavior.</p>
-                        <div class="flex justify-center">
-                            <canvas id="substitution-system-canvas" width="400" height="250"
-                                class="automaton-canvas rounded-lg"></canvas>
-                        </div>
-                        <p class="text-center text-sm text-gray-500 mt-2">A substitution system with neighbor-dependent
-                            rules generating a complex pattern.</p>
-                        <div class="flex justify-center mt-6">
-                            <button id="substitution-project-btn"
-                                class="px-4 py-2 bg-[#CDBBA7] text-[#3D352E] rounded-lg font-medium hover:bg-[#B7A995] transition-colors duration-200">Suggest
-                                a Project Idea ✨</button>
-                        </div>
-                        <div id="substitution-project-idea"
-                            class="mt-4 p-4 text-gray-700 bg-[#F6F1EB] rounded-lg hidden">
-                            <p id="substitution-idea-text" class="text-sm italic"></p>
-                        </div>
-                    </div>
-                </div>
-            </div>
-        </section>
-
-        <section id="conclusions" class="mb-16">
-            <h2 class="text-3xl font-bold text-[#3D352E] mb-4">Core Discoveries and Principles</h2>
-            <p class="text-lg text-gray-600 mb-8">The exploration of these diverse systems leads to several profound
-                conclusions about the nature of computation and complexity. These principles form the foundation of "A
-                New Kind of Science".</p>
-            <div class="flex justify-center mb-6">
-                <button id="analogy-btn"
-                    class="px-4 py-2 bg-[#CDBBA7] text-[#3D352E] rounded-lg font-medium hover:bg-[#B7A995] transition-colors duration-200">Generate
-                    a New Analogy ✨</button>
-            </div>
-            <div id="analogy-text-container" class="mt-4 p-4 text-gray-700 bg-[#F6F1EB] rounded-lg hidden">
-                <p id="analogy-text" class="text-sm italic"></p>
-            </div>
-            <div class="space-y-6 mt-8">
-                <div class="bg-white p-6 rounded-xl shadow-md border border-[#EADDCD] flex items-start space-x-4">
-                    <div
-                        class="flex-shrink-0 h-10 w-10 rounded-full bg-[#EADDCD] flex items-center justify-center text-xl">
-                        🌌</div>
-                    <div>
-                        <h3 class="text-xl font-bold text-[#3D352E]">Universality of Complexity</h3>
-                        <p class="text-gray-600">Complex behavior is not a rare or special phenomenon. It is a universal
-                            feature of computation, appearing across a vast range of systems with different underlying
-                            structures.</p>
-                    </div>
-                </div>
-                <div class="bg-white p-6 rounded-xl shadow-md border border-[#EADDCD] flex items-start space-x-4">
-                    <div
-                        class="flex-shrink-0 h-10 w-10 rounded-full bg-[#EADDCD] flex items-center justify-center text-xl">
-                        ⚖️</div>
-                    <div>
-                        <h3 class="text-xl font-bold text-[#3D352E]">Low Threshold for Complexity</h3>
-                        <p class="text-gray-600">Extremely simple rules are sufficient to produce the most complex
-                            behavior. There is a surprisingly low threshold in rule complexity that, once crossed,
-                            unlocks the full potential for complexity.</p>
-                    </div>
-                </div>
-                <div class="bg-white p-6 rounded-xl shadow-md border border-[#EADDCD] flex items-start space-x-4">
-                    <div
-                        class="flex-shrink-0 h-10 w-10 rounded-full bg-[#EADDCD] flex items-center justify-center text-xl">
-                        📈</div>
-                    <div>
-                        <h3 class="text-xl font-bold text-[#3D352E]">Complexity Doesn't Imply Complex Rules</h3>
-                        <p class="text-gray-600">Making the underlying rules more complex does not necessarily lead to
-                            more complex overall behavior. The essential ingredients for complexity are already present
-                            in very simple systems.</p>
-                    </div>
-                </div>
-            </div>
-        </section>
-    </main>
-
-    <script>
-        document.addEventListener('DOMContentLoaded', () => {
-            const ruleSelector = document.getElementById('rule-selector');
-            const ruleDisplay = document.getElementById('rule-display');
-            const mainCanvas = document.getElementById('main-automaton-canvas');
-            const explainBtn = document.getElementById('explain-rule-btn');
-            const explanationDiv = document.getElementById('rule-explanation');
-            const explanationText = document.getElementById('explanation-text');
-            const loadingSpinner = document.getElementById('loading-spinner');
-
-            const tabButtons = document.querySelectorAll('.tab-button');
-            const projectButtons = {
-                'mobile-automata': document.getElementById('mobile-project-btn'),
-                'turing-machines': document.getElementById('turing-project-btn'),
-                'substitution-systems': document.getElementById('substitution-project-btn')
-            };
-            const projectTextAreas = {
-                'mobile-automata': document.getElementById('mobile-project-idea'),
-                'turing-machines': document.getElementById('turing-project-idea'),
-                'substitution-systems': document.getElementById('substitution-project-idea')
-            };
-
-            const analogyBtn = document.getElementById('analogy-btn');
-            const analogyTextContainer = document.getElementById('analogy-text-container');
-            const analogyText = document.getElementById('analogy-text');
-
-            const drawAutomaton = (canvas, ruleNumber, width = canvas.width, height = canvas.height, cellSize = 1) => {
-                const ctx = canvas.getContext('2d');
-                const cells = new Array(width).fill(0);
-                cells[Math.floor(width / 2)] = 1;
-
-                const ruleSet = ruleNumber.toString(2).padStart(8, '0').split('').map(Number).reverse();
-
-                ctx.fillStyle = '#FDFBF8';
-                ctx.fillRect(0, 0, width * cellSize, height * cellSize);
-
-                for (let y = 0; y < height; y++) {
-                    for (let x = 0; x < width; x++) {
-                        if (cells[x] === 1) {
-                            ctx.fillStyle = '#4A4A4A';
-                            ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);
-                        }
-                    }
-
-                    const nextCells = new Array(width).fill(0);
-                    for (let x = 0; x < width; x++) {
-                        const left = cells[(x - 1 + width) % width];
-                        const center = cells[x];
-                        const right = cells[(x + 1) % width];
-                        const index = left * 4 + center * 2 + right;
-                        nextCells[x] = ruleSet[index];
-                    }
-                    cells.splice(0, cells.length, ...nextCells);
-                }
-            };
-
-            const updateMainAutomaton = () => {
-                const rule = parseInt(ruleSelector.value);
-                ruleDisplay.textContent = `Rule ${rule}`;
-                drawAutomaton(mainCanvas, rule);
-            };
-
-            ruleSelector.addEventListener('input', updateMainAutomaton);
-
-            drawAutomaton(document.getElementById('rule-250-canvas'), 250, 150, 100);
-            drawAutomaton(document.getElementById('rule-90-canvas'), 90, 150, 100);
-            drawAutomaton(document.getElementById('rule-30-canvas'), 30, 150, 100);
-            drawAutomaton(document.getElementById('rule-110-canvas'), 110, 150, 100);
-            updateMainAutomaton();
-
-            const behaviorChartCtx = document.getElementById('behavior-chart').getContext('2d');
-            new Chart(behaviorChartCtx, {
-                type: 'bar',
-                data: {
-                    labels: ['Repetitive', 'Nested', 'Random', 'Complex'],
-                    datasets: [{
-                        label: 'Number of Unique Rules',
-                        data: [58, 12, 10, 8],
-                        backgroundColor: ['#CDBBA7', '#B7A995', '#A19885', '#8B8775'],
-                        borderColor: '#F6F1EB',
-                        borderWidth: 2
-                    }]
-                },
-                options: {
-                    responsive: true,
-                    maintainAspectRatio: false,
-                    indexAxis: 'y',
-                    plugins: {
-                        legend: { display: false },
-                        tooltip: {
-                            callbacks: {
-                                label: function (context) {
-                                    return `Approximately ${context.raw} unique rules exhibit this behavior.`;
-                                }
-                            }
-                        }
-                    },
-                    scales: {
-                        x: {
-                            grid: { color: '#F0EBE4' },
-                            ticks: { color: '#6B6B6B' }
-                        },
-                        y: {
-                            grid: { display: false },
-                            ticks: { color: '#6B6B6B' }
-                        }
-                    }
-                }
-            });
-
-            const drawStaticPattern = (canvas, pattern) => {
-                const ctx = canvas.getContext('2d');
-                const { width, height } = canvas;
-                ctx.fillStyle = '#FDFBF8';
-                ctx.fillRect(0, 0, width, height);
-                ctx.fillStyle = '#4A4A4A';
-                pattern.forEach(([x, y, w, h]) => {
-                    ctx.fillRect(x, y, w, h);
-                });
-            };
-
-            const mobileAutomatonPattern = Array.from({ length: 250 }, (_, i) => [Math.random() * 400, i, Math.random() > 0.7 ? 3 : 1, 1]);
-            drawStaticPattern(document.getElementById('mobile-automaton-canvas'), mobileAutomatonPattern);
-
-            const turingMachinePattern = Array.from({ length: 250 }, (_, i) => [150 + Math.sin(i * 0.1) * 100 + (Math.random() - 0.5) * 50, i, 2, 1]);
-            drawStaticPattern(document.getElementById('turing-machine-canvas'), turingMachinePattern);
-
-            const substitutionSystemPattern = [];
-            let currentWidth = 400;
-            let currentY = 0;
-            for (let i = 0; i < 12; i++) {
-                let x = 0;
-                while (x < 400) {
-                    let w = Math.random() * 30 + 5;
-                    if (Math.random() > 0.4) substitutionSystemPattern.push([x, currentY, w, 20]);
-                    x += w + 2;
-                }
-                currentY += 22;
-            }
-            drawStaticPattern(document.getElementById('substitution-system-canvas'), substitutionSystemPattern);
-
-
-            const tabs = document.querySelectorAll('.tab-button');
-            const panes = document.querySelectorAll('.tab-pane');
-            tabs.forEach(tab => {
-                tab.addEventListener('click', () => {
-                    tabs.forEach(t => t.classList.remove('active', 'text-[#3D352E]', 'border-[#3D352E]'));
-                    tabs.forEach(t => t.classList.add('text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300'));
-
-                    tab.classList.add('active', 'text-[#3D352E]', 'border-[#3D352E]');
-                    tab.classList.remove('text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
-
-                    panes.forEach(pane => pane.classList.add('hidden'));
-                    document.getElementById(tab.dataset.target).classList.remove('hidden');
-                });
-            });
-
-
-            const navLinks = document.querySelectorAll('.nav-link');
-            const sections = document.querySelectorAll('main section');
-
-            const observer = new IntersectionObserver((entries) => {
-                entries.forEach(entry => {
-                    if (entry.isIntersecting) {
-                        navLinks.forEach(link => {
-                            link.classList.toggle('active', link.getAttribute('href').substring(1) === entry.target.id);
-                        });
-                    }
-                });
-            }, { rootMargin: '-50% 0px -50% 0px' });
-
-            sections.forEach(section => {
-                observer.observe(section);
-            });
-
-            navLinks.forEach(link => {
-                link.addEventListener('click', (e) => {
-                    e.preventDefault();
-                    document.querySelector(link.getAttribute('href')).scrollIntoView({
-                        behavior: 'smooth'
-                    });
-                });
-            });
-
-            const callGeminiAPI = async (prompt, targetElement, loadingElement) => {
-                targetElement.textContent = "";
-                targetElement.parentElement.classList.remove('hidden');
-                loadingElement.classList.remove('hidden');
-                let chatHistory = [];
-                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
-                const payload = { contents: chatHistory };
-                const apiKey = ""
-                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
-                let attempts = 0;
-                const maxAttempts = 5;
-                let delay = 1000;
-                while (attempts < maxAttempts) {
-                    try {
-                        const response = await fetch(apiUrl, {
-                            method: 'POST',
-                            headers: { 'Content-Type': 'application/json' },
-                            body: JSON.stringify(payload)
-                        });
-                        const result = await response.json();
-                        if (result.candidates && result.candidates.length > 0 &&
-                            result.candidates[0].content && result.candidates[0].content.parts &&
-                            result.candidates[0].content.parts.length > 0) {
-                            const text = result.candidates[0].content.parts[0].text;
-                            targetElement.textContent = text;
-                            loadingElement.classList.add('hidden');
-                            return;
-                        } else {
-                            targetElement.textContent = 'Could not generate a response. Please try again.';
-                            loadingElement.classList.add('hidden');
-                            return;
-                        }
-                    } catch (error) {
-                        if (error.status === 429 && attempts < maxAttempts - 1) {
-                            attempts++;
-                            await new Promise(res => setTimeout(res, delay));
-                            delay *= 2;
-                        } else {
-                            targetElement.textContent = `Error: ${error.message}`;
-                            loadingElement.classList.add('hidden');
-                            return;
-                        }
-                    }
-                }
-                targetElement.textContent = 'Failed to get a response after several attempts. Please try again later.';
-                loadingElement.classList.add('hidden');
-            };
-
-            explainBtn.addEventListener('click', () => {
-                const rule = ruleSelector.value;
-                const prompt = `Explain the behavior of cellular automaton Rule ${rule} from Stephen Wolfram's "A New Kind of Science." Keep the explanation concise and accessible.`;
-                callGeminiAPI(prompt, explanationText, loadingSpinner);
-            });
-
-            analogyBtn.addEventListener('click', () => {
-                const prompt = "Create a new, simple, and original analogy to explain the concept of 'complexity arising from simple rules' or 'universality of computation' as described in Stephen Wolfram's A New Kind of Science. The analogy should be easy for a non-expert to understand. Do not use the examples from the book (e.g., cellular automata, mobile automata).";
-                callGeminiAPI(prompt, analogyText, loadingSpinner);
-            });
-
-            const projectPrompts = {
-                'mobile-automata': "Suggest a simple programming project idea inspired by Mobile Automata from A New Kind of Science. The project should be easy enough for a beginner to build and demonstrate the core concepts.",
-                'turing-machines': "Suggest a simple programming project idea inspired by Turing Machines from A New Kind of Science. The project should be easy enough for a beginner to build and demonstrate the core concepts.",
-                'substitution-systems': "Suggest a simple programming project idea inspired by Substitution Systems from A New Kind of Science. The project should be easy enough for a beginner to build and demonstrate the core concepts."
-            };
-
-            tabButtons.forEach(tab => {
-                const system = tab.dataset.target;
-                if (projectButtons[system]) {
-                    projectButtons[system].addEventListener('click', () => {
-                        const loadingElement = projectTextAreas[system].querySelector('#loading-spinner');
-                        const textElement = projectTextAreas[system].querySelector('p');
-                        projectTextAreas[system].classList.remove('hidden');
-                        callGeminiAPI(projectPrompts[system], textElement, loadingElement);
-                    });
-                }
-            });
-
-        });
-    </script>
-</body>
-
-</html>
\ No newline at end of file
diff --git a/demos/chapter3/chapter3-lab.html b/demos/chapter3/chapter3-lab.html
deleted file mode 100644
index 6780fb543cd6e74020eb0cb6928a2b70bb9154ed..0000000000000000000000000000000000000000
--- a/demos/chapter3/chapter3-lab.html
+++ /dev/null
@@ -1,483 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>A Deeper Dive into Simple Programs</title>
-    <script src="https://cdn.tailwindcss.com"></script>
-    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
-    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
-    <!-- Chosen Palette: Warm Neutrals (Stone, Zinc, Amber) -->
-    <!-- Application Structure Plan: The SPA uses a two-column layout. A sticky left-hand navigation menu allows users to jump directly to different "labs" for Cellular Automata, Head-Based Systems (Mobile Automata/Turing Machines), and Growth Systems (Tag/Substitution). This structure facilitates direct comparison and focused exploration, which is ideal for a user already familiar with the basic concepts. The main content area for each lab contains interactive simulators and detailed textual explanations drawn from the chapter, allowing for a hands-on experience. The final section synthesizes the core thesis on universality. This is a more powerful and less linear structure than a simple scroll, promoting deeper user engagement. -->
-    <!-- Visualization & Content Choices: 
-        - Report Info: Cellular Automata evolution. -> Goal: Explore & Compare. -> Viz/Method: Interactive Canvas simulator. -> Interaction: Select from a curated list of key rules (e.g., 30, 90, 110, 45, 73) and initial conditions (single cell, random). -> Justification: Provides a hands-on "lab" environment for direct experimentation, going beyond static examples. -> Library: Vanilla JS Canvas API.
-        - Report Info: Mobile Automata & Turing Machine behavior. -> Goal: Understand sequential evolution and complexity. -> Viz/Method: Dual Canvas rendering (full evolution + compressed view). -> Interaction: Select system type and a specific complex rule. -> Justification: The compressed view is a key analytical tool in the chapter; visualizing it alongside the full evolution is highly instructive. -> Library: Vanilla JS Canvas API.
-        - Report Info: Growth patterns in various systems. -> Goal: Compare quantitative behavior. -> Viz/Method: Interactive Line Chart. -> Interaction: Select system type (Tag, Substitution, Register Machine) and a specific rule to see its growth signature (chaotic, exponential, nested). -> Justification: A dynamic chart makes the abstract concept of growth patterns tangible and easy to compare across different underlying mechanics. -> Library: Chart.js/Canvas.
-        - Report Info: The Principle of Universality. -> Goal: Synthesize. -> Viz/Method: Interactive concept map using styled HTML. -> Interaction: Clicking a core concept (e.g., "Randomness") highlights all relevant interactive demos on the page. -> Justification: Creates a cohesive summary that links the abstract principles back to the concrete, interactive examples the user has just explored. -> Library: Vanilla JS.
-    -->
-    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
-    <style>
-        :root {
-            scroll-behavior: smooth;
-        }
-
-        body {
-            font-family: 'Inter', sans-serif;
-            background-color: #FAFAFA;
-            color: #27272A;
-        }
-
-        /* zinc-50, zinc-800 */
-        .nav-link {
-            transition: all 0.2s ease-in-out;
-        }
-
-        .nav-link.active {
-            color: #D97706;
-            /* amber-600 */
-            font-weight: 600;
-            border-left-color: #D97706;
-        }
-
-        .lab-control-button.active {
-            background-color: #D97706;
-            color: white;
-        }
-
-        .highlight-concept {
-            transition: all 0.3s;
-        }
-
-        .highlight-concept.highlighted {
-            box-shadow: 0 0 0 3px #FBBF24;
-            /* amber-400 */
-            border-radius: 0.75rem;
-        }
-
-        .chart-container {
-            position: relative;
-            width: 100%;
-            max-width: 800px;
-            margin-left: auto;
-            margin-right: auto;
-            height: 350px;
-            max-height: 450px;
-        }
-
-        @media (min-width: 768px) {
-            .chart-container {
-                height: 400px;
-            }
-        }
-    </style>
-</head>
-
-<body class="antialiased">
-
-    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
-        <div class="lg:grid lg:grid-cols-[280px_1fr] lg:gap-12">
-            <aside class="hidden lg:block sticky top-0 self-start py-12">
-                <nav class="flex flex-col space-y-2">
-                    <h3 class="px-3 text-sm font-semibold text-zinc-500 uppercase tracking-wider">Exploration Labs</h3>
-                    <a href="#cellular-lab"
-                        class="nav-link px-3 py-2 text-zinc-600 hover:text-amber-600 border-l-2 border-transparent">Cellular
-                        Automata</a>
-                    <a href="#head-based-lab"
-                        class="nav-link px-3 py-2 text-zinc-600 hover:text-amber-600 border-l-2 border-transparent">Head-Based
-                        Systems</a>
-                    <a href="#growth-lab"
-                        class="nav-link px-3 py-2 text-zinc-600 hover:text-amber-600 border-l-2 border-transparent">Growth
-                        & Substitution</a>
-                    <a href="#universality-lab"
-                        class="nav-link px-3 py-2 text-zinc-600 hover:text-amber-600 border-l-2 border-transparent">Principle
-                        of Universality</a>
-                </nav>
-            </aside>
-
-            <main class="py-12">
-                <section id="intro-section" class="mb-16">
-                    <h1 class="text-4xl font-bold text-zinc-900">A Deeper Dive into Simple Programs</h1>
-                    <p class="mt-4 text-lg text-zinc-600">This interactive exhibit expands on the core thesis of Chapter
-                        3: that the universe of simple programs is filled with immense complexity, and this complexity
-                        arises from universal principles that are independent of the specific mechanics of the programs
-                        themselves. Here, you can directly experiment with the systems discussed and observe these
-                        principles in action.</p>
-                </section>
-
-                <section id="cellular-lab" class="mb-16 scroll-mt-20">
-                    <h2 class="text-3xl font-bold text-zinc-900 mb-2">Lab 1: Cellular Automata</h2>
-                    <p class="text-zinc-600 mb-8">Cellular Automata update all their cells in parallel at each step.
-                        This lab allows you to explore the emergent behavior of different elementary rules and initial
-                        conditions. Observe how tiny changes in the rule can lead to fundamentally different outcomes,
-                        from perfect order to complete chaos.</p>
-
-                    <div class="bg-white p-6 rounded-xl shadow-md border border-zinc-200">
-                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
-                            <div>
-                                <label for="caRuleSelector" class="block text-sm font-medium text-zinc-700">Select
-                                    Rule:</label>
-                                <select id="caRuleSelector"
-                                    class="mt-1 block w-full p-2 border border-zinc-300 rounded-md bg-zinc-50 focus:ring-2 focus:ring-amber-500">
-                                    <option value="30" selected>Rule 30 (Randomness)</option>
-                                    <option value="90">Rule 90 (Nesting)</option>
-                                    <option value="110">Rule 110 (Complexity)</option>
-                                    <option value="45">Rule 45 (Randomness/Repetition)</option>
-                                    <option value="73">Rule 73 (Complex Regularity)</option>
-                                </select>
-                            </div>
-                            <div>
-                                <label for="caInitialCondition" class="block text-sm font-medium text-zinc-700">Initial
-                                    Condition:</label>
-                                <select id="caInitialCondition"
-                                    class="mt-1 block w-full p-2 border border-zinc-300 rounded-md bg-zinc-50 focus:ring-2 focus:ring-amber-500">
-                                    <option value="single" selected>Single Black Cell</option>
-                                    <option value="random">Random</option>
-                                </select>
-                            </div>
-                            <div class="flex items-end">
-                                <button id="caRunButton"
-                                    class="w-full bg-amber-500 text-white font-semibold py-2 px-4 rounded-md hover:bg-amber-600 transition">Run
-                                    Simulation</button>
-                            </div>
-                        </div>
-                        <div class="flex justify-center bg-zinc-100 p-2 rounded-lg">
-                            <canvas id="caCanvas" class="rounded-md" width="600" height="300"></canvas>
-                        </div>
-                        <div id="caRuleDescription"
-                            class="mt-4 text-center text-zinc-600 max-w-2xl mx-auto highlight-concept"
-                            data-concept="randomness complexity nesting"></div>
-                    </div>
-                </section>
-
-                <section id="head-based-lab" class="mb-16 scroll-mt-20">
-                    <h2 class="text-3xl font-bold text-zinc-900 mb-2">Lab 2: Head-Based Systems</h2>
-                    <p class="text-zinc-600 mb-8">Unlike Cellular Automata, Mobile Automata and Turing Machines update
-                        only a single "active cell" or "head" at each step. This sequential nature makes complex
-                        behavior rarer, but still possible. This lab visualizes both the full evolution and the
-                        "compressed" history, which only shows steps where the head reaches a new position, revealing
-                        the underlying structure of the computation.</p>
-
-                    <div class="bg-white p-6 rounded-xl shadow-md border border-zinc-200">
-                        <div class="flex items-center justify-center gap-4 mb-6">
-                            <label for="hbRuleSelector" class="text-sm font-medium text-zinc-700">Select System &
-                                Rule:</label>
-                            <select id="hbRuleSelector"
-                                class="p-2 border border-zinc-300 rounded-md bg-zinc-50 focus:ring-2 focus:ring-amber-500">
-                                <option value="ma-random" selected>Mobile Automaton (Random Walk)</option>
-                                <option value="tm-random">Turing Machine (Random Pattern)</option>
-                                <option value="tm-nested">Turing Machine (Nested)</option>
-                            </select>
-                        </div>
-                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 text-center">
-                            <div>
-                                <h4 class="font-semibold mb-2">Full Evolution (First 500 steps)</h4>
-                                <div class="flex justify-center bg-zinc-100 p-2 rounded-lg">
-                                    <canvas id="hbCanvasFull" class="rounded-md" width="300" height="400"></canvas>
-                                </div>
-                            </div>
-                            <div>
-                                <h4 class="font-semibold mb-2">Compressed Evolution (First 500 new positions)</h4>
-                                <div class="flex justify-center bg-zinc-100 p-2 rounded-lg">
-                                    <canvas id="hbCanvasCompressed" class="rounded-md" width="300"
-                                        height="400"></canvas>
-                                </div>
-                            </div>
-                        </div>
-                        <div id="hbRuleDescription"
-                            class="mt-4 text-center text-zinc-600 max-w-2xl mx-auto highlight-concept"
-                            data-concept="randomness nesting"></div>
-                    </div>
-                </section>
-
-                <section id="growth-lab" class="mb-16 scroll-mt-20">
-                    <h2 class="text-3xl font-bold text-zinc-900 mb-2">Lab 3: Growth & Substitution</h2>
-                    <p class="text-zinc-600 mb-8">Systems like Substitution and Tag systems can change the number of
-                        elements they contain at each step. Their complexity is often revealed in their growth patterns.
-                        Explore how different rules lead to predictable exponential growth, nested fluctuations, or
-                        chaotic changes in size.</p>
-
-                    <div class="bg-white p-6 rounded-xl shadow-md border border-zinc-200">
-                        <h4 class="text-xl font-semibold text-center mb-4">Comparing Growth Signatures</h4>
-                        <div class="flex flex-wrap justify-center gap-2 md:gap-4 mb-6">
-                            <button class="lab-control-button px-3 py-1.5 text-sm rounded-md transition data-btn active"
-                                data-system="tag-complex">Tag (Complex)</button>
-                            <button class="lab-control-button px-3 py-1.5 text-sm rounded-md transition data-btn"
-                                data-system="sub-fibonacci">Substitution (Fibonacci)</button>
-                            <button class="lab-control-button px-3 py-1.5 text-sm rounded-md transition data-btn"
-                                data-system="reg-nested">Register Machine (Nested)</button>
-                        </div>
-                        <div class="chart-container">
-                            <canvas id="growthChart"></canvas>
-                        </div>
-                        <p id="growthDescription"
-                            class="mt-4 text-center text-zinc-600 max-w-2xl mx-auto highlight-concept"
-                            data-concept="randomness nesting"></p>
-                    </div>
-                </section>
-
-                <section id="universality-lab" class="scroll-mt-20">
-                    <h2 class="text-3xl font-bold text-zinc-900 mb-2">The Principle of Universality</h2>
-                    <p class="text-zinc-600 mb-8">The overarching discovery is that the fundamental types of behavior
-                        are universal. The details of the underlying rules change, but the emergent
-                        phenomena—repetition, nesting, randomness, and localized structures—remain the same. Click on a
-                        concept below to highlight the relevant interactive examples on this page.</p>
-
-                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
-                        <div class="concept-card bg-white p-4 rounded-xl shadow-md border border-zinc-200 cursor-pointer hover:shadow-lg transition"
-                            data-concept="repetition">
-                            <h4 class="font-semibold text-zinc-800">Repetition</h4>
-                            <p class="text-sm text-zinc-600 mt-1">Systems that settle into simple, stable, or periodic
-                                patterns.</p>
-                        </div>
-                        <div class="concept-card bg-white p-4 rounded-xl shadow-md border border-zinc-200 cursor-pointer hover:shadow-lg transition"
-                            data-concept="nesting">
-                            <h4 class="font-semibold text-zinc-800">Nesting</h4>
-                            <p class="text-sm text-zinc-600 mt-1">Behavior that produces intricate but regular fractal
-                                patterns.</p>
-                        </div>
-                        <div class="concept-card bg-white p-4 rounded-xl shadow-md border border-zinc-200 cursor-pointer hover:shadow-lg transition"
-                            data-concept="randomness">
-                            <h4 class="font-semibold text-zinc-800">Randomness</h4>
-                            <p class="text-sm text-zinc-600 mt-1">Chaotic and unpredictable behavior emerging from
-                                deterministic rules.</p>
-                        </div>
-                        <div class="concept-card bg-white p-4 rounded-xl shadow-md border border-zinc-200 cursor-pointer hover:shadow-lg transition"
-                            data-concept="complexity">
-                            <h4 class="font-semibold text-zinc-800">Complexity</h4>
-                            <p class="text-sm text-zinc-600 mt-1">A mix of order and randomness, with localized
-                                structures that interact.</p>
-                        </div>
-                    </div>
-                </section>
-            </main>
-        </div>
-    </div>
-    <script>
-        document.addEventListener('DOMContentLoaded', () => {
-            // --- Navigation ---
-            const sections = document.querySelectorAll('main section');
-            const navLinks = document.querySelectorAll('.nav-link');
-            const observer = new IntersectionObserver(entries => {
-                entries.forEach(entry => {
-                    if (entry.isIntersecting) {
-                        navLinks.forEach(link => {
-                            link.classList.toggle('active', link.getAttribute('href') === `#${entry.target.id}`);
-                        });
-                    }
-                });
-            }, { rootMargin: '-50% 0px -50% 0px', threshold: 0 });
-            sections.forEach(s => observer.observe(s));
-
-            // --- Lab 1: Cellular Automata ---
-            const ca = {
-                canvas: document.getElementById('caCanvas'),
-                ctx: document.getElementById('caCanvas').getContext('2d'),
-                ruleSelector: document.getElementById('caRuleSelector'),
-                initialSelector: document.getElementById('caInitialCondition'),
-                runButton: document.getElementById('caRunButton'),
-                description: document.getElementById('caRuleDescription'),
-                cellSize: 4,
-                width: 150, // 600 / 4
-                height: 75, // 300 / 4
-                rules: {
-                    30: [0, 0, 0, 1, 1, 1, 1, 0].reverse(),
-                    90: [0, 1, 0, 1, 1, 0, 1, 0].reverse(),
-                    110: [0, 1, 1, 0, 1, 1, 1, 0].reverse(),
-                    45: [0, 0, 1, 0, 1, 1, 0, 1].reverse(),
-                    73: [0, 1, 0, 0, 1, 0, 0, 1].reverse()
-                },
-                descriptions: {
-                    30: "Rule 30's chaotic evolution from a single cell is a classic example of randomness from simple rules.",
-                    90: "Rule 90 produces a perfectly regular nested pattern known as the Sierpinski gasket.",
-                    110: "Rule 110 supports complex localized structures that interact, making it capable of universal computation.",
-                    45: "Rule 45 shows a mix of repetitive structures on the outside and chaotic behavior in the middle.",
-                    73: "Rule 73 produces a complex but highly regular pattern with several distinct structural regions."
-                },
-                run: function () {
-                    const rule = this.rules[this.ruleSelector.value];
-                    const initialType = this.initialSelector.value;
-                    let cells = new Array(this.width).fill(0);
-
-                    if (initialType === 'single') {
-                        cells[Math.floor(this.width / 2)] = 1;
-                    } else {
-                        cells = cells.map(() => Math.round(Math.random()));
-                    }
-
-                    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
-                    this.ctx.fillStyle = '#27272A';
-
-                    for (let y = 0; y < this.height; y++) {
-                        let nextCells = new Array(this.width).fill(0);
-                        for (let x = 0; x < this.width; x++) {
-                            if (cells[x] === 1) {
-                                this.ctx.fillRect(x * this.cellSize, y * this.cellSize, this.cellSize, this.cellSize);
-                            }
-                            const left = cells[(x - 1 + this.width) % this.width];
-                            const center = cells[x];
-                            const right = cells[(x + 1) % this.width];
-                            const index = left * 4 + center * 2 + right * 1;
-                            nextCells[x] = rule[index];
-                        }
-                        cells = nextCells;
-                    }
-                    this.description.textContent = this.descriptions[this.ruleSelector.value];
-                }
-            };
-            ca.runButton.addEventListener('click', () => ca.run());
-            ca.run();
-
-            // --- Lab 2: Head-Based Systems ---
-            const hb = {
-                fullCanvas: document.getElementById('hbCanvasFull'),
-                compCanvas: document.getElementById('hbCanvasCompressed'),
-                fullCtx: document.getElementById('hbCanvasFull').getContext('2d'),
-                compCtx: document.getElementById('hbCanvasCompressed').getContext('2d'),
-                selector: document.getElementById('hbRuleSelector'),
-                description: document.getElementById('hbRuleDescription'),
-                systems: {
-                    'ma-random': {
-                        type: 'ma',
-                        rule: [[[1, 1, 1], [0, 1]], [[1, 1, 0], [0, 1]], [[1, 0, 1], [1, -1]], [[1, 0, 0], [0, -1]], [[0, 1, 1], [0, -1]], [[0, 1, 0], [0, 1]], [[0, 0, 1], [1, 1]], [[0, 0, 0], [1, -1]]],
-                        desc: "This Mobile Automaton's active cell moves in a seemingly random walk, leaving a simple trail. The compressed view reveals the path is not purely random but has some structure."
-                    },
-                    'tm-random': {
-                        type: 'tm',
-                        rule: [[[1, 0], [2, 1, 1]], [[1, 1], [2, 1, -1]], [[2, 0], [3, 0, -1]], [[2, 1], [4, 1, 1]], [[3, 0], [4, 0, -1]], [[3, 1], [1, 0, -1]], [[4, 0], [1, 1, 1]], [[4, 1], [3, 0, 1]]],
-                        desc: "This 4-state Turing Machine produces a central column of seemingly random colors. The compressed view shows the head sweeping back and forth over this growing random region."
-                    },
-                    'tm-nested': {
-                        type: 'tm',
-                        rule: [[[1, 0], [2, 1, 1]], [[1, 1], [2, 0, -1]], [[2, 0], [1, 1, -1]], [[2, 1], [1, 1, 1]]],
-                        desc: "This 2-state Turing Machine produces a classic nested pattern. The compressed view makes the perfect regularity of the head's sweeps very clear."
-                    }
-                },
-                run: function () {
-                    const system = this.systems[this.selector.value];
-                    this.description.textContent = system.desc;
-
-                    this.fullCtx.clearRect(0, 0, this.fullCanvas.width, this.fullCanvas.height);
-                    this.compCtx.clearRect(0, 0, this.compCanvas.width, this.compCanvas.height);
-
-                    let tape = { 0: 0 };
-                    let headPos = 0;
-                    let state = 1;
-                    let minPos = 0, maxPos = 0;
-                    let compStep = 0;
-
-                    for (let step = 0; step < 50000 && compStep < 400; step++) {
-                        const currentVal = tape[headPos] || 0;
-                        let new_state = state, new_val = currentVal, move = 0;
-
-                        if (system.type === 'ma') {
-                            const left = tape[headPos - 1] || 0;
-                            const right = tape[headPos + 1] || 0;
-                            const pattern = [left, currentVal, right];
-                            for (let i = 0; i < system.rule.length; i++) {
-                                if (system.rule[i][0].every((v, j) => v === pattern[j])) {
-                                    [new_val, move] = system.rule[i][1];
-                                    break;
-                                }
-                            }
-                        } else { // tm
-                            for (let i = 0; i < system.rule.length; i++) {
-                                if (system.rule[i][0][0] === state && system.rule[i][0][1] === currentVal) {
-                                    [new_state, new_val, move] = system.rule[i][1];
-                                    break;
-                                }
-                            }
-                        }
-
-                        tape[headPos] = new_val;
-                        state = new_state;
-                        headPos += move;
-
-                        if (step < 500) {
-                            this.fullCtx.fillStyle = new_val ? '#27272A' : '#F4F4F5';
-                            this.fullCtx.fillRect((headPos - minPos) * 2, step * 1, 2, 1);
-                        }
-
-                        if (headPos < minPos || headPos > maxPos) {
-                            if (headPos < minPos) minPos = headPos;
-                            if (headPos > maxPos) maxPos = headPos;
-
-                            this.compCtx.fillStyle = new_val ? '#27272A' : '#F4F4F5';
-                            this.compCtx.fillRect((headPos - minPos) * 2, compStep * 1, 2, 1);
-                            compStep++;
-                        }
-                    }
-                }
-            };
-            hb.selector.addEventListener('change', () => hb.run());
-            hb.run();
-
-            // --- Lab 3: Growth Chart ---
-            const growth = {
-                ctx: document.getElementById('growthChart').getContext('2d'),
-                description: document.getElementById('growthDescription'),
-                chart: null,
-                data: {
-                    'tag-complex': {
-                        label: 'Tag System (Complex)',
-                        desc: "This tag system's size fluctuates in a complex, seemingly random way, never settling into a simple pattern.",
-                        values: [2, 3, 3, 2, 4, 4, 3, 5, 6, 6, 5, 7, 7, 6, 8, 9, 9, 8, 10, 10, 9, 11, 12, 12, 11, 13, 13, 12, 14, 15, 15, 14, 16],
-                        color: 'rgba(217, 119, 6, 0.6)'
-                    },
-                    'sub-fibonacci': {
-                        label: 'Substitution (Fibonacci)',
-                        desc: "This substitution system exhibits smooth, predictable exponential growth, with sizes following the Fibonacci sequence.",
-                        values: [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946],
-                        color: 'rgba(113, 113, 122, 0.6)'
-                    },
-                    'reg-nested': {
-                        label: 'Register Machine (Nested)',
-                        desc: "The value in this register machine grows in a stairstep fashion characteristic of nested, recursive processes.",
-                        values: [0, 1, 2, 2, 3, 4, 5, 5, 6, 6, 7, 8, 9, 9, 10, 11, 11, 12, 13, 14, 14, 15, 15, 16, 17, 18, 18, 19, 20, 20, 21, 22, 23, 23, 24],
-                        color: 'rgba(39, 39, 42, 0.6)'
-                    }
-                },
-                create: function (systemId) {
-                    const sysData = this.data[systemId];
-                    if (this.chart) this.chart.destroy();
-                    this.description.textContent = sysData.desc;
-                    this.chart = new Chart(this.ctx, {
-                        type: 'line',
-                        data: {
-                            labels: Array.from({ length: sysData.values.length }, (_, i) => i),
-                            datasets: [{
-                                label: sysData.label, data: sysData.values,
-                                borderColor: sysData.color.replace('0.6', '1'),
-                                backgroundColor: sysData.color, fill: true, tension: 0.1, pointRadius: 2
-                            }]
-                        },
-                        options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'top' } } }
-                    });
-                }
-            };
-            document.querySelectorAll('.data-btn').forEach(btn => {
-                btn.addEventListener('click', (e) => {
-                    document.querySelectorAll('.data-btn').forEach(b => b.classList.remove('active'));
-                    e.target.classList.add('active');
-                    growth.create(e.target.dataset.system);
-                });
-            });
-            growth.create('tag-complex');
-
-            // --- Lab 4: Universality Concepts ---
-            document.querySelectorAll('.concept-card').forEach(card => {
-                card.addEventListener('click', () => {
-                    const concept = card.dataset.concept;
-                    document.querySelectorAll('.highlight-concept').forEach(el => {
-                        if (el.dataset.concept.includes(concept)) {
-                            el.classList.add('highlighted');
-                            setTimeout(() => el.classList.remove('highlighted'), 2000);
-                        }
-                    });
-                });
-            });
-        });
-    </script>
-</body>
-
-</html>
\ No newline at end of file
diff --git a/demos/chapter3/chapter3-reader.html b/demos/chapter3/chapter3-reader.html
deleted file mode 100644
index 04e6b2c406afb03366fe7a9932fbc15162071a3d..0000000000000000000000000000000000000000
--- a/demos/chapter3/chapter3-reader.html
+++ /dev/null
@@ -1,348 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>The World of Simple Programs: An Interactive Reader</title>
-    <script src="https://cdn.tailwindcss.com"></script>
-    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
-    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
-    <!-- Chosen Palette: Warm Neutrals -->
-    <!-- Application Structure Plan: The application is designed as a single-page, scrollable document with a header and several main content sections. To enhance readability and navigation, each major section is made collapsible. This architecture allows users to focus on one topic at a time, hiding content they are not currently interested in. Interactive demos for each system (cellular automata, mobile automata, etc.) are integrated directly within their respective collapsible sections. This structure was chosen to provide a logical, non-linear exploration path that empowers users to navigate the content at their own pace, making it less overwhelming than a continuous wall of text. -->
-    <!-- Visualization & Content Choices: 
-        - Collapsible Sections: Goal: Improve readability and user control over content visibility. Viz: HTML with JavaScript for toggle functionality. Interaction: Clicking a section header expands/collapses the content. Justification: This is the primary method for making the long-form text content consumable, allowing a summary view and detailed drill-down. Method: Vanilla JS.
-        - Cellular Automata Demo: Goal: Demonstrate the visual output of simple rules and their diversity. Viz: A canvas for drawing the automaton. Interaction: A slider to select a rule number, triggering a redraw of the canvas. Justification: This interactive demo directly supports the chapter's core argument that simple rules lead to varied behaviors. Method: Vanilla JS with HTML Canvas.
-        - Other Systems Demos: Goal: Provide visual examples of other computational systems. Viz: Static canvas renderings. Interaction: Buttons to trigger the drawing of specific, pre-defined complex patterns. Justification: These serve as visual proofs for the "universality" concept without requiring complex, real-time simulation, keeping the app lightweight and responsive. Method: Vanilla JS with HTML Canvas.
-        - Textual Content: Goal: Present core concepts and analysis. Viz: Standard HTML paragraphs and headings. Interaction: None. Justification: Text is the most effective way to convey the detailed findings and conclusions of the chapter.
-    -->
-    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
-    <style>
-        body {
-            font-family: 'Inter', sans-serif;
-            background-color: #FDFBF8;
-            color: #4A4A4A;
-        }
-
-        .section-header {
-            cursor: pointer;
-            user-select: none;
-        }
-
-        .collapse-icon {
-            transition: transform 0.3s ease;
-        }
-
-        .collapsed .collapse-icon {
-            transform: rotate(-90deg);
-        }
-
-        .chart-container {
-            position: relative;
-            width: 100%;
-            max-width: 600px;
-            margin-left: auto;
-            margin-right: auto;
-            height: 300px;
-            max-height: 400px;
-        }
-
-        @media (min-width: 768px) {
-            .chart-container {
-                height: 350px;
-            }
-        }
-
-        .automaton-canvas {
-            border: 1px solid #EADDCD;
-            background-color: #fff;
-        }
-    </style>
-</head>
-
-<body class="p-6 md:p-10">
-
-    <header class="text-center mb-12">
-        <h1 class="text-4xl font-bold text-[#3D352E]">The World of Simple Programs</h1>
-        <p class="mt-4 text-lg text-gray-600">An interactive exploration of Stephen Wolfram's "A New Kind of Science,"
-            Chapter 3.</p>
-    </header>
-
-    <main class="max-w-4xl mx-auto">
-        <section id="search-for-general-features"
-            class="bg-white p-6 rounded-xl shadow-md border border-[#EADDCD] mb-8">
-            <div class="section-header flex justify-between items-center" data-target="content-1">
-                <h2 class="text-2xl font-bold text-[#3D352E]">The Search for General Features</h2>
-                <span class="collapse-icon text-2xl text-gray-400">▼</span>
-            </div>
-            <div id="content-1" class="section-content mt-4">
-                <p class="mb-4">At the beginning of the last chapter we asked the basic question of what simple programs
-                    typically do. And as a first step towards answering this question we looked at several specific
-                    examples of a class of programs known as cellular automata. The basic types of behavior that we
-                    found are illustrated in the pictures on the next page. In the first of these there is pure
-                    repetition, and a very simple pattern is formed. In the second, there are many intricate details,
-                    but at an overall level there is still a very regular nested structure that emerges.</p>
-                <p class="mb-4">In the third picture, however, one no longer sees such regularity, and instead there is
-                    behavior that seems in many respects random. And finally in the fourth picture there is what appears
-                    to be still more complex behavior—with elaborate localized structures being generated that interact
-                    in complex ways.</p>
-                <p class="mb-4">At the outset there was no indication that simple programs could ever produce behavior
-                    so diverse and often complex. But having now seen these examples, the question becomes how typical
-                    they are. Is it only cellular automata with very specific underlying rules that produce such
-                    behavior? Or is it in fact common in all sorts of simple programs?</p>
-                <p class="mb-4">My purpose in this chapter is to answer this question by looking at a wide range of
-                    different kinds of programs. And in a sense my approach is to work like a naturalist—exploring and
-                    studying the various forms that exist in the world of simple programs.</p>
-                <p class="mb-4">I start by considering more general cellular automata, and then I go on to consider a
-                    whole sequence of other kinds of programs—with underlying structures further and further away from
-                    the array of black and white cells in the cellular automata of the previous chapter.</p>
-                <p class="mb-4">And what I discover is that whatever kind of underlying rules one uses, the behavior
-                    that emerges turns out to be remarkably similar to the basic examples that we have already seen in
-                    cellular automata. Throughout the world of simple programs, it seems, there is great universality in
-                    the types of overall behavior that can be produced. And in a sense it is ultimately this that makes
-                    it possible for me to construct the coherent new kind of science that I describe in this book—and to
-                    use it to elucidate a large number of phenomena, independent of the particular details of the
-                    systems in which they occur.</p>
-            </div>
-        </section>
-
-        <section id="more-cellular-automata" class="bg-white p-6 rounded-xl shadow-md border border-[#EADDCD] mb-8">
-            <div class="section-header flex justify-between items-center" data-target="content-2">
-                <h2 class="text-2xl font-bold text-[#3D352E]">More Cellular Automata</h2>
-                <span class="collapse-icon text-2xl text-gray-400">▼</span>
-            </div>
-            <div id="content-2" class="section-content mt-4">
-                <p class="mb-4">The core of the chapter is the discovery that simple rules can lead to immense
-                    complexity. This interactive demo allows you to explore the behavior of any of the 256 "elementary"
-                    cellular automaton rules. See for yourself how a tiny change in the rule can shift behavior from
-                    simple repetition to apparent randomness.</p>
-                <div class="p-4 bg-[#F6F1EB] rounded-lg mb-4">
-                    <label for="rule-selector" class="block text-lg font-medium text-[#3D352E] mb-2">Select a Rule
-                        (0-255):</label>
-                    <div class="flex items-center space-x-4">
-                        <input type="range" id="rule-selector" min="0" max="255" value="30" class="w-full">
-                        <span id="rule-display" class="text-xl font-semibold text-[#3D352E] w-16 text-center">Rule
-                            30</span>
-                    </div>
-                    <div class="flex justify-center mt-4">
-                        <canvas id="main-automaton-canvas" width="601" height="300"
-                            class="automaton-canvas rounded-lg"></canvas>
-                    </div>
-                </div>
-                <p class="mb-4">Repetition and nesting are widespread themes in many cellular automata. But as we saw in
-                    the previous chapter, it is also possible for cellular automata to produce patterns that seem in
-                    many respects random. And out of the 256 rules discussed here, it turns out that 10 yield such
-                    apparent randomness. There are three basic forms, as illustrated on the facing page.</p>
-                <p class="mb-4">Beyond randomness, the last example in the previous chapter was rule 110: a cellular
-                    automaton whose behavior becomes partitioned into a complex mixture of regular and irregular parts.
-                    This particular cellular automaton is essentially unique among the 256 rules considered here: of the
-                    four cases in which such behavior is seen, all are equivalent if one just interchanges the roles of
-                    left and right or black and white.</p>
-            </div>
-        </section>
-
-        <section id="other-systems" class="bg-white p-6 rounded-xl shadow-md border border-[#EADDCD] mb-8">
-            <div class="section-header flex justify-between items-center" data-target="content-3">
-                <h2 class="text-2xl font-bold text-[#3D352E]">Universality in Other Systems</h2>
-                <span class="collapse-icon text-2xl text-gray-400">▼</span>
-            </div>
-            <div id="content-3" class="section-content mt-4">
-                <p class="mb-4">The central discovery of this chapter is that the phenomenon of complexity is not unique
-                    to cellular automata. It emerges in a vast range of other simple programs, from mobile automata to
-                    Turing machines. Below you can see demonstrations of these systems, which despite having entirely
-                    different structures, can exhibit similar complex behaviors.</p>
-                <div class="space-y-6">
-                    <div class="p-4 bg-[#F6F1EB] rounded-lg">
-                        <h3 class="text-xl font-medium text-[#3D352E] mb-2">Mobile Automata</h3>
-                        <p class="text-sm text-gray-600 mb-4">Instead of updating all cells in parallel, a mobile
-                            automaton has a single "active cell." The rule specifies its movement and color change. This
-                            is a crucial test of whether parallel updates are necessary for complexity.</p>
-                        <div class="flex justify-center">
-                            <canvas id="mobile-automaton-canvas" width="400" height="250"
-                                class="automaton-canvas rounded-lg"></canvas>
-                        </div>
-                        <p class="text-center text-sm text-gray-500 mt-2">A complex pattern generated by a mobile
-                            automaton.</p>
-                        <button onclick="drawMobileAutomaton()"
-                            class="mt-4 px-4 py-2 bg-[#CDBBA7] text-[#3D352E] rounded-lg font-medium hover:bg-[#B7A995] transition-colors duration-200">Show
-                            a Complex Example</button>
-                    </div>
-                    <div class="p-4 bg-[#F6F1EB] rounded-lg">
-                        <h3 class="text-xl font-medium text-[#3D352E] mb-2">Turing Machines</h3>
-                        <p class="text-sm text-gray-600 mb-4">The first widely understood theoretical computer program.
-                            It has a "head" that moves along a "tape" of cells. Even with only two states and two
-                            colors, complex behavior emerges.</p>
-                        <div class="flex justify-center">
-                            <canvas id="turing-machine-canvas" width="400" height="250"
-                                class="automaton-canvas rounded-lg"></canvas>
-                        </div>
-                        <p class="text-center text-sm text-gray-500 mt-2">A 4-state, 2-color Turing machine producing a
-                            complex pattern.</p>
-                        <button onclick="drawTuringMachine()"
-                            class="mt-4 px-4 py-2 bg-[#CDBBA7] text-[#3D352E] rounded-lg font-medium hover:bg-[#B7A995] transition-colors duration-200">Show
-                            a Complex Example</button>
-                    </div>
-                    <div class="p-4 bg-[#F6F1EB] rounded-lg">
-                        <h3 class="text-xl font-medium text-[#3D352E] mb-2">Substitution Systems</h3>
-                        <p class="text-sm text-gray-600 mb-4">Unlike the fixed-array systems, these allow the number of
-                            elements to change. An element is replaced by a block of new elements. Neighbor-dependent
-                            rules can lead to chaotic, random-like patterns.</p>
-                        <div class="flex justify-center">
-                            <canvas id="substitution-system-canvas" width="400" height="250"
-                                class="automaton-canvas rounded-lg"></canvas>
-                        </div>
-                        <p class="text-center text-sm text-gray-500 mt-2">A substitution system generating a seemingly
-                            random pattern.</p>
-                        <button onclick="drawSubstitutionSystem()"
-                            class="mt-4 px-4 py-2 bg-[#CDBBA7] text-[#3D352E] rounded-lg font-medium hover:bg-[#B7A995] transition-colors duration-200">Show
-                            a Complex Example</button>
-                    </div>
-                </div>
-            </div>
-        </section>
-
-        <section id="conclusions" class="bg-white p-6 rounded-xl shadow-md border border-[#EADDCD] mb-8">
-            <div class="section-header flex justify-between items-center" data-target="content-4">
-                <h2 class="text-2xl font-bold text-[#3D352E]">Some Conclusions</h2>
-                <span class="collapse-icon text-2xl text-gray-400">▼</span>
-            </div>
-            <div id="content-4" class="section-content mt-4">
-                <p class="mb-4">The exploration of these diverse systems leads to several profound conclusions. The
-                    phenomenon of complexity is quite universal and independent of the specific details of a system. The
-                    threshold for complexity is surprisingly low—even very simple rules can produce behavior of great
-                    complexity. And finally, adding more complexity to the rules does not necessarily yield more complex
-                    behavior.</p>
-                <p class="mb-4">This universality is what makes it possible to construct a coherent new kind of science,
-                    implying that general principles can govern the behavior of a wide range of systems, independent of
-                    their precise details.</p>
-            </div>
-        </section>
-    </main>
-
-    <script>
-        document.addEventListener('DOMContentLoaded', () => {
-            const ruleSelector = document.getElementById('rule-selector');
-            const ruleDisplay = document.getElementById('rule-display');
-            const mainCanvas = document.getElementById('main-automaton-canvas');
-
-            const drawAutomaton = (canvas, ruleNumber, width = canvas.width, height = canvas.height, cellSize = 1) => {
-                const ctx = canvas.getContext('2d');
-                const cells = new Array(width).fill(0);
-                cells[Math.floor(width / 2)] = 1;
-
-                const ruleSet = ruleNumber.toString(2).padStart(8, '0').split('').map(Number).reverse();
-
-                ctx.fillStyle = '#FDFBF8';
-                ctx.fillRect(0, 0, width * cellSize, height * cellSize);
-
-                for (let y = 0; y < height; y++) {
-                    for (let x = 0; x < width; x++) {
-                        if (cells[x] === 1) {
-                            ctx.fillStyle = '#4A4A4A';
-                            ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);
-                        }
-                    }
-
-                    const nextCells = new Array(width).fill(0);
-                    for (let x = 0; x < width; x++) {
-                        const left = cells[(x - 1 + width) % width];
-                        const center = cells[x];
-                        const right = cells[(x + 1) % width];
-                        const index = left * 4 + center * 2 + right;
-                        nextCells[x] = ruleSet[index];
-                    }
-                    cells.splice(0, cells.length, ...nextCells);
-                }
-            };
-
-            const updateMainAutomaton = () => {
-                const rule = parseInt(ruleSelector.value);
-                ruleDisplay.textContent = `Rule ${rule}`;
-                drawAutomaton(mainCanvas, rule);
-            };
-
-            ruleSelector.addEventListener('input', updateMainAutomaton);
-            updateMainAutomaton();
-
-            window.drawMobileAutomaton = () => {
-                const canvas = document.getElementById('mobile-automaton-canvas');
-                const ctx = canvas.getContext('2d');
-                const { width, height } = canvas;
-                ctx.fillStyle = '#FDFBF8';
-                ctx.fillRect(0, 0, width, height);
-                ctx.fillStyle = '#4A4A4A';
-                const pattern = Array.from({ length: 250 }, (_, i) => [Math.random() * 400, i, Math.random() > 0.7 ? 3 : 1, 1]);
-                pattern.forEach(([x, y, w, h]) => {
-                    ctx.fillRect(x, y, w, h);
-                });
-            };
-
-            window.drawTuringMachine = () => {
-                const canvas = document.getElementById('turing-machine-canvas');
-                const ctx = canvas.getContext('2d');
-                const { width, height } = canvas;
-                ctx.fillStyle = '#FDFBF8';
-                ctx.fillRect(0, 0, width, height);
-                ctx.fillStyle = '#4A4A4A';
-                const pattern = Array.from({ length: 250 }, (_, i) => [150 + Math.sin(i * 0.1) * 100 + (Math.random() - 0.5) * 50, i, 2, 1]);
-                pattern.forEach(([x, y, w, h]) => {
-                    ctx.fillRect(x, y, w, h);
-                });
-            };
-
-            window.drawSubstitutionSystem = () => {
-                const canvas = document.getElementById('substitution-system-canvas');
-                const ctx = canvas.getContext('2d');
-                const { width, height } = canvas;
-                ctx.fillStyle = '#FDFBF8';
-                ctx.fillRect(0, 0, width, height);
-                ctx.fillStyle = '#4A4A4A';
-                const pattern = [];
-                let currentY = 0;
-                for (let i = 0; i < 12; i++) {
-                    let x = 0;
-                    while (x < width) {
-                        let w = Math.random() * 30 + 5;
-                        if (Math.random() > 0.4) pattern.push([x, currentY, w, 20]);
-                        x += w + 2;
-                    }
-                    currentY += 22;
-                }
-                pattern.forEach(([x, y, w, h]) => {
-                    ctx.fillRect(x, y, w, h);
-                });
-            };
-
-            document.querySelectorAll('.section-header').forEach(header => {
-                header.addEventListener('click', () => {
-                    const targetId = header.getAttribute('data-target');
-                    const targetContent = document.getElementById(targetId);
-                    const isCollapsed = targetContent.style.maxHeight === '0px' || targetContent.style.maxHeight === '';
-
-                    document.querySelectorAll('.section-content').forEach(content => {
-                        content.style.maxHeight = '0px';
-                        content.parentElement.classList.add('collapsed');
-                    });
-
-                    if (isCollapsed) {
-                        targetContent.style.maxHeight = targetContent.scrollHeight + 'px';
-                        header.parentElement.classList.remove('collapsed');
-                    } else {
-                        header.parentElement.classList.add('collapsed');
-                    }
-                });
-            });
-
-            document.querySelectorAll('.section-content').forEach(content => {
-                content.style.maxHeight = '0';
-                content.style.overflow = 'hidden';
-                content.style.transition = 'max-height 0.5s ease-in-out';
-                content.parentElement.classList.add('collapsed');
-            });
-            document.getElementById('content-1').style.maxHeight = document.getElementById('content-1').scrollHeight + 'px';
-            document.getElementById('content-1').parentElement.classList.remove('collapsed');
-        });
-    </script>
-</body>
-
-</html>
\ No newline at end of file
diff --git a/demos/chapter3/chapter3-universality-gallery.html b/demos/chapter3/chapter3-universality-gallery.html
deleted file mode 100644
index 074f8384f70013e13be65435a219b460bceb4cad..0000000000000000000000000000000000000000
--- a/demos/chapter3/chapter3-universality-gallery.html
+++ /dev/null
@@ -1,435 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Behavior Atlas · Chapter 3 | A New Kind of Science</title>
-    <script src="https://cdn.tailwindcss.com"></script>
-    <style>
-        body {
-            font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, sans-serif;
-            background: radial-gradient(circle at top, rgba(17, 24, 39, 0.9), #020617 55%);
-            color: #f8fafc;
-        }
-
-        .behavior-button {
-            transition: all 0.25s ease;
-        }
-
-        .behavior-button.active {
-            background: linear-gradient(135deg, rgba(245, 158, 11, 0.2), rgba(245, 158, 11, 0.35));
-            border-color: rgba(245, 158, 11, 0.7);
-            color: #fde68a;
-        }
-
-        canvas {
-            background-color: rgba(15, 23, 42, 0.85);
-        }
-
-        .system-card {
-            background: rgba(15, 23, 42, 0.6);
-            border: 1px solid rgba(148, 163, 184, 0.2);
-            border-radius: 1.25rem;
-            padding: 1.75rem;
-            box-shadow: 0 25px 60px rgba(2, 6, 23, 0.45);
-            backdrop-filter: blur(14px);
-        }
-
-        .system-card h2 {
-            letter-spacing: 0.04em;
-        }
-
-        .legend-dot {
-            width: 12px;
-            height: 12px;
-            border-radius: 9999px;
-            display: inline-block;
-        }
-    </style>
-</head>
-
-<body>
-    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
-        <a href="index.html" class="inline-flex items-center text-sm text-slate-300 hover:text-amber-300 transition">
-            ← Back to Chapter 3 demos
-        </a>
-
-        <header class="mt-6">
-            <h1 class="text-3xl sm:text-4xl font-bold text-amber-300 tracking-tight">
-                Behavior Atlas · Universal Patterns in Simple Programs
-            </h1>
-            <p class="mt-4 text-lg text-slate-300 leading-relaxed max-w-3xl">
-                Chapter 3 of <em>A New Kind of Science</em> reveals that simple rules across many models of computation fall into
-                the same four behavioral classes. This gallery lets you switch among those classes and immediately compare how
-                a cellular automaton, a head-based system, and a tag system express the very same theme.
-            </p>
-        </header>
-
-        <div class="mt-8 flex flex-wrap gap-3" id="behavior-buttons">
-            <button class="behavior-button px-4 py-2 rounded-full border border-slate-700 text-sm font-medium text-slate-200"
-                data-behavior="repetition">Class 1 · Repetition</button>
-            <button class="behavior-button px-4 py-2 rounded-full border border-slate-700 text-sm font-medium text-slate-200"
-                data-behavior="nesting">Class 2 · Nesting</button>
-            <button class="behavior-button px-4 py-2 rounded-full border border-slate-700 text-sm font-medium text-slate-200"
-                data-behavior="randomness">Class 3 · Randomness</button>
-            <button class="behavior-button px-4 py-2 rounded-full border border-slate-700 text-sm font-medium text-slate-200"
-                data-behavior="complexity">Class 4 · Complexity</button>
-        </div>
-
-        <p id="behavior-summary" class="mt-6 text-base sm:text-lg text-slate-200 max-w-4xl leading-relaxed"></p>
-
-        <div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6" id="systems-grid">
-            <div class="system-card">
-                <div class="flex items-baseline justify-between mb-4">
-                    <h2 class="text-xl font-semibold text-amber-200">Cellular Automaton</h2>
-                    <span class="text-xs uppercase tracking-widest text-slate-400">parallel update</span>
-                </div>
-                <canvas id="caCanvas" width="600" height="360" class="w-full rounded-xl border border-slate-800"></canvas>
-                <p id="caCaption" class="mt-4 text-sm text-slate-300 leading-relaxed"></p>
-            </div>
-
-            <div class="system-card">
-                <div class="flex items-baseline justify-between mb-4">
-                    <h2 class="text-xl font-semibold text-amber-200">Turing Machine</h2>
-                    <span class="text-xs uppercase tracking-widest text-slate-400">single head</span>
-                </div>
-                <canvas id="tmCanvas" width="600" height="360" class="w-full rounded-xl border border-slate-800"></canvas>
-                <p id="tmCaption" class="mt-4 text-sm text-slate-300 leading-relaxed"></p>
-            </div>
-
-            <div class="system-card">
-                <div class="flex items-baseline justify-between mb-4">
-                    <h2 class="text-xl font-semibold text-amber-200">Tag System</h2>
-                    <span class="text-xs uppercase tracking-widest text-slate-400">growth dynamics</span>
-                </div>
-                <canvas id="tagCanvas" width="600" height="360" class="w-full rounded-xl border border-slate-800"></canvas>
-                <div id="tagLegend" class="mt-4 text-xs text-slate-400 space-y-1"></div>
-                <p id="tagCaption" class="mt-4 text-sm text-slate-300 leading-relaxed"></p>
-            </div>
-        </div>
-
-        <section class="mt-12 bg-slate-900/50 border border-slate-800 rounded-2xl p-6">
-            <h2 class="text-lg font-semibold text-amber-200">How to read this gallery</h2>
-            <p class="mt-3 text-slate-300 leading-relaxed">
-                Each canvas shows 120–200 steps of evolution. Rows correspond to successive steps, read from top to bottom. The
-                cellular automaton colours mark active cells; the Turing machine visualisation tracks tape colours as the head
-                sweeps; the tag system paints the evolving string after each deletion-and-append cycle. Switching classes makes it
-                immediately obvious that—despite their very different mechanics—their long-term behaviour falls into the same
-                categories Wolfram catalogues throughout Chapter 3.
-            </p>
-        </section>
-    </div>
-
-    <script>
-        const behaviorData = {
-            repetition: {
-                summary: "Class 1 systems quickly settle into uniform or strictly periodic states. After a short transient, nothing surprising happens—yet the same stillness appears in parallel, sequential, and growth-based rules.",
-                ca: {
-                    rule: 250,
-                    steps: 140,
-                    width: 180,
-                    caption: "Elementary Rule 250 rapidly becomes a uniform block. Starting from a single active cell, the pattern freezes into a repeating stripe, the hallmark of a Class 1 cellular automaton."
-                },
-                tm: {
-                    startState: 1,
-                    steps: 160,
-                    transitions: {
-                        "1,0": { next: 1, write: 1, move: 1 },
-                        "1,1": { next: 1, write: 1, move: 1 }
-                    },
-                    palette: {
-                        0: "#0f172a",
-                        1: "#fbbf24"
-                    },
-                    caption: "A single-state Turing machine that always writes 1 and moves right. It fills the tape with one colour and never revisits earlier cells—an archetypal repetitive outcome."
-                },
-                tag: {
-                    deletion: 1,
-                    initial: "ABC",
-                    rules: { A: "B", B: "C", C: "A" },
-                    steps: 120,
-                    palette: {
-                        A: "#38bdf8",
-                        B: "#f87171",
-                        C: "#22c55e"
-                    },
-                    caption: "A cyclic 1-tag system that simply rotates symbols A→B→C. The sequence loops forever with period three, mirroring the frozen behaviour seen in the other models."
-                }
-            },
-            nesting: {
-                summary: "Class 2 behaviour builds regular, self-similar scaffolding. Even when the underlying rules differ dramatically, nested structures persist across models.",
-                ca: {
-                    rule: 90,
-                    steps: 140,
-                    width: 180,
-                    caption: "Rule 90 produces the Sierpiński triangle from a single seed, displaying the crisp nested structure that defines Class 2 behaviour."
-                },
-                tm: {
-                    startState: 1,
-                    steps: 200,
-                    transitions: {
-                        "1,0": { next: 2, write: 1, move: 1 },
-                        "1,1": { next: 2, write: 0, move: -1 },
-                        "2,0": { next: 1, write: 1, move: -1 },
-                        "2,1": { next: 1, write: 1, move: 1 }
-                    },
-                    palette: {
-                        0: "#0f172a",
-                        1: "#22d3ee"
-                    },
-                    caption: "A 2-state Turing machine from NKS that sweeps left and right in a perfectly regular rhythm, generating a nested chevron motif on its tape."
-                },
-                tag: {
-                    deletion: 2,
-                    initial: "AAB",
-                    rules: { A: "AB", B: "AA" },
-                    steps: 120,
-                    palette: {
-                        A: "#a855f7",
-                        B: "#f97316"
-                    },
-                    caption: "This 2-tag system alternates between short repeated blocks. The deterministic cycle of AAB → BAB → BAA → AAA gives a visual stair-step reminiscent of nested substitution systems."
-                }
-            },
-            randomness: {
-                summary: "Class 3 systems generate apparent randomness. Deterministic rules still govern the evolution, yet the output looks statistically noisy and defies short descriptions.",
-                ca: {
-                    rule: 30,
-                    steps: 140,
-                    width: 180,
-                    caption: "Rule 30 is Wolfram's canonical random-looking automaton. Even with a single black cell seed, the pattern becomes speckled noise."
-                },
-                tm: {
-                    startState: 1,
-                    steps: 220,
-                    transitions: {
-                        "1,0": { next: 2, write: 1, move: 1 },
-                        "1,1": { next: 2, write: 1, move: -1 },
-                        "2,0": { next: 3, write: 0, move: -1 },
-                        "2,1": { next: 4, write: 1, move: 1 },
-                        "3,0": { next: 4, write: 0, move: -1 },
-                        "3,1": { next: 1, write: 0, move: -1 },
-                        "4,0": { next: 1, write: 1, move: 1 },
-                        "4,1": { next: 3, write: 0, move: 1 }
-                    },
-                    palette: {
-                        0: "#0f172a",
-                        1: "#f97316"
-                    },
-                    caption: "A 4-state, 2-colour Turing machine whose head thrashes unpredictably. The tape accumulates a turbulent band of orange cells—the sequential analogue of Rule 30's randomness."
-                },
-                tag: {
-                    deletion: 2,
-                    initial: "AB",
-                    rules: { A: "BA", B: "ABB" },
-                    steps: 120,
-                    palette: {
-                        A: "#0ea5e9",
-                        B: "#ef4444"
-                    },
-                    caption: "A simple 2-tag system that repeatedly rearranges and appends symbols in a way that never repeats. Length and composition fluctuate erratically, giving a noisy horizontal texture."
-                }
-            },
-            complexity: {
-                summary: "Class 4 mixes pockets of order with bursts of randomness. Localised structures persist and interact, suggesting computational irreducibility. Chapter 3 highlights how this rich behaviour appears in many unrelated rules.",
-                ca: {
-                    rule: 110,
-                    steps: 160,
-                    width: 180,
-                    caption: "Rule 110, later proven Turing complete, shows mobile structures colliding amid irregular background texture—classic Class 4 complexity."
-                },
-                tm: {
-                    startState: 1,
-                    steps: 220,
-                    transitions: {
-                        "1,0": { next: 3, write: 1, move: -1 },
-                        "1,1": { next: 2, write: 0, move: 1 },
-                        "2,0": { next: 1, write: 1, move: 1 },
-                        "2,1": { next: 3, write: 1, move: 1 },
-                        "3,0": { next: 2, write: 1, move: 1 },
-                        "3,1": { next: 1, write: 0, move: -1 }
-                    },
-                    palette: {
-                        0: "#0f172a",
-                        1: "#facc15"
-                    },
-                    caption: "Wolfram's machine #3024 (3 states, 2 colours) develops moving fronts and recurring motifs without ever stabilising—mirroring the coexistence of order and surprise in Rule 110."
-                },
-                tag: {
-                    deletion: 2,
-                    initial: "AAA",
-                    rules: { A: "BC", B: "A", C: "AAB" },
-                    steps: 140,
-                    palette: {
-                        A: "#fbbf24",
-                        B: "#38bdf8",
-                        C: "#f472b6"
-                    },
-                    caption: "The classic Wolfram 2-tag system #925 spawns bursts of new symbols and recurrent motifs. Growth is irregular yet structured, echoing the intricate Class 4 behaviour seen in the other models."
-                }
-            }
-        };
-
-        const behaviorButtons = document.querySelectorAll('.behavior-button');
-        const behaviorSummary = document.getElementById('behavior-summary');
-        const caCanvas = document.getElementById('caCanvas');
-        const tmCanvas = document.getElementById('tmCanvas');
-        const tagCanvas = document.getElementById('tagCanvas');
-        const caCaption = document.getElementById('caCaption');
-        const tmCaption = document.getElementById('tmCaption');
-        const tagCaption = document.getElementById('tagCaption');
-        const tagLegend = document.getElementById('tagLegend');
-
-        function renderCA(canvas, config) {
-            const ctx = canvas.getContext('2d');
-            const columns = config.width || 180;
-            const rows = config.steps || 140;
-            const cellSize = Math.max(1, Math.floor(canvas.width / columns));
-            const rowSize = Math.max(1, Math.floor(canvas.height / rows));
-
-            ctx.fillStyle = '#020617';
-            ctx.fillRect(0, 0, canvas.width, canvas.height);
-
-            const ruleBinary = config.rule.toString(2).padStart(8, '0').split('').reverse().map(Number);
-            let current = new Array(columns).fill(0);
-            current[Math.floor(columns / 2)] = 1;
-
-            ctx.fillStyle = '#facc15';
-            for (let row = 0; row < rows; row++) {
-                for (let col = 0; col < columns; col++) {
-                    if (current[col] === 1) {
-                        ctx.fillRect(col * cellSize, row * rowSize, cellSize, rowSize);
-                    }
-                }
-
-                const next = new Array(columns).fill(0);
-                for (let col = 0; col < columns; col++) {
-                    const left = current[col - 1] || 0;
-                    const centre = current[col];
-                    const right = current[col + 1] || 0;
-                    const index = (left << 2) | (centre << 1) | right;
-                    next[col] = ruleBinary[index];
-                }
-                current = next;
-            }
-        }
-
-        function renderTuring(canvas, config) {
-            const ctx = canvas.getContext('2d');
-            ctx.fillStyle = '#020617';
-            ctx.fillRect(0, 0, canvas.width, canvas.height);
-
-            const steps = config.steps || 200;
-            let state = config.startState || 1;
-            let head = 0;
-            const tape = new Map();
-            const history = [];
-            let minPos = 0;
-            let maxPos = 0;
-
-            for (let step = 0; step < steps; step++) {
-                const currentVal = tape.get(head) || 0;
-                const transition = config.transitions[`${state},${currentVal}`];
-                if (!transition) break;
-
-                tape.set(head, transition.write);
-                history.push(new Map(tape));
-
-                if (head < minPos) minPos = head;
-                if (head > maxPos) maxPos = head;
-
-                head += transition.move;
-                state = transition.next;
-
-                if (head < minPos) minPos = head;
-                if (head > maxPos) maxPos = head;
-            }
-
-            const width = Math.max(1, maxPos - minPos + 1);
-            if (history.length === 0) {
-                return;
-            }
-
-            const cellSize = Math.max(1, Math.floor(canvas.width / width));
-            const rowHeight = Math.max(1, Math.floor(canvas.height / history.length));
-
-            for (let row = 0; row < history.length; row++) {
-                const snapshot = history[row];
-                const y = row * rowHeight;
-                for (let x = 0; x < width; x++) {
-                    const pos = x + minPos;
-                    const value = snapshot.get(pos) || 0;
-                    ctx.fillStyle = config.palette[value] || '#1e293b';
-                    ctx.fillRect(x * cellSize, y, cellSize, rowHeight);
-                }
-            }
-        }
-
-        function renderTag(canvas, config) {
-            const ctx = canvas.getContext('2d');
-            ctx.fillStyle = '#020617';
-            ctx.fillRect(0, 0, canvas.width, canvas.height);
-
-            let current = config.initial.split('');
-            const history = [];
-            let maxLen = current.length;
-            const steps = config.steps || 120;
-
-            for (let step = 0; step < steps; step++) {
-                history.push(current.join(''));
-                if (current.length === 0) break;
-                maxLen = Math.max(maxLen, current.length);
-
-                const symbol = current[0];
-                const addition = (config.rules[symbol] || '').split('');
-                current = current.slice(config.deletion).concat(addition);
-            }
-
-            const cellSize = Math.max(1, Math.floor(canvas.width / Math.max(1, maxLen)));
-            const rowHeight = Math.max(1, Math.floor(canvas.height / Math.max(1, history.length)));
-
-            for (let row = 0; row < history.length; row++) {
-                const str = history[row];
-                const y = row * rowHeight;
-                for (let col = 0; col < str.length; col++) {
-                    const symbol = str[col];
-                    ctx.fillStyle = config.palette[symbol] || '#64748b';
-                    ctx.fillRect(col * cellSize, y, cellSize, rowHeight);
-                }
-            }
-
-            tagLegend.innerHTML = '';
-            Object.entries(config.palette).forEach(([symbol, colour]) => {
-                const item = document.createElement('div');
-                item.innerHTML = `<span class="legend-dot" style="background:${colour}"></span><span class="ml-2">${symbol}</span>`;
-                tagLegend.appendChild(item);
-            });
-        }
-
-        function setBehavior(key) {
-            const data = behaviorData[key];
-            if (!data) return;
-
-            behaviorButtons.forEach(btn => btn.classList.toggle('active', btn.dataset.behavior === key));
-            behaviorSummary.textContent = data.summary;
-
-            renderCA(caCanvas, data.ca);
-            caCaption.textContent = data.ca.caption;
-
-            renderTuring(tmCanvas, data.tm);
-            tmCaption.textContent = data.tm.caption;
-
-            renderTag(tagCanvas, data.tag);
-            tagCaption.textContent = data.tag.caption;
-        }
-
-        behaviorButtons.forEach(btn => {
-            btn.addEventListener('click', () => setBehavior(btn.dataset.behavior));
-        });
-
-        setBehavior('complexity');
-    </script>
-</body>
-
-</html>
diff --git a/demos/chapter3/index.html b/demos/chapter3/index.html
index f5d263c94a1d6e964ef34500bd92b6f5919a1361..894dbf92fb94ecc5a43d4a5f4d048feef2a9cf56 100644
--- a/demos/chapter3/index.html
+++ b/demos/chapter3/index.html
@@ -1,273 +1,180 @@
 <!DOCTYPE html>
-<html lang="zh-CN">
-
+<html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>第3章演示合集 | 一种新科学</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            line-height: 1.6;
-            color: #e0e0e0;
-            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%);
-            min-height: 100vh;
-            padding: 0;
-        }
-
-        .container {
-            max-width: 1200px;
-            margin: 0 auto;
-            padding: 2rem;
-        }
-
-        .back-link {
-            display: inline-block;
-            margin-bottom: 2rem;
-            padding: 0.5rem 1rem;
-            color: #ffd700;
-            text-decoration: none;
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            background: rgba(255, 255, 255, 0.05);
-            transition: all 0.3s ease;
-        }
-
-        .back-link:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: #ffd700;
-            transform: translateY(-1px);
-        }
-
-        .header {
-            text-align: center;
-            margin-bottom: 3rem;
-            padding: 2rem;
-            border: 1px solid rgba(255, 215, 0, 0.25);
-            border-radius: 12px;
-            background: rgba(255, 255, 255, 0.04);
-        }
-
-        .header h1 {
-            margin: 0 0 1rem;
-            color: #ffd700;
-            font-weight: 700;
-            font-size: 2.4rem;
-        }
-
-        .header p {
-            margin: 0;
-            color: #b8b8b8;
-            font-size: 1.05rem;
-        }
-
-        .category-section {
-            margin-bottom: 2.5rem;
-        }
-
-        .category-title {
-            color: #ffd700;
-            font-size: 1.5rem;
-            font-weight: 600;
-            margin-bottom: 1rem;
-            padding-bottom: 0.5rem;
-            border-bottom: 2px solid rgba(255, 215, 0, 0.3);
-        }
-
-        .demo-grid {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
-            gap: 1.5rem;
-        }
-
-        .demo-card {
-            background: rgba(255, 255, 255, 0.04);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            border-radius: 12px;
-            padding: 1.5rem;
-            transition: all 0.3s ease;
-            display: flex;
-            flex-direction: column;
-            gap: 0.75rem;
-        }
-
-        .demo-card:hover {
-            border-color: rgba(255, 215, 0, 0.6);
-            background: rgba(255, 255, 255, 0.08);
-            transform: translateY(-2px);
-            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
-        }
-
-        .demo-title {
-            color: #ffd700;
-            font-size: 1.2rem;
-            font-weight: 600;
-        }
-
-        .demo-description {
-            color: #c8c8c8;
-            font-size: 0.95rem;
-            flex: 1 1 auto;
-        }
-
-        .demo-link {
-            display: inline-flex;
-            align-items: center;
-            gap: 0.4rem;
-            padding: 0.5rem 1rem;
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.15), rgba(255, 215, 0, 0.25));
-            color: #f7e49a;
-            text-decoration: none;
-            border: 1px solid rgba(255, 215, 0, 0.35);
-            border-radius: 6px;
-            font-weight: 600;
-            transition: all 0.3s ease;
-        }
-
-        .demo-link:hover {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.25), rgba(255, 215, 0, 0.35));
-            transform: translateY(-1px);
-        }
-
-        .footer {
-            text-align: center;
-            margin-top: 3rem;
-            padding: 1.5rem;
-            border-top: 1px solid rgba(255, 215, 0, 0.2);
-            color: #888;
-        }
-
-        @media (max-width: 768px) {
-            .container {
-                padding: 1rem;
-            }
-
-            .header h1 {
-                font-size: 2rem;
-            }
-
-            .demo-grid {
-                grid-template-columns: 1fr;
-                gap: 1rem;
-            }
-
-            .demo-card {
-                padding: 1.25rem;
-            }
-        }
-    </style>
+  <meta charset="utf-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <title>NKS · Chapter 3 Demonstrations</title>
+  <style>
+    :root {
+      color-scheme: light;
+      font-family: "Helvetica Neue", Arial, system-ui, sans-serif;
+    }
+    body {
+      margin: 24px;
+      background: #fdfdfb;
+      color: #1f1b14;
+      max-width: 1100px;
+    }
+    a {
+      color: inherit;
+    }
+    .back-link {
+      display: inline-flex;
+      align-items: center;
+      gap: 0.4rem;
+      padding: 0.4rem 0.65rem;
+      border-radius: 6px;
+      border: 1px solid #d6d2c4;
+      background: #fffef9;
+      text-decoration: none;
+      color: #655f52;
+      margin-bottom: 1.5rem;
+    }
+    .back-link:hover {
+      background: #f3efe2;
+    }
+    header {
+      margin-bottom: 2rem;
+    }
+    h1 {
+      font-size: 2rem;
+      margin-bottom: 0.6rem;
+    }
+    p.lead {
+      font-size: 1.05rem;
+      line-height: 1.55;
+      margin: 0;
+    }
+    main {
+      display: flex;
+      flex-direction: column;
+      gap: 2.4rem;
+    }
+    section h2 {
+      font-size: 1.4rem;
+      margin-bottom: 1rem;
+      color: #4f4737;
+    }
+    .card-grid {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
+      gap: 1.2rem;
+    }
+    article.card {
+      background: #ffffff;
+      border: 1px solid #d8d2c6;
+      border-radius: 10px;
+      padding: 1.1rem 1.2rem;
+      box-shadow: 0 4px 12px rgba(31, 27, 20, 0.05);
+      display: flex;
+      flex-direction: column;
+      gap: 0.75rem;
+    }
+    article.card h3 {
+      font-size: 1.15rem;
+      margin: 0;
+      color: #302a1f;
+    }
+    article.card p {
+      margin: 0;
+      font-size: 0.95rem;
+      line-height: 1.45;
+      color: #5d574a;
+      flex: 1 1 auto;
+    }
+    article.card a {
+      align-self: flex-start;
+      padding: 0.4rem 0.75rem;
+      border-radius: 6px;
+      border: 1px solid #cbbd9d;
+      background: #d7c698;
+      color: #2f291e;
+      text-decoration: none;
+      font-weight: 600;
+    }
+    article.card a:hover {
+      background: #e6d6a8;
+    }
+    footer {
+      margin-top: 2.4rem;
+      font-size: 0.85rem;
+      color: #655f52;
+    }
+    @media (max-width: 640px) {
+      body { margin: 16px; }
+      .card-grid { grid-template-columns: 1fr; }
+    }
+  </style>
 </head>
-
 <body>
-    <div class="container">
-        <a href="/index.html" class="back-link">← 返回演示总览</a>
-
-        <div class="header">
-            <h1>第3章：简单程序的世界 · 演示合集</h1>
-            <p>汇总第三章涉及的系统演示，涵盖多色元胞自动机、移动自动机、替换与标签系统以及章节辅助工具。</p>
-        </div>
-
-        <div class="category-section">
-            <h2 class="category-title">细胞自动机</h2>
-            <div class="demo-grid">
-                <div class="demo-card">
-                    <h3 class="demo-title">三色元胞自动机探索器</h3>
-                    <p class="demo-description">交互式探索三色元胞自动机，观察不同规则下的复杂纹理、嵌套结构与随机行为。</p>
-                    <a href="three-color-ca-demo.html" class="demo-link" target="_blank" rel="noopener">立即打开 →</a>
-                </div>
-                <div class="demo-card">
-                    <h3 class="demo-title">三色元胞自动机（独立版）</h3>
-                    <p class="demo-description">性能优化的独立版本，适合在移动设备或离线环境中体验三色元胞自动机。</p>
-                    <a href="three-color-ca-demo-standalone.html" class="demo-link" target="_blank" rel="noopener">立即打开
-                        →</a>
-                </div>
-                <div class="demo-card">
-                    <h3 class="demo-title">移动自动机演示</h3>
-                    <p class="demo-description">展示移动自动机的局部更新机制，感受并行度变化对复杂性出现频率的影响。</p>
-                    <a href="mobile-automata-demo.html" class="demo-link" target="_blank" rel="noopener">立即打开 →</a>
-                </div>
-            </div>
-        </div>
-
-        <div class="category-section">
-            <h2 class="category-title">计算模型</h2>
-            <div class="demo-grid">
-                <div class="demo-card">
-                    <h3 class="demo-title">图灵机模拟器</h3>
-                    <p class="demo-description">交互式图灵机模拟器，支持多状态程序与逐步执行，直观理解复杂行为的阈值。</p>
-                    <a href="turing-machine-demo.html" class="demo-link" target="_blank" rel="noopener">立即打开 →</a>
-                </div>
-                <div class="demo-card">
-                    <h3 class="demo-title">寄存器机演示</h3>
-                    <p class="demo-description">使用最简指令集模拟 CPU 级寄存器机，体验指令数量达到阈值后出现的复杂行为。</p>
-                    <a href="register-machine-demo.html" class="demo-link" target="_blank" rel="noopener">立即打开 →</a>
-                </div>
-            </div>
-        </div>
-
-        <div class="category-section">
-            <h2 class="category-title">替换与标签系统</h2>
-            <div class="demo-grid">
-                <div class="demo-card">
-                    <h3 class="demo-title">替换系统演示</h3>
-                    <p class="demo-description">观察近邻独立替换规则带来的嵌套分形，并探索允许创造与毁灭后的随机扩散。</p>
-                    <a href="substitution-system-demo.html" class="demo-link" target="_blank" rel="noopener">立即打开 →</a>
-                </div>
-                <div class="demo-card">
-                    <h3 class="demo-title">顺序替换系统</h3>
-                    <p class="demo-description">模拟“查找-替换”式的顺序规则，体验字符串在局部修改下如何涌现复杂模式。</p>
-                    <a href="sequential-substitution-demo.html" class="demo-link" target="_blank" rel="noopener">立即打开
-                        →</a>
-                </div>
-                <div class="demo-card">
-                    <h3 class="demo-title">标签系统探索器</h3>
-                    <p class="demo-description">交互探索标签系统的删除与附加规则，直观观察序列演化的规律与不可预测性。</p>
-                    <a href="tag-system-demo.html" class="demo-link" target="_blank" rel="noopener">立即打开 →</a>
-                </div>
-                <div class="demo-card">
-                    <h3 class="demo-title">NKS 风格标签系统</h3>
-                    <p class="demo-description">仿照《一种新科学》图示的标签系统演示，配备可视化演化历史与详细步骤记录。</p>
-                    <a href="tag-system-nks-demo.html" class="demo-link" target="_blank" rel="noopener">立即打开 →</a>
-                </div>
-            </div>
-        </div>
-
-        <div class="category-section">
-            <h2 class="category-title">章节辅助工具</h2>
-            <div class="demo-grid">
-                <div class="demo-card">
-                    <h3 class="demo-title">行为全景图</h3>
-                    <p class="demo-description">通过四类行为并排对比元胞自动机、图灵机与标签系统，直观展示第三章强调的“简单规则共享同样复杂性”这一核心结论。</p>
-                    <a href="chapter3-universality-gallery.html" class="demo-link" target="_blank" rel="noopener">立即打开 →</a>
-                </div>
-                <div class="demo-card">
-                    <h3 class="demo-title">第3章交互式读者</h3>
-                    <p class="demo-description">伴随章节文本的交互式略读器，整合动画、图像与关键概念的快速复习。</p>
-                    <a href="chapter3-interactive.html" class="demo-link" target="_blank" rel="noopener">立即打开 →</a>
-                </div>
-                <div class="demo-card">
-                    <h3 class="demo-title">第3章实验室</h3>
-                    <p class="demo-description">整合章节中的多个实验，提供统一的实验室界面，便于集中探索。</p>
-                    <a href="chapter3-lab.html" class="demo-link" target="_blank" rel="noopener">立即打开 →</a>
-                </div>
-                <div class="demo-card">
-                    <h3 class="demo-title">第3章阅读器</h3>
-                    <p class="demo-description">章节内容的可视化阅读界面，集中展示要点与配图，适合课堂或演示使用。</p>
-                    <a href="chapter3-reader.html" class="demo-link" target="_blank" rel="noopener">立即打开 →</a>
-                </div>
-            </div>
-        </div>
-
-        <div class="footer">
-            <p>以上演示均为第三章“简单程序的世界”所涉及的核心系统，帮助你快速复现书中的关键实验。</p>
-        </div>
-    </div>
+  <a class="back-link" href="/index.html" rel="noopener">← Back to all demos</a>
+  <header>
+    <h1>Chapter 3 Demonstrations</h1>
+    <p class="lead">Every interactive experiment from Chapter 3 of <em>A New Kind of Science</em>, rebuilt in lightweight HTML so you can reproduce Wolfram's results without proprietary plugins.</p>
+  </header>
+
+  <main>
+    <section>
+      <h2>Cellular automata</h2>
+      <div class="card-grid">
+        <article class="card">
+          <h3>Three-Color Totalistic CA</h3>
+          <p>Runs the official Wolfram demo for three-colour totalistic rules (pages 66–69), complete with preset rules such as 777, 600, and 924 and a lookup-table display.</p>
+          <a href="three-color-ca-demo.html" target="_blank" rel="noopener">Launch demo</a>
+        </article>
+        <article class="card">
+          <h3>Three-Color CA (Standalone)</h3>
+          <p>A self-contained copy of the same totalistic automaton explorer. Bundle it offline or embed it without additional assets.</p>
+          <a href="three-color-ca-demo-standalone.html" target="_blank" rel="noopener">Launch demo</a>
+        </article>
+        <article class="card">
+          <h3>Mobile Automata</h3>
+          <p>Simulates Wolfram's head-based mobile automata from pages 72–75, including presets that match the simple, nested, and irregular behaviours discussed in the book.</p>
+          <a href="mobile-automata-demo.html" target="_blank" rel="noopener">Launch demo</a>
+        </article>
+      </div>
+    </section>
+
+    <section>
+      <h2>Symbolic substitution systems</h2>
+      <div class="card-grid">
+        <article class="card">
+          <h3>Parallel Substitution</h3>
+          <p>Recreates the page 82–86 substitution experiments: all symbols are replaced simultaneously using rules such as the Fibonacci and Cantor systems.</p>
+          <a href="substitution-system-demo.html" target="_blank" rel="noopener">Launch demo</a>
+        </article>
+        <article class="card">
+          <h3>Sequential Substitution</h3>
+          <p>Applies ordered rewrite rules to the left-most match, matching the step-by-step demonstrations from pages 88–89.</p>
+          <a href="sequential-substitution-demo.html" target="_blank" rel="noopener">Launch demo</a>
+        </article>
+        <article class="card">
+          <h3>Tag Systems</h3>
+          <p>Implements deletion-number tag systems (page 94), showing the removed block, appended string, and resulting word at every step.</p>
+          <a href="tag-system-demo.html" target="_blank" rel="noopener">Launch demo</a>
+        </article>
+      </div>
+    </section>
+
+    <section>
+      <h2>Universal computation</h2>
+      <div class="card-grid">
+        <article class="card">
+          <h3>Turing Machines</h3>
+          <p>Trace Wolfram's small Turing machines, including the famous #3024 and universal 2-state, 3-symbol machine, with a tabular history view.</p>
+          <a href="turing-machine-demo.html" target="_blank" rel="noopener">Launch demo</a>
+        </article>
+        <article class="card">
+          <h3>Register Machines</h3>
+          <p>Run two-instruction register-machine programs as presented in Chapter 3, with presets for simple loops and addition routines.</p>
+          <a href="register-machine-demo.html" target="_blank" rel="noopener">Launch demo</a>
+        </article>
+      </div>
+    </section>
+  </main>
+
+  <footer>
+    These recreations follow the logic and presets of the original Mathematica demonstrations that accompanied Chapter 3 of <em>NKS</em>.
+  </footer>
 </body>
-
-</html>
\ No newline at end of file
+</html>
diff --git a/demos/chapter3/mobile-automata-demo.html b/demos/chapter3/mobile-automata-demo.html
index 03c9e0183d690cc1146a64d95f5dc6126351e56e..74cd728e9267e1c6984493a49c2a16c7e001b229 100644
--- a/demos/chapter3/mobile-automata-demo.html
+++ b/demos/chapter3/mobile-automata-demo.html
@@ -1,1055 +1,359 @@
 <!DOCTYPE html>
-<html lang="zh-CN">
-
+<html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>移动自动机探索器 - 交互式移动细胞实验</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            line-height: 1.6;
-            color: #e0e0e0;
-            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
-            min-height: 100vh;
-            padding: 0;
-        }
-
-        .container {
-            width: 100vw;
-            min-height: 100vh;
-            margin: 0;
-            background: rgba(26, 26, 26, 0.8);
-            backdrop-filter: blur(10px);
-            overflow: hidden;
-        }
-
-        .header {
-            background: linear-gradient(135deg, #ffd700, #ffb300);
-            color: #1a1a1a;
-            padding: 2rem;
-            text-align: center;
-        }
-
-        .header h1 {
-            font-size: 2.5rem;
-            font-weight: 700;
-            margin-bottom: 0.5rem;
-        }
-
-        .header p {
-            font-size: 1.1rem;
-            opacity: 0.8;
-        }
-
-        .main-content {
-            display: grid;
-            grid-template-columns: 400px 1fr;
-            gap: 0;
-            min-height: calc(100vh - 120px);
-        }
-
-        .controls-panel {
-            background: rgba(40, 40, 40, 0.9);
-            padding: 2rem;
-            border-right: 1px solid rgba(255, 215, 0, 0.2);
-            max-height: calc(100vh - 200px);
-            overflow-y: auto;
-        }
-
-        .canvas-area {
-            padding: 1.5rem;
-            display: flex;
-            flex-direction: column;
-            align-items: center;
-            background: rgba(20, 20, 20, 0.5);
-            overflow: auto;
-        }
-
-        .section-title {
-            color: #ffd700;
-            font-size: 1.3rem;
-            font-weight: 600;
-            margin: 1.5rem 0 1rem 0;
-            padding-bottom: 0.5rem;
-            border-bottom: 2px solid rgba(255, 215, 0, 0.3);
-        }
-
-        .section-title:first-of-type {
-            margin-top: 0;
-        }
-
-        /* Rule Definition Grid */
-        .rule-grid {
-            display: grid;
-            grid-template-columns: repeat(2, 1fr);
-            gap: 8px;
-            margin: 1rem 0;
-        }
-
-        .rule-cell {
-            background: rgba(255, 255, 255, 0.1);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            padding: 12px;
-            text-align: center;
-            transition: all 0.3s ease;
-        }
-
-        .rule-cell:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .rule-condition {
-            font-family: 'Courier New', monospace;
-            font-size: 0.9rem;
-            margin-bottom: 8px;
-            color: rgba(255, 255, 255, 0.8);
-        }
-
-        .rule-actions {
-            display: flex;
-            justify-content: center;
-            gap: 4px;
-            flex-wrap: wrap;
-        }
-
-        .rule-action {
-            background: rgba(255, 215, 0, 0.2);
-            border: 1px solid rgba(255, 215, 0, 0.5);
-            border-radius: 4px;
-            padding: 4px 8px;
-            font-size: 0.8rem;
-            font-family: 'Courier New', monospace;
-            cursor: pointer;
-            transition: all 0.3s ease;
-            color: #ffd700;
-        }
-
-        .rule-action:hover {
-            background: rgba(255, 215, 0, 0.3);
-            transform: scale(1.05);
-        }
-
-        .rule-action.active {
-            background: #ffd700;
-            color: #1a1a1a;
-        }
-
-        /* Preset Rules */
-        .preset-rules {
-            display: grid;
-            grid-template-columns: repeat(2, 1fr);
-            gap: 8px;
-            margin: 1rem 0;
-        }
-
-        .preset-rule {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            padding: 10px;
-            text-align: center;
-            cursor: pointer;
-            transition: all 0.3s ease;
-            font-size: 0.9rem;
-        }
-
-        .preset-rule:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .preset-rule.active {
-            background: rgba(255, 215, 0, 0.2);
-            border-color: #ffd700;
-        }
-
-        .preset-name {
-            font-weight: bold;
-            color: #ffd700;
-            font-size: 1rem;
-        }
-
-        .preset-description {
-            color: rgba(255, 255, 255, 0.7);
-            font-size: 0.8rem;
-            margin-top: 4px;
-        }
-
-        /* Control Buttons and Sliders */
-        .control-group {
-            margin: 1rem 0;
-        }
-
-        .control-label {
-            display: block;
-            color: rgba(255, 215, 0, 0.8);
-            font-size: 0.9rem;
-            font-weight: 500;
-            margin-bottom: 8px;
-        }
-
-        .control-row {
-            display: flex;
-            gap: 8px;
-            align-items: center;
-            margin: 8px 0;
-        }
-
-        .btn {
-            padding: 8px 16px;
-            border: 1px solid rgba(255, 215, 0, 0.4);
-            border-radius: 6px;
-            background: transparent;
-            color: rgba(255, 215, 0, 0.8);
-            cursor: pointer;
-            font-size: 0.9rem;
-            transition: all 0.3s ease;
-            flex: 1;
-        }
-
-        .btn:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .btn.primary {
-            background: rgba(255, 215, 0, 0.2);
-            color: #ffd700;
-            border-color: #ffd700;
-        }
-
-        .btn.primary:hover {
-            background: rgba(255, 215, 0, 0.3);
-        }
-
-        .slider {
-            flex: 1;
-            -webkit-appearance: none;
-            height: 6px;
-            border-radius: 3px;
-            background: rgba(255, 255, 255, 0.2);
-            outline: none;
-        }
-
-        .slider::-webkit-slider-thumb {
-            -webkit-appearance: none;
-            width: 18px;
-            height: 18px;
-            border-radius: 50%;
-            background: #ffd700;
-            cursor: pointer;
-        }
-
-        .slider-value {
-            color: rgba(255, 215, 0, 0.8);
-            font-weight: 500;
-            min-width: 40px;
-            text-align: center;
-        }
-
-        /* Canvas Styling */
-        #mobile-canvas {
-            border: 2px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            background: #000;
-            margin: 1rem 0;
-            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
-        }
-
-        .canvas-info {
-            display: flex;
-            justify-content: space-between;
-            align-items: center;
-            margin: 1rem 0;
-            padding: 12px 16px;
-            background: rgba(255, 215, 0, 0.1);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            font-size: 0.9rem;
-        }
-
-        .info-item {
-            display: flex;
-            flex-direction: column;
-            align-items: center;
-            gap: 4px;
-        }
-
-        .info-label {
-            color: rgba(255, 215, 0, 0.8);
-            font-size: 0.8rem;
-        }
-
-        .info-value {
-            color: #ffd700;
-            font-weight: bold;
-        }
-
-        /* Rule Analysis */
-        .rule-analysis {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            border-radius: 6px;
-            padding: 12px;
-            margin: 1rem 0;
-            font-size: 0.9rem;
-        }
-
-        .analysis-title {
-            color: #ffd700;
-            font-weight: 600;
-            margin-bottom: 8px;
-        }
-
-        .analysis-text {
-            color: rgba(255, 255, 255, 0.8);
-            line-height: 1.5;
-        }
-
-        /* Initial Pattern Selector */
-        .pattern-selector {
-            display: grid;
-            grid-template-columns: repeat(2, 1fr);
-            gap: 8px;
-            margin: 1rem 0;
-        }
-
-        .pattern-option {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            padding: 8px;
-            text-align: center;
-            cursor: pointer;
-            transition: all 0.3s ease;
-            font-size: 0.85rem;
-        }
-
-        .pattern-option:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .pattern-option.active {
-            background: rgba(255, 215, 0, 0.2);
-            border-color: #ffd700;
-        }
-
-        /* Responsive Design */
-        @media (max-width: 1200px) {
-            .main-content {
-                grid-template-columns: 350px 1fr;
-            }
-        }
-
-        @media (max-width: 1024px) {
-            .main-content {
-                grid-template-columns: 1fr;
-                min-height: auto;
-            }
-
-            .controls-panel {
-                max-height: none;
-                border-right: none;
-                border-bottom: 1px solid rgba(255, 215, 0, 0.2);
-                padding: 1.5rem;
-            }
-
-            .canvas-area {
-                padding: 1rem;
-            }
-
-            .preset-rules {
-                grid-template-columns: repeat(3, 1fr);
-            }
-        }
-
-        @media (max-width: 768px) {
-            .container {
-                margin: 0;
-                border-radius: 0;
-            }
-
-            .header {
-                padding: 1.5rem;
-            }
-
-            .header h1 {
-                font-size: 2rem;
-            }
-
-            .controls-panel,
-            .canvas-area {
-                padding: 1rem;
-            }
-
-            .rule-grid {
-                grid-template-columns: 1fr;
-            }
-
-            .preset-rules {
-                grid-template-columns: repeat(2, 1fr);
-            }
-
-            .canvas-info {
-                flex-direction: column;
-                gap: 8px;
-            }
-
-            #mobile-canvas {
-                max-width: 100%;
-                height: auto;
-            }
-        }
-
-        /* Loading Animation */
-        @keyframes pulse {
-            0%, 100% {
-                opacity: 0.7;
-            }
-            50% {
-                opacity: 1;
-            }
-        }
-
-        .generating {
-            animation: pulse 1.5s infinite;
-        }
-    </style>
+  <meta charset="utf-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <title>NKS · Mobile Automata</title>
+  <style>
+    :root {
+      color-scheme: light;
+      font-family: "Helvetica Neue", Arial, system-ui, sans-serif;
+    }
+    body {
+      margin: 24px;
+      background: #fdfdfb;
+      color: #1f1b14;
+      max-width: 960px;
+    }
+    h1 { font-size: 1.9rem; margin-bottom: 0.4rem; }
+    p.lead { font-size: 1.05rem; line-height: 1.55; margin-bottom: 1.2rem; }
+    form {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
+      gap: 1rem;
+      background: #fff;
+      padding: 1rem;
+      border: 1px solid #d8d2c6;
+      border-radius: 8px;
+      box-shadow: 0 4px 12px rgba(31,27,20,0.05);
+      margin-bottom: 1.5rem;
+    }
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 0.35rem;
+      font-size: 0.9rem;
+      color: #5d574a;
+    }
+    select,
+    input[type="number"],
+    button {
+      font: inherit;
+      padding: 0.45rem 0.55rem;
+      border-radius: 6px;
+      border: 1px solid #c6bfab;
+      background: #fffef9;
+      color: inherit;
+    }
+    select:focus,
+    input:focus {
+      outline: 2px solid #a18f62;
+      outline-offset: 1px;
+    }
+    button {
+      cursor: pointer;
+      background: #d7c698;
+      border-color: #c9b379;
+      color: #2f291e;
+      transition: background 0.15s ease;
+    }
+    button:hover { background: #e7d7a7; }
+    button.secondary {
+      background: #f3efe3;
+      border-color: #cfc6b4;
+    }
+    table.rule-editor {
+      width: 100%;
+      border-collapse: collapse;
+      margin-bottom: 1rem;
+      font-size: 0.9rem;
+    }
+    table.rule-editor th,
+    table.rule-editor td {
+      border: 1px solid #e7e0d0;
+      padding: 0.35rem 0.45rem;
+      text-align: center;
+    }
+    table.rule-editor th {
+      background: #f4efe2;
+      font-weight: 600;
+    }
+    .output {
+      background: #ffffff;
+      border: 1px solid #d8d2c6;
+      border-radius: 8px;
+      padding: 1rem 1.25rem;
+      box-shadow: 0 4px 12px rgba(31,27,20,0.04);
+      margin-bottom: 1.2rem;
+      font-family: 'IBM Plex Mono', 'SFMono-Regular', ui-monospace, monospace;
+      font-size: 0.85rem;
+      white-space: pre;
+      overflow-x: auto;
+      max-height: 420px;
+    }
+    .note { font-size: 0.85rem; color: #655f52; margin-top: 0.8rem; }
+    @media (max-width: 600px) { body { margin: 16px; } form { grid-template-columns: 1fr; } }
+  </style>
 </head>
-
-<!-- Google tag (gtag.js) -->
-<script async src="https://www.googletagmanager.com/gtag/js?id=G-QR1KHESCTK"></script>
-<script>
-    window.dataLayer = window.dataLayer || [];
-    function gtag() { dataLayer.push(arguments); }
-    gtag('js', new Date());
-
-    gtag('config', 'G-QR1KHESCTK');
-</script>
-
 <body>
-    <div class="container">
-        <div class="header">
-            <h1>移动自动机探索器</h1>
-            <p>探索Wolfram的移动自动机系统，观察单个活跃细胞的移动和更新规律</p>
-        </div>
-
-        <div class="main-content">
-            <div class="controls-panel">
-                <div class="section-title">定义规则</div>
-                <p style="font-size: 0.9rem; color: rgba(255, 255, 255, 0.7); margin-bottom: 1rem;">
-                    设置移动自动机的状态转移规则：
-                </p>
-
-                <div class="rule-grid">
-                    <div class="rule-cell">
-                        <div class="rule-condition">读取0时</div>
-                        <div class="rule-actions">
-                            <div class="rule-action" data-condition="0" data-action="move" data-value="-1">←</div>
-                            <div class="rule-action" data-condition="0" data-action="move" data-value="0">停</div>
-                            <div class="rule-action active" data-condition="0" data-action="move" data-value="1">→</div>
-                            <div class="rule-action active" data-condition="0" data-action="write" data-value="1">写1</div>
-                            <div class="rule-action" data-condition="0" data-action="write" data-value="0">写0</div>
-                        </div>
-                    </div>
-                    <div class="rule-cell">
-                        <div class="rule-condition">读取1时</div>
-                        <div class="rule-actions">
-                            <div class="rule-action active" data-condition="1" data-action="move" data-value="-1">←</div>
-                            <div class="rule-action" data-condition="1" data-action="move" data-value="0">停</div>
-                            <div class="rule-action" data-condition="1" data-action="move" data-value="1">→</div>
-                            <div class="rule-action active" data-condition="1" data-action="write" data-value="0">写0</div>
-                            <div class="rule-action" data-condition="1" data-action="write" data-value="1">写1</div>
-                        </div>
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <div class="control-row">
-                        <span style="color: rgba(255, 215, 0, 0.8); font-size: 0.9rem;">当前规则: </span>
-                        <span id="current-rule" style="color: #ffd700; font-weight: bold; font-size: 1.1rem;">简单</span>
-                    </div>
-                </div>
-
-                <div class="section-title">预设规则</div>
-                <div class="preset-rules">
-                    <div class="preset-rule active" data-rule="simple">
-                        <div class="preset-name">简单移动</div>
-                        <div class="preset-description">基础左右移动</div>
-                    </div>
-                    <div class="preset-rule" data-rule="oscillating">
-                        <div class="preset-name">振荡运动</div>
-                        <div class="preset-description">周期性摆动</div>
-                    </div>
-                    <div class="preset-rule" data-rule="sweeping">
-                        <div class="preset-name">扫描模式</div>
-                        <div class="preset-description">逐渐扩展</div>
-                    </div>
-                    <div class="preset-rule" data-rule="complex">
-                        <div class="preset-name">复杂行为</div>
-                        <div class="preset-description">不可预测</div>
-                    </div>
-                    <div class="preset-rule" data-rule="splitting">
-                        <div class="preset-name">细胞分裂</div>
-                        <div class="preset-description">多活跃细胞</div>
-                    </div>
-                    <div class="preset-rule" data-rule="tag">
-                        <div class="preset-name">标签系统</div>
-                        <div class="preset-description">序列处理</div>
-                    </div>
-                </div>
-
-                <div class="section-title">初始配置</div>
-                <div class="pattern-selector">
-                    <div class="pattern-option active" data-pattern="single">
-                        <div style="color: #ffd700; font-weight: bold;">单细胞</div>
-                        <div style="font-size: 0.8rem; color: rgba(255,255,255,0.7);">中心单个活跃</div>
-                    </div>
-                    <div class="pattern-option" data-pattern="three">
-                        <div style="color: #ffd700; font-weight: bold;">三细胞</div>
-                        <div style="font-size: 0.8rem; color: rgba(255,255,255,0.7);">三个随机细胞</div>
-                    </div>
-                    <div class="pattern-option" data-pattern="random">
-                        <div style="color: #ffd700; font-weight: bold;">随机模式</div>
-                        <div style="font-size: 0.8rem; color: rgba(255,255,255,0.7);">随机分布</div>
-                    </div>
-                    <div class="pattern-option" data-pattern="edges">
-                        <div style="color: #ffd700; font-weight: bold;">边缘激活</div>
-                        <div style="font-size: 0.8rem; color: rgba(255,255,255,0.7);">两端活跃</div>
-                    </div>
-                </div>
-
-                <div class="section-title">控制参数</div>
-
-                <div class="control-group">
-                    <label class="control-label">带状长度</label>
-                    <div class="control-row">
-                        <input type="range" class="slider" id="tape-size" min="50" max="200" value="100">
-                        <span class="slider-value" id="tape-size-value">100</span>
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <label class="control-label">演化步数</label>
-                    <div class="control-row">
-                        <input type="range" class="slider" id="max-steps" min="50" max="300" value="150">
-                        <span class="slider-value" id="max-steps-value">150</span>
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <label class="control-label">演化速度</label>
-                    <div class="control-row">
-                        <input type="range" class="slider" id="speed" min="1" max="10" value="5">
-                        <span class="slider-value" id="speed-value">5</span>
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <div class="control-row">
-                        <button class="btn primary" id="start-btn">开始演化</button>
-                        <button class="btn" id="stop-btn">停止</button>
-                    </div>
-                    <div class="control-row">
-                        <button class="btn" id="reset-btn">重置</button>
-                        <button class="btn" id="step-btn">单步</button>
-                    </div>
-                </div>
-
-                <div class="rule-analysis" id="rule-analysis">
-                    <div class="analysis-title">规则分析</div>
-                    <div class="analysis-text" id="analysis-text">
-                        简单移动：活跃细胞在空白区域向右移动并写入1，在已填充区域向左移动并写入0。这创造了基本的来回移动模式。
-                    </div>
-                </div>
-            </div>
-
-            <div class="canvas-area">
-                <canvas id="mobile-canvas" width="800" height="600"></canvas>
-
-                <div class="canvas-info">
-                    <div class="info-item">
-                        <span class="info-label">当前步数</span>
-                        <span class="info-value" id="current-step">0</span>
-                    </div>
-                    <div class="info-item">
-                        <span class="info-label">活跃细胞</span>
-                        <span class="info-value" id="active-cells">1</span>
-                    </div>
-                    <div class="info-item">
-                        <span class="info-label">头部位置</span>
-                        <span class="info-value" id="head-position">50</span>
-                    </div>
-                    <div class="info-item">
-                        <span class="info-label">状态</span>
-                        <span class="info-value" id="evolution-status">就绪</span>
-                    </div>
-                </div>
-            </div>
-        </div>
+  <h1>Mobile Automata</h1>
+  <p class="lead">A faithful recreation of the Chapter 3 mobile-automaton demo from <em>A New Kind of Science</em>.
+    Each rule row specifies how the active cell and the cell in front of it are recoloured, and whether the head keeps moving forward or reverses direction.</p>
+
+  <form id="controls" autocomplete="off">
+    <label>Preset
+      <select id="preset-select">
+        <option value="class1">Class 1 · simple sweep</option>
+        <option value="class2">Class 2 · nested alternation</option>
+        <option value="class3">Class 3 · irregular growth</option>
+        <option value="custom">Custom rule</option>
+      </select>
+    </label>
+    <label>Steps to compute
+      <input type="number" id="steps-input" min="10" max="400" value="80">
+    </label>
+    <label>Initial tape radius (cells on each side)
+      <input type="number" id="radius-input" min="10" max="120" value="40">
+    </label>
+    <div style="display:flex; gap:0.5rem; align-items:center;">
+      <button type="submit">Run automaton</button>
+      <button type="button" id="clear-button" class="secondary">Clear output</button>
     </div>
-
-    <script>
-        class MobileAutomatonExplorer {
-            constructor() {
-                /* --- cache frequently used DOM nodes --- */
-                this.canvas = document.getElementById('mobile-canvas');
-                this.ctx = this.canvas.getContext('2d');
-                this.ruleActions = Array.from(document.querySelectorAll('.rule-action'));
-                this.presetEls = Array.from(document.querySelectorAll('.preset-rule'));
-                this.patternEls = Array.from(document.querySelectorAll('.pattern-option'));
-
-                /* --- runtime state --- */
-                this.tapeSize = 100;
-                this.maxSteps = 150;
-                this.currentStep = 0;
-                this.speedLevel = 5;
-                this.speed = this.calculateDelay(this.speedLevel);
-                this.isRunning = false;
-                this.animationId = null;
-
-                /* mobile automaton state */
-                this.tape = new Array(this.tapeSize).fill(0);
-                this.activeCells = [{ position: Math.floor(this.tapeSize / 2), direction: 1 }];
-                this.history = [];
-                this.maxHistory = 150;
-
-                /* rules: [move_delta, write_value] for states 0 and 1 */
-                this.rules = {
-                    0: [1, 1],  // If current cell is 0: move right, write 1
-                    1: [-1, 0]  // If current cell is 1: move left, write 0
-                };
-
-                this.currentRuleName = "简单";
-                this.currentPattern = "single";
-
-                this.init();
-            }
-
-            /* ---------- helpers ---------- */
-
-            clamp(n, min, max) {
-                return Math.min(Math.max(n, min), max);
-            }
-
-            calculateDelay(level) {
-                return Math.max(50, 550 - level * 50);
-            }
-
-            /* ---------- initialisation ---------- */
-
-            init() {
-                this.setupCanvas();
-                this.setupEventListeners();
-                this.updateRuleUI();
-                this.updateRuleDisplay();
-                this.resetSystem();
-                this.render();
-            }
-
-            setupCanvas() {
-                this.cellWidth = Math.min(this.canvas.width / this.tapeSize, 6);
-                this.cellHeight = Math.min(this.canvas.height / this.maxHistory, 4);
-                this.ctx.imageSmoothingEnabled = false;
-            }
-
-            /* ---------- UI / Events ---------- */
-
-            setupEventListeners() {
-                // rule actions
-                this.ruleActions.forEach(action => action.addEventListener('click', e => {
-                    this.toggleRuleAction(e.currentTarget);
-                }));
-
-                // preset rules
-                this.presetEls.forEach(preset => preset.addEventListener('click', e => {
-                    this.loadPresetRule(e.currentTarget);
-                }));
-
-                // pattern options
-                this.patternEls.forEach(pattern => pattern.addEventListener('click', e => {
-                    this.selectPattern(e.currentTarget);
-                }));
-
-                // main control buttons
-                document.getElementById('start-btn').addEventListener('click', () => this.start());
-                document.getElementById('stop-btn').addEventListener('click', () => this.stop());
-                document.getElementById('reset-btn').addEventListener('click', () => this.reset());
-                document.getElementById('step-btn').addEventListener('click', () => this.step());
-
-                // sliders
-                document.getElementById('tape-size')
-                    .addEventListener('input', e => this.setTapeSize(+e.target.value));
-                document.getElementById('max-steps')
-                    .addEventListener('input', e => this.setMaxSteps(+e.target.value));
-                document.getElementById('speed')
-                    .addEventListener('input', e => this.setSpeed(+e.target.value));
-            }
-
-            toggleRuleAction(el) {
-                const condition = parseInt(el.dataset.condition);
-                const action = el.dataset.action;
-                const value = parseInt(el.dataset.value);
-
-                // Remove active from other actions of the same type and condition
-                this.ruleActions.forEach(other => {
-                    if (parseInt(other.dataset.condition) === condition && 
-                        other.dataset.action === action && 
-                        other !== el) {
-                        other.classList.remove('active');
-                    }
-                });
-
-                // Toggle this action
-                el.classList.toggle('active');
-
-                this.updateRulesFromUI();
-            }
-
-            updateRulesFromUI() {
-                // Build rules from UI state
-                const newRules = { 0: [0, 0], 1: [0, 0] };
-
-                for (let condition of [0, 1]) {
-                    // Find active move action
-                    const activeMoveAction = this.ruleActions.find(el => 
-                        parseInt(el.dataset.condition) === condition &&
-                        el.dataset.action === 'move' &&
-                        el.classList.contains('active')
-                    );
-                    if (activeMoveAction) {
-                        newRules[condition][0] = parseInt(activeMoveAction.dataset.value);
-                    }
-
-                    // Find active write action
-                    const activeWriteAction = this.ruleActions.find(el => 
-                        parseInt(el.dataset.condition) === condition &&
-                        el.dataset.action === 'write' &&
-                        el.classList.contains('active')
-                    );
-                    if (activeWriteAction) {
-                        newRules[condition][1] = parseInt(activeWriteAction.dataset.value);
-                    }
-                }
-
-                this.rules = newRules;
-                this.currentRuleName = "自定义";
-                this.updateRuleDisplay();
-                this.updateRuleAnalysis();
-                this.updatePresetActiveState(null);
-            }
-
-            /* ---------- rule setters ---------- */
-
-            loadPresetRule(el) {
-                this.setRule(el.dataset.rule);
-            }
-
-            selectPattern(el) {
-                this.patternEls.forEach(p => p.classList.remove('active'));
-                el.classList.add('active');
-                this.currentPattern = el.dataset.pattern;
-                this.resetSystem();
-            }
-
-            setRule(ruleName) {
-                switch (ruleName) {
-                    case 'simple':
-                        this.rules = { 0: [1, 1], 1: [-1, 0] };
-                        this.currentRuleName = "简单";
-                        break;
-                    case 'oscillating':
-                        this.rules = { 0: [1, 1], 1: [-1, 1] };
-                        this.currentRuleName = "振荡";
-                        break;
-                    case 'sweeping':
-                        this.rules = { 0: [1, 0], 1: [-1, 1] };
-                        this.currentRuleName = "扫描";
-                        break;
-                    case 'complex':
-                        this.rules = { 0: [1, 1], 1: [1, 0] };
-                        this.currentRuleName = "复杂";
-                        break;
-                    case 'splitting':
-                        this.rules = { 0: [1, 1], 1: [-1, 0] };
-                        this.currentRuleName = "分裂";
-                        this.allowSplitting = true;
-                        break;
-                    case 'tag':
-                        this.rules = { 0: [1, 1], 1: [0, 0] };
-                        this.currentRuleName = "标签";
-                        break;
-                }
-
-                this.updateRuleUI();
-                this.updateRuleDisplay();
-                this.updateRuleAnalysis();
-                this.updatePresetActiveState(ruleName);
-            }
-
-            /* ---------- rule-related UI helpers ---------- */
-
-            updateRuleUI() {
-                // Update rule action states based on current rules
-                this.ruleActions.forEach(action => {
-                    const condition = parseInt(action.dataset.condition);
-                    const actionType = action.dataset.action;
-                    const value = parseInt(action.dataset.value);
-
-                    let shouldBeActive = false;
-                    if (actionType === 'move') {
-                        shouldBeActive = this.rules[condition][0] === value;
-                    } else if (actionType === 'write') {
-                        shouldBeActive = this.rules[condition][1] === value;
-                    }
-
-                    action.classList.toggle('active', shouldBeActive);
-                });
-            }
-
-            updateRuleDisplay() {
-                document.getElementById('current-rule').textContent = this.currentRuleName;
-            }
-
-            updateRuleAnalysis() {
-                const analyses = {
-                    "简单": "简单移动：活跃细胞在空白区域向右移动并写入1，在已填充区域向左移动并写入0。这创造了基本的来回移动模式。",
-                    "振荡": "振荡运动：更复杂的周期性运动模式，活跃细胞在不同状态下表现出不同的移动和写入行为。",
-                    "扫描": "扫描模式：活跃细胞进行渐进式的前后扫描运动，逐渐覆盖更大的区域。",
-                    "复杂": "复杂行为：产生不可预测的移动模式，展现出类似于混沌系统的特征。",
-                    "分裂": "细胞分裂：在特定条件下，活跃细胞可能分裂成多个独立的移动单元。",
-                    "标签": "标签系统：模拟标签系统的行为，通过符号操作实现计算过程。"
-                };
-
-                const text = analyses[this.currentRuleName] || `${this.currentRuleName}规则：观察其产生的移动模式和演化特征。`;
-                document.getElementById('analysis-text').textContent = text;
-            }
-
-            updatePresetActiveState(activeRule) {
-                this.presetEls.forEach(preset => {
-                    preset.classList.toggle('active', preset.dataset.rule === activeRule);
-                });
-            }
-
-            /* ---------- user adjustable params ---------- */
-
-            setTapeSize(size) {
-                this.tapeSize = size;
-                document.getElementById('tape-size-value').textContent = size;
-                this.setupCanvas();
-                this.resetSystem();
-            }
-
-            setMaxSteps(steps) {
-                this.maxSteps = steps;
-                document.getElementById('max-steps-value').textContent = steps;
-                this.setupCanvas();
-                this.resetSystem();
-            }
-
-            setSpeed(level) {
-                this.speedLevel = level;
-                this.speed = this.calculateDelay(level);
-                document.getElementById('speed-value').textContent = level;
-            }
-
-            /* ---------- simulation core ---------- */
-
-            resetSystem() {
-                this.currentStep = 0;
-                this.tape = new Array(this.tapeSize).fill(0);
-                this.activeCells = [];
-                this.history = [];
-                this.allowSplitting = false;
-
-                // Initialize based on selected pattern
-                this.initializePattern();
-                this.saveHistory();
-                this.updateInfo();
-                this.render();
-            }
-
-            initializePattern() {
-                const centerX = Math.floor(this.tapeSize / 2);
-
-                switch (this.currentPattern) {
-                    case 'single':
-                        this.activeCells = [{ position: centerX, direction: 1 }];
-                        break;
-                    case 'three':
-                        this.activeCells = [{ position: centerX, direction: 1 }];
-                        this.tape[centerX - 1] = Math.floor(Math.random() * 2);
-                        this.tape[centerX + 1] = Math.floor(Math.random() * 2);
-                        break;
-                    case 'random':
-                        this.activeCells = [{ position: centerX, direction: 1 }];
-                        for (let x = 0; x < this.tapeSize; x++) {
-                            if (Math.random() < 0.1) {
-                                this.tape[x] = 1;
-                            }
-                        }
-                        break;
-                    case 'edges':
-                        this.activeCells = [
-                            { position: 10, direction: 1 },
-                            { position: this.tapeSize - 10, direction: -1 }
-                        ];
-                        break;
-                }
-            }
-
-            step() {
-                if (this.currentStep >= this.maxSteps) {
-                    this.stop();
-                    return false;
-                }
-
-                const newActiveCells = [];
-
-                for (const activeCell of this.activeCells) {
-                    let { position, direction } = activeCell;
-
-                    // Wrap position
-                    position = ((position % this.tapeSize) + this.tapeSize) % this.tapeSize;
-
-                    // Get current cell value
-                    const currentValue = this.tape[position];
-
-                    // Apply rule
-                    const [moveDelta, writeValue] = this.rules[currentValue];
-
-                    // Write to current position
-                    this.tape[position] = writeValue;
-
-                    // Calculate new position
-                    const newPosition = ((position + moveDelta) % this.tapeSize + this.tapeSize) % this.tapeSize;
-
-                    // Add to new active cells
-                    newActiveCells.push({
-                        position: newPosition,
-                        direction: moveDelta
-                    });
-
-                    // Splitting behavior (for certain rules)
-                    if (this.allowSplitting && Math.random() < 0.05 && this.activeCells.length < 3) {
-                        newActiveCells.push({
-                            position: ((position - moveDelta) % this.tapeSize + this.tapeSize) % this.tapeSize,
-                            direction: -moveDelta
-                        });
-                    }
-                }
-
-                this.activeCells = newActiveCells;
-                this.currentStep++;
-
-                this.saveHistory();
-                this.updateInfo();
-                this.render();
-
-                return true;
-            }
-
-            saveHistory() {
-                const snapshot = {
-                    tape: [...this.tape],
-                    activeCells: this.activeCells.map(cell => ({ ...cell }))
-                };
-
-                this.history.push(snapshot);
-
-                if (this.history.length > this.maxHistory) {
-                    this.history.shift();
-                }
-            }
-
-            start() {
-                if (this.isRunning) return;
-                this.isRunning = true;
-                document.getElementById('evolution-status').textContent = '运行中';
-                document.getElementById('start-btn').classList.add('generating');
-
-                const evolve = () => {
-                    if (!this.isRunning) return;
-                    const canContinue = this.step();
-                    if (!canContinue) {
-                        this.stop();
-                        return;
-                    }
-                    this.animationId = setTimeout(evolve, this.speed);
-                };
-                evolve();
-            }
-
-            stop() {
-                this.isRunning = false;
-                if (this.animationId) {
-                    clearTimeout(this.animationId);
-                    this.animationId = null;
-                }
-                document.getElementById('evolution-status').textContent = '已停止';
-                document.getElementById('start-btn').classList.remove('generating');
-            }
-
-            reset() {
-                this.stop();
-                this.resetSystem();
-                document.getElementById('evolution-status').textContent = '就绪';
-            }
-
-            render() {
-                // Clear canvas
-                this.ctx.fillStyle = '#000';
-                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
-
-                // Draw history
-                for (let t = 0; t < this.history.length; t++) {
-                    const snapshot = this.history[t];
-                    const y = t * this.cellHeight;
-                    const alpha = Math.max(0.3, 1 - (this.history.length - t - 1) * 0.02);
-
-                    // Draw tape
-                    for (let x = 0; x < this.tapeSize; x++) {
-                        const value = snapshot.tape[x];
-                        if (value === 1) {
-                            this.ctx.fillStyle = `rgba(78, 205, 196, ${alpha})`;
-                            this.ctx.fillRect(x * this.cellWidth, y, this.cellWidth, this.cellHeight);
-                        }
-                    }
-
-                    // Draw active cells
-                    for (const activeCell of snapshot.activeCells) {
-                        this.ctx.fillStyle = `rgba(255, 215, 0, ${alpha})`;
-                        this.ctx.fillRect(
-                            activeCell.position * this.cellWidth,
-                            y,
-                            this.cellWidth,
-                            this.cellHeight
-                        );
-                    }
-                }
-            }
-
-            updateInfo() {
-                document.getElementById('current-step').textContent = this.currentStep;
-                document.getElementById('active-cells').textContent = this.activeCells.length;
-                const headPos = this.activeCells.length > 0 ? this.activeCells[0].position : 'N/A';
-                document.getElementById('head-position').textContent = headPos;
-            }
-        }
-
-        /* ---------- bootstrap ---------- */
-        document.addEventListener('DOMContentLoaded', () => new MobileAutomatonExplorer());
-    </script>
+  </form>
+
+  <table class="rule-editor" aria-label="Mobile automaton rule editor">
+    <thead>
+      <tr>
+        <th>Active</th>
+        <th>Forward</th>
+        <th>New active</th>
+        <th>New forward</th>
+        <th>Direction</th>
+      </tr>
+    </thead>
+    <tbody id="rule-body"></tbody>
+  </table>
+
+  <div class="output" id="output" aria-live="polite"></div>
+  <p class="note">Output format: each line shows a time step, leftmost cell first. The active cell is wrapped in brackets (e.g. <code>[1]</code>).
+    The examples correspond to the behaviours illustrated on pages 72–75 of <em>NKS</em>.</p>
+
+  <script>
+    (function() {
+      const CASES = [
+        { key: '0,0', active: 0, forward: 0 },
+        { key: '0,1', active: 0, forward: 1 },
+        { key: '1,0', active: 1, forward: 0 },
+        { key: '1,1', active: 1, forward: 1 }
+      ];
+
+      const PRESETS = {
+        class1: {
+          description: 'Class 1 behaviour – the head sweeps in one direction painting the tape.',
+          rule: {
+            '0,0': { active: 1, forward: 0, turn: 'R' },
+            '0,1': { active: 1, forward: 0, turn: 'R' },
+            '1,0': { active: 0, forward: 1, turn: 'F' },
+            '1,1': { active: 0, forward: 1, turn: 'F' }
+          }
+        },
+        class2: {
+          description: 'Class 2 nested pattern – alternating blocks of 0s and 1s.',
+          rule: {
+            '0,0': { active: 0, forward: 1, turn: 'R' },
+            '0,1': { active: 0, forward: 1, turn: 'F' },
+            '1,0': { active: 0, forward: 0, turn: 'F' },
+            '1,1': { active: 1, forward: 0, turn: 'R' }
+          }
+        },
+        class3: {
+          description: 'Class 3 irregular growth – frequent reversals and mixed colours.',
+          rule: {
+            '0,0': { active: 1, forward: 1, turn: 'R' },
+            '0,1': { active: 0, forward: 0, turn: 'R' },
+            '1,0': { active: 1, forward: 0, turn: 'R' },
+            '1,1': { active: 0, forward: 0, turn: 'F' }
+          }
+        }
+      };
+
+      const presetSelect = document.getElementById('preset-select');
+      const stepsInput = document.getElementById('steps-input');
+      const radiusInput = document.getElementById('radius-input');
+      const ruleBody = document.getElementById('rule-body');
+      const outputEl = document.getElementById('output');
+      const controls = document.getElementById('controls');
+      const clearButton = document.getElementById('clear-button');
+
+      function createRuleRow(caseInfo) {
+        const tr = document.createElement('tr');
+        const activeTd = document.createElement('td');
+        activeTd.textContent = caseInfo.active;
+        const forwardTd = document.createElement('td');
+        forwardTd.textContent = caseInfo.forward;
+
+        const newActiveSelect = document.createElement('select');
+        ['0', '1'].forEach(value => {
+          const option = document.createElement('option');
+          option.value = value;
+          option.textContent = value;
+          newActiveSelect.appendChild(option);
+        });
+
+        const newForwardSelect = document.createElement('select');
+        ['0', '1'].forEach(value => {
+          const option = document.createElement('option');
+          option.value = value;
+          option.textContent = value;
+          newForwardSelect.appendChild(option);
+        });
+
+        const turnSelect = document.createElement('select');
+        const forwardOption = document.createElement('option');
+        forwardOption.value = 'F';
+        forwardOption.textContent = 'Forward';
+        const reverseOption = document.createElement('option');
+        reverseOption.value = 'R';
+        reverseOption.textContent = 'Reverse';
+        turnSelect.append(forwardOption, reverseOption);
+
+        newActiveSelect.dataset.case = caseInfo.key;
+        newActiveSelect.dataset.field = 'active';
+        newForwardSelect.dataset.case = caseInfo.key;
+        newForwardSelect.dataset.field = 'forward';
+        turnSelect.dataset.case = caseInfo.key;
+        turnSelect.dataset.field = 'turn';
+
+        const activeWrapper = document.createElement('td');
+        activeWrapper.appendChild(newActiveSelect);
+        const forwardWrapper = document.createElement('td');
+        forwardWrapper.appendChild(newForwardSelect);
+        const turnWrapper = document.createElement('td');
+        turnWrapper.appendChild(turnSelect);
+
+        tr.append(activeTd, forwardTd, activeWrapper, forwardWrapper, turnWrapper);
+        return tr;
+      }
+
+      function populateRuleTable() {
+        ruleBody.innerHTML = '';
+        CASES.forEach(c => ruleBody.appendChild(createRuleRow(c)));
+      }
+
+      function setRuleValues(rule) {
+        const selects = ruleBody.querySelectorAll('select');
+        selects.forEach(select => {
+          const { case: caseKey, field } = select.dataset;
+          const value = rule[caseKey][field];
+          select.value = field === 'turn' ? value : String(value);
+        });
+      }
+
+      function readRuleFromTable() {
+        const rule = {};
+        CASES.forEach(info => {
+          const activeSelect = ruleBody.querySelector(`select[data-case="${info.key}"][data-field="active"]`);
+          const forwardSelect = ruleBody.querySelector(`select[data-case="${info.key}"][data-field="forward"]`);
+          const turnSelect = ruleBody.querySelector(`select[data-case="${info.key}"][data-field="turn"]`);
+          rule[info.key] = {
+            active: Number(activeSelect.value),
+            forward: Number(forwardSelect.value),
+            turn: turnSelect.value
+          };
+        });
+        return rule;
+      }
+
+      function simulate(rule, steps, radius) {
+        const tape = new Map();
+        // pre-seed tape with zeros within the requested radius
+        for (let i = -radius; i <= radius; i++) {
+          tape.set(i, 0);
+        }
+        let position = 0;
+        let direction = 1;
+        let min = 0;
+        let max = 0;
+        const lines = [];
+
+        const get = index => tape.has(index) ? tape.get(index) : 0;
+        const set = (index, value) => tape.set(index, value);
+
+        for (let step = 0; step < steps; step++) {
+          min = Math.min(min, position);
+          max = Math.max(max, position);
+          const forwardIndex = position + direction;
+          min = Math.min(min, forwardIndex);
+          max = Math.max(max, forwardIndex);
+
+          let snapshot = `${step.toString().padStart(3, '0')} `;
+          for (let x = min; x <= max; x++) {
+            const symbol = get(x);
+            snapshot += x === position ? `[${symbol}]` : ` ${symbol} `;
+          }
+          lines.push(snapshot.trimEnd());
+
+          const ruleKey = `${get(position)},${get(forwardIndex)}`;
+          const action = rule[ruleKey];
+          if (!action) {
+            lines.push(`Halts: no rule for state (${ruleKey})`);
+            break;
+          }
+
+          set(position, action.active);
+          set(forwardIndex, action.forward);
+          if (action.turn === 'R') {
+            direction *= -1;
+          }
+          position += direction;
+        }
+
+        return {
+          lines,
+          range: max - min,
+          min,
+          max
+        };
+      }
+
+      function renderOutput(result, presetDescription) {
+        if (!result || !result.lines.length) {
+          outputEl.textContent = '';
+          return;
+        }
+        const summary = `Range: ${result.range + 1} cells (positions ${result.min}…${result.max})`;
+        const prefix = presetDescription ? `${presetDescription}\n` : '';
+        outputEl.textContent = `${prefix}${summary}\n\n${result.lines.join('\n')}`;
+      }
+
+      presetSelect.addEventListener('change', () => {
+        const preset = PRESETS[presetSelect.value];
+        if (!preset) return;
+        setRuleValues(preset.rule);
+      });
+
+      clearButton.addEventListener('click', () => {
+        outputEl.textContent = '';
+      });
+
+      controls.addEventListener('submit', (event) => {
+        event.preventDefault();
+        const steps = Math.max(10, Math.min(400, parseInt(stepsInput.value, 10) || 40));
+        stepsInput.value = steps;
+        const radius = Math.max(10, Math.min(120, parseInt(radiusInput.value, 10) || 40));
+        radiusInput.value = radius;
+        const rule = readRuleFromTable();
+        const preset = PRESETS[presetSelect.value];
+        const description = preset ? preset.description : 'Custom rule';
+        const result = simulate(rule, steps, radius);
+        renderOutput(result, description);
+      });
+
+      // initial setup
+      populateRuleTable();
+      setRuleValues(PRESETS.class1.rule);
+      controls.dispatchEvent(new Event('submit'));
+    })();
+  </script>
 </body>
-
-</html>
\ No newline at end of file
+</html>
diff --git a/demos/chapter3/register-machine-demo.html b/demos/chapter3/register-machine-demo.html
index 797e7db4b66aad8ee9fd3a22c7399f8167c6d28f..0f6261665cb30bc0357532ac65a6c3e6b0587470 100644
--- a/demos/chapter3/register-machine-demo.html
+++ b/demos/chapter3/register-machine-demo.html
@@ -1,904 +1,282 @@
 <!DOCTYPE html>
-<html lang="zh-CN">
-
+<html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>寄存器机器演示 - 交互式计算模型实验</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            line-height: 1.6;
-            color: #e0e0e0;
-            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
-            min-height: 100vh;
-            padding: 0;
-        }
-
-        .container {
-            width: 100vw;
-            min-height: 100vh;
-            margin: 0;
-            background: rgba(26, 26, 26, 0.8);
-            backdrop-filter: blur(10px);
-            overflow: hidden;
-        }
-
-        .header {
-            background: linear-gradient(135deg, #ffd700, #ffb300);
-            color: #1a1a1a;
-            padding: 2rem;
-            text-align: center;
-        }
-
-        .header h1 {
-            font-size: 2.5rem;
-            font-weight: 700;
-            margin-bottom: 0.5rem;
-        }
-
-        .header p {
-            font-size: 1.1rem;
-            opacity: 0.8;
-        }
-
-        .main-content {
-            display: grid;
-            grid-template-columns: 400px 1fr;
-            gap: 0;
-            min-height: calc(100vh - 120px);
-        }
-
-        .controls-panel {
-            background: rgba(40, 40, 40, 0.9);
-            padding: 2rem;
-            border-right: 1px solid rgba(255, 215, 0, 0.2);
-            max-height: calc(100vh - 200px);
-            overflow-y: auto;
-        }
-
-        .machines-area {
-            padding: 1.5rem;
-            display: flex;
-            flex-direction: column;
-            background: rgba(20, 20, 20, 0.5);
-            overflow: auto;
-        }
-
-        .section-title {
-            color: #ffd700;
-            font-size: 1.3rem;
-            font-weight: 600;
-            margin: 1.5rem 0 1rem 0;
-            padding-bottom: 0.5rem;
-            border-bottom: 2px solid rgba(255, 215, 0, 0.3);
-        }
-
-        .section-title:first-of-type {
-            margin-top: 0;
-        }
-
-        /* Program Selection */
-        .program-grid {
-            display: grid;
-            grid-template-columns: 1fr;
-            gap: 8px;
-            margin: 1rem 0;
-        }
-
-        .program-option {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            padding: 10px;
-            cursor: pointer;
-            transition: all 0.3s ease;
-            font-size: 0.9rem;
-        }
-
-        .program-option:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .program-option.active {
-            background: rgba(255, 215, 0, 0.2);
-            border-color: #ffd700;
-        }
-
-        .program-name {
-            font-weight: bold;
-            color: #ffd700;
-            font-size: 1rem;
-            margin-bottom: 4px;
-        }
-
-        .program-description {
-            color: rgba(255, 255, 255, 0.7);
-            font-size: 0.8rem;
-        }
-
-        /* Control Buttons */
-        .control-group {
-            margin: 1rem 0;
-        }
-
-        .control-row {
-            display: flex;
-            gap: 8px;
-            align-items: center;
-            margin: 8px 0;
-        }
-
-        .btn {
-            padding: 8px 16px;
-            border: 1px solid rgba(255, 215, 0, 0.4);
-            border-radius: 6px;
-            background: transparent;
-            color: rgba(255, 215, 0, 0.8);
-            cursor: pointer;
-            font-size: 0.9rem;
-            transition: all 0.3s ease;
-            flex: 1;
-        }
-
-        .btn:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .btn.primary {
-            background: rgba(255, 215, 0, 0.2);
-            color: #ffd700;
-            border-color: #ffd700;
-        }
-
-        .btn.primary:hover {
-            background: rgba(255, 215, 0, 0.3);
-        }
-
-        .btn:disabled {
-            opacity: 0.5;
-            cursor: not-allowed;
-        }
-
-        /* Machine Display */
-        .machine-container {
-            display: flex;
-            flex-direction: column;
-            gap: 2rem;
-        }
-
-        .machine-panel {
-            background: rgba(255, 255, 255, 0.03);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            border-radius: 10px;
-            padding: 1.5rem;
-        }
-
-        .machine-title {
-            color: #ffd700;
-            font-size: 1.3rem;
-            font-weight: 600;
-            margin-bottom: 1rem;
-            text-align: center;
-            padding-bottom: 0.5rem;
-            border-bottom: 1px solid rgba(255, 215, 0, 0.3);
-        }
-
-        /* Registers Display */
-        .registers-container {
-            display: flex;
-            justify-content: center;
-            gap: 1rem;
-            margin: 1rem 0;
-        }
-
-        .register {
-            background: rgba(0, 0, 0, 0.4);
-            border: 2px solid rgba(255, 215, 0, 0.5);
-            border-radius: 8px;
-            padding: 1rem;
-            text-align: center;
-            min-width: 80px;
-            transition: all 0.3s ease;
-        }
-
-        .register.highlight {
-            border-color: #ffd700;
-            background: rgba(255, 215, 0, 0.1);
-            transform: scale(1.05);
-        }
-
-        .register-label {
-            font-size: 0.8rem;
-            color: rgba(255, 215, 0, 0.8);
-            margin-bottom: 5px;
-            font-weight: 500;
-        }
-
-        .register-value {
-            font-size: 1.5rem;
-            font-weight: bold;
-            color: #ffd700;
-            font-family: 'JetBrains Mono', monospace;
-        }
-
-        /* Program Display */
-        .program-display {
-            background: rgba(0, 0, 0, 0.4);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            padding: 1rem;
-            margin: 1rem 0;
-            font-family: 'JetBrains Mono', monospace;
-            font-size: 0.9rem;
-            max-height: 300px;
-            overflow-y: auto;
-        }
-
-        .instruction {
-            display: flex;
-            padding: 4px 8px;
-            border-radius: 4px;
-            margin: 2px 0;
-            border-left: 3px solid transparent;
-            transition: all 0.3s ease;
-        }
-
-        .instruction.current {
-            border-left-color: #ffd700;
-            background: rgba(255, 215, 0, 0.1);
-        }
-
-        .instruction-num {
-            color: rgba(255, 255, 255, 0.5);
-            min-width: 30px;
-            font-weight: 500;
-        }
-
-        .instruction-text {
-            flex: 1;
-            margin-left: 10px;
-            color: rgba(255, 255, 255, 0.8);
-        }
-
-        /* Status Display */
-        .machine-status {
-            display: flex;
-            justify-content: space-between;
-            align-items: center;
-            margin: 1rem 0;
-            padding: 12px 16px;
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            font-size: 0.9rem;
-            background: rgba(255, 255, 255, 0.02);
-        }
-
-        .status-item {
-            display: flex;
-            flex-direction: column;
-            align-items: center;
-            gap: 4px;
-        }
-
-        .status-label {
-            color: rgba(255, 215, 0, 0.8);
-            font-size: 0.8rem;
-        }
-
-        .status-value {
-            color: #ffd700;
-            font-weight: bold;
-        }
-
-        .status-value.running {
-            color: #90EE90;
-        }
-
-        .status-value.halted {
-            color: #FFB6C1;
-        }
-
-        /* Speed Control */
-        .slider {
-            flex: 1;
-            -webkit-appearance: none;
-            height: 6px;
-            border-radius: 3px;
-            background: rgba(255, 255, 255, 0.2);
-            outline: none;
-        }
-
-        .slider::-webkit-slider-thumb {
-            -webkit-appearance: none;
-            width: 18px;
-            height: 18px;
-            border-radius: 50%;
-            background: #ffd700;
-            cursor: pointer;
-        }
-
-        .slider-value {
-            color: rgba(255, 215, 0, 0.8);
-            font-weight: 500;
-            min-width: 40px;
-            text-align: center;
-        }
-
-        /* Analysis Panel */
-        .analysis-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            border-radius: 6px;
-            padding: 12px;
-            margin: 1rem 0;
-            font-size: 0.9rem;
-        }
-
-        .analysis-title {
-            color: #ffd700;
-            font-weight: 600;
-            margin-bottom: 8px;
-        }
-
-        .analysis-text {
-            color: rgba(255, 255, 255, 0.8);
-            line-height: 1.5;
-        }
-
-        /* Responsive Design */
-        @media (max-width: 1200px) {
-            .main-content {
-                grid-template-columns: 350px 1fr;
-            }
-        }
-
-        @media (max-width: 1024px) {
-            .main-content {
-                grid-template-columns: 1fr;
-                min-height: auto;
-            }
-
-            .controls-panel {
-                max-height: none;
-                border-right: none;
-                border-bottom: 1px solid rgba(255, 215, 0, 0.2);
-                padding: 1.5rem;
-            }
-
-            .machines-area {
-                padding: 1rem;
-            }
-        }
-
-        @media (max-width: 768px) {
-            .header {
-                padding: 1.5rem;
-            }
-
-            .header h1 {
-                font-size: 2rem;
-            }
-
-            .controls-panel,
-            .machines-area {
-                padding: 1rem;
-            }
-
-            .registers-container {
-                flex-wrap: wrap;
-                gap: 0.5rem;
-            }
-
-            .register {
-                min-width: 60px;
-                padding: 0.8rem;
-            }
-
-            .machine-container {
-                gap: 1rem;
-            }
-        }
-
-        /* Loading Animation */
-        @keyframes pulse {
-            0%, 100% {
-                opacity: 0.7;
-            }
-            50% {
-                opacity: 1;
-            }
-        }
-
-        .generating {
-            animation: pulse 1.5s infinite;
-        }
-
-        /* Custom Scrollbars */
-        .program-display::-webkit-scrollbar,
-        .controls-panel::-webkit-scrollbar {
-            width: 6px;
-        }
-
-        .program-display::-webkit-scrollbar-track,
-        .controls-panel::-webkit-scrollbar-track {
-            background: rgba(255, 255, 255, 0.1);
-        }
-
-        .program-display::-webkit-scrollbar-thumb,
-        .controls-panel::-webkit-scrollbar-thumb {
-            background: rgba(255, 215, 0, 0.3);
-            border-radius: 3px;
-        }
-
-        .program-display::-webkit-scrollbar-thumb:hover,
-        .controls-panel::-webkit-scrollbar-thumb:hover {
-            background: rgba(255, 215, 0, 0.5);
-        }
-    </style>
+  <meta charset="utf-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <title>NKS · Register Machines</title>
+  <style>
+    :root {
+      color-scheme: light;
+      font-family: "Helvetica Neue", Arial, system-ui, sans-serif;
+    }
+    body {
+      margin: 24px;
+      background: #fdfdfb;
+      color: #1f1b14;
+      max-width: 960px;
+    }
+    h1 { font-size: 1.9rem; margin-bottom: 0.4rem; }
+    p.lead { font-size: 1.05rem; line-height: 1.55; margin-bottom: 1.2rem; }
+    form {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(230px, 1fr));
+      gap: 1rem;
+      background: #fff;
+      padding: 1rem;
+      border: 1px solid #d8d2c6;
+      border-radius: 8px;
+      box-shadow: 0 4px 12px rgba(31,27,20,0.05);
+      margin-bottom: 1.5rem;
+    }
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 0.35rem;
+      font-size: 0.9rem;
+      color: #5d574a;
+    }
+    select,
+    input[type="number"],
+    input[type="text"],
+    textarea,
+    button {
+      font: inherit;
+      padding: 0.45rem 0.55rem;
+      border-radius: 6px;
+      border: 1px solid #c6bfab;
+      background: #fffef9;
+      color: inherit;
+    }
+    textarea {
+      min-height: 140px;
+      resize: vertical;
+      font-family: 'IBM Plex Mono', 'SFMono-Regular', ui-monospace, monospace;
+    }
+    select:focus,
+    input:focus,
+    textarea:focus {
+      outline: 2px solid #a18f62;
+      outline-offset: 1px;
+    }
+    button {
+      cursor: pointer;
+      background: #d7c698;
+      border-color: #c9b379;
+      color: #2f291e;
+      transition: background 0.15s ease;
+    }
+    button:hover { background: #e7d7a7; }
+    button.secondary {
+      background: #f3efe3;
+      border-color: #cfc6b4;
+    }
+    .output {
+      background: #ffffff;
+      border: 1px solid #d8d2c6;
+      border-radius: 8px;
+      padding: 1rem 1.25rem;
+      box-shadow: 0 4px 12px rgba(31,27,20,0.04);
+    }
+    table { width: 100%; border-collapse: collapse; font-size: 0.9rem; }
+    th, td { border: 1px solid #e7e0d0; padding: 0.35rem 0.5rem; }
+    th { background: #f4efe2; font-weight: 600; text-align: left; }
+    td.code { font-family: 'IBM Plex Mono', 'SFMono-Regular', ui-monospace, monospace; word-break: break-word; }
+    .note { font-size: 0.85rem; color: #655f52; margin-top: 0.8rem; }
+    @media (max-width: 600px) { body { margin: 16px; } form { grid-template-columns: 1fr; } }
+  </style>
 </head>
-
-<!-- Google tag (gtag.js) -->
-<script async src="https://www.googletagmanager.com/gtag/js?id=G-QR1KHESCTK"></script>
-<script>
-    window.dataLayer = window.dataLayer || [];
-    function gtag() { dataLayer.push(arguments); }
-    gtag('js', new Date());
-    gtag('config', 'G-QR1KHESCTK');
-</script>
-
 <body>
-    <div class="container">
-        <div class="header">
-            <h1>寄存器机器演示</h1>
-            <p>交互式探索计算的基本模型，理解简单指令如何产生复杂计算</p>
-        </div>
-
-        <div class="main-content">
-            <div class="controls-panel">
-                <div class="section-title">程序选择</div>
-                <p style="font-size: 0.9rem; color: rgba(255, 255, 255, 0.7); margin-bottom: 1rem;">
-                    选择不同的程序来探索寄存器机器的计算能力：
-                </p>
-
-                <div class="program-grid" id="program-grid">
-                    <div class="program-option active" data-program="increment">
-                        <div class="program-name">简单递增</div>
-                        <div class="program-description">将R0寄存器递增3次</div>
-                    </div>
-                    <div class="program-option" data-program="add">
-                        <div class="program-name">加法运算</div>
-                        <div class="program-description">计算R0 + R1，结果存入R0</div>
-                    </div>
-                    <div class="program-option" data-program="multiply">
-                        <div class="program-name">乘法运算</div>
-                        <div class="program-description">计算R1 × R2，结果存入R0</div>
-                    </div>
-                    <div class="program-option" data-program="fibonacci">
-                        <div class="program-name">斐波那契数列</div>
-                        <div class="program-description">生成斐波那契数列</div>
-                    </div>
-                    <div class="program-option" data-program="subtract">
-                        <div class="program-name">减法运算</div>
-                        <div class="program-description">计算R0 - R1，结果存入R0</div>
-                    </div>
-                    <div class="program-option" data-program="gcd">
-                        <div class="program-name">最大公约数</div>
-                        <div class="program-description">计算R0和R1的最大公约数</div>
-                    </div>
-                </div>
-
-                <div class="section-title">执行控制</div>
-
-                <div class="control-group">
-                    <div class="control-row">
-                        <button class="btn primary" id="step-btn">单步执行</button>
-                        <button class="btn primary" id="run-btn">连续运行</button>
-                    </div>
-                    <div class="control-row">
-                        <button class="btn" id="stop-btn" disabled>停止</button>
-                        <button class="btn" id="reset-btn">重置</button>
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <label style="color: rgba(255, 215, 0, 0.8); font-size: 0.9rem; margin-bottom: 8px; display: block;">执行速度</label>
-                    <div class="control-row">
-                        <input type="range" class="slider" id="speed-slider" min="1" max="10" value="5">
-                        <span class="slider-value" id="speed-value">5</span>
-                    </div>
-                </div>
-
-                <div class="analysis-panel">
-                    <div class="analysis-title">关于寄存器机器</div>
-                    <div class="analysis-text" id="analysis-text">
-                        寄存器机器是Wolfram在《一种新科学》中讨论的基本计算模型。它们由有限个寄存器（存储非负整数）和简单指令组成，却能实现图灵完备的计算。
-                    </div>
-                </div>
-            </div>
-
-            <div class="machines-area">
-                <div class="machine-container">
-                    <div class="machine-panel">
-                        <div class="machine-title">寄存器机器</div>
-
-                        <div class="registers-container" id="registers-container">
-                            <div class="register" id="register-0">
-                                <div class="register-label">R0</div>
-                                <div class="register-value">0</div>
-                            </div>
-                            <div class="register" id="register-1">
-                                <div class="register-label">R1</div>
-                                <div class="register-value">0</div>
-                            </div>
-                            <div class="register" id="register-2">
-                                <div class="register-label">R2</div>
-                                <div class="register-value">0</div>
-                            </div>
-                        </div>
-
-                        <div class="program-display" id="program-display">
-                            <!-- Program instructions will be displayed here -->
-                        </div>
-
-                        <div class="machine-status">
-                            <div class="status-item">
-                                <span class="status-label">程序计数器</span>
-                                <span class="status-value" id="pc-value">1</span>
-                            </div>
-                            <div class="status-item">
-                                <span class="status-label">执行步数</span>
-                                <span class="status-value" id="steps-value">0</span>
-                            </div>
-                            <div class="status-item">
-                                <span class="status-label">状态</span>
-                                <span class="status-value" id="status-value">就绪</span>
-                            </div>
-                            <div class="status-item">
-                                <span class="status-label">当前指令</span>
-                                <span class="status-value" id="current-instruction">-</span>
-                            </div>
-                        </div>
-                    </div>
-                </div>
-            </div>
-        </div>
+  <h1>Register Machines</h1>
+  <p class="lead">This page reproduces the register-machine experiment from Chapter 3 of <em>A New Kind of Science</em>.
+    Programs use Wolfram's two-instruction model: <strong>INC</strong> increases a register by one, while
+    <strong>DEC</strong> decreases a register if possible and optionally branches.</p>
+
+  <form id="controls" autocomplete="off">
+    <label>Preset program
+      <select id="preset-select">
+        <option value="increment">NKS simple — three increments of R0</option>
+        <option value="addition">NKS addition — move R1 into R0</option>
+        <option value="loop">Nested loop — produces a longer run</option>
+        <option value="custom">Custom program…</option>
+      </select>
+    </label>
+    <label>Initial registers (comma-separated)
+      <input type="text" id="register-input" value="0,0" spellcheck="false">
+    </label>
+    <label>Maximum steps
+      <input type="number" id="steps-input" min="1" max="2000" value="200">
+    </label>
+    <label>Program
+      <textarea id="program-input">INC R0
+INC R0
+INC R0
+HALT</textarea>
+    </label>
+    <div style="display:flex; gap:0.5rem; align-items:center;">
+      <button type="submit">Run program</button>
+      <button type="button" id="clear-button" class="secondary">Clear output</button>
     </div>
-
-    <script>
-        // Register Machine Implementation
-        class RegisterMachine {
-            constructor() {
-                this.registers = [0, 0, 0];
-                this.program = [];
-                this.pc = 0; // program counter
-                this.running = false;
-                this.intervalId = null;
-                this.stepCount = 0;
-                this.maxSteps = 10000;
-                this.speed = 200; // milliseconds
-                this.highlightedRegister = -1;
-                
-                this.programs = {
-                    increment: {
-                        program: ['INC R0', 'INC R0', 'INC R0', 'HALT'],
-                        initial: [0, 0, 0],
-                        description: '将R0寄存器递增3次，演示最基本的寄存器操作。'
-                    },
-                    add: {
-                        program: ['DEC R1 5', 'INC R0', 'DEC R1 5', 'INC R0', 'HALT'],
-                        initial: [0, 3, 0],
-                        description: '通过循环将R1的值加到R0上，实现加法运算。每次将R1减1的同时将R0加1。'
-                    },
-                    multiply: {
-                        program: [
-                            'DEC R1 8',
-                            'DEC R2 6', 
-                            'INC R0',
-                            'DEC R2 6',
-                            'INC R2',
-                            'DEC R1 8',
-                            'INC R1',
-                            'HALT'
-                        ],
-                        initial: [0, 2, 3],
-                        description: '通过嵌套循环实现乘法运算，将R1×R2的结果存储在R0中。'
-                    },
-                    fibonacci: {
-                        program: [
-                            'DEC R2 11',
-                            'INC R0',
-                            'DEC R1 8',
-                            'INC R0',
-                            'INC R1',
-                            'INC R1',
-                            'DEC R0 11',
-                            'DEC R1 11',
-                            'DEC R0 4',
-                            'DEC R2 11',
-                            'HALT'
-                        ],
-                        initial: [1, 1, 5],
-                        description: '生成斐波那契数列，展示寄存器机器处理递归模式的能力。'
-                    },
-                    subtract: {
-                        program: ['DEC R1 5', 'DEC R0 5', 'DEC R1 5', 'DEC R0 5', 'HALT'],
-                        initial: [8, 3, 0],
-                        description: '实现减法运算，同时递减R0和R1直到R1为0，结果为R0-R1。'
-                    },
-                    gcd: {
-                        program: [
-                            'DEC R0 5',
-                            'DEC R1 9',
-                            'DEC R0 5',
-                            'INC R1',
-                            'DEC R0 9',
-                            'DEC R1 9',
-                            'DEC R1 9',
-                            'INC R0',
-                            'DEC R1 9',
-                            'HALT'
-                        ],
-                        initial: [12, 8, 0],
-                        description: '使用欧几里得算法计算两个数的最大公约数，展示复杂算法的实现。'
-                    }
-                };
-
-                this.init();
-            }
-
-            init() {
-                this.setupEventListeners();
-                this.loadProgram('increment');
-                this.updateDisplay();
-            }
-
-            setupEventListeners() {
-                // Program selection
-                document.querySelectorAll('.program-option').forEach(option => {
-                    option.addEventListener('click', (e) => {
-                        this.selectProgram(e.currentTarget);
-                    });
-                });
-
-                // Control buttons
-                document.getElementById('step-btn').addEventListener('click', () => this.step());
-                document.getElementById('run-btn').addEventListener('click', () => this.run());
-                document.getElementById('stop-btn').addEventListener('click', () => this.stop());
-                document.getElementById('reset-btn').addEventListener('click', () => this.reset());
-
-                // Speed control
-                document.getElementById('speed-slider').addEventListener('input', (e) => {
-                    this.setSpeed(parseInt(e.target.value));
-                });
-            }
-
-            selectProgram(element) {
-                // Update UI
-                document.querySelectorAll('.program-option').forEach(el => {
-                    el.classList.remove('active');
-                });
-                element.classList.add('active');
-
-                // Load program
-                const programName = element.dataset.program;
-                this.loadProgram(programName);
-                this.updateAnalysis(programName);
-            }
-
-            loadProgram(programName) {
-                const programData = this.programs[programName];
-                this.program = [...programData.program];
-                this.registers = [...programData.initial];
-                this.pc = 0;
-                this.stepCount = 0;
-                this.running = false;
-                this.highlightedRegister = -1;
-                this.updateDisplay();
-            }
-
-            step() {
-                if (this.pc >= this.program.length) {
-                    this.halt();
-                    return false;
-                }
-
-                if (this.stepCount >= this.maxSteps) {
-                    this.halt();
-                    return false;
-                }
-
-                const instruction = this.program[this.pc];
-                this.executeInstruction(instruction);
-                this.stepCount++;
-                this.updateDisplay();
-                return true;
+  </form>
+
+  <div class="output" id="output" aria-live="polite"></div>
+  <p class="note">Syntax: use one instruction per line. <code>INC R0</code> optionally accepts <code>→ label</code> to jump after
+    incrementing. <code>DEC R1 → a / b</code> decrements <code>R1</code> if possible and jumps to instruction <code>a</code> when
+    it succeeds; if the register is zero it jumps to <code>b</code> (or the next instruction if omitted). Instructions are numbered
+    starting at 1.</p>
+
+  <script>
+    (function() {
+      const PRESETS = {
+        increment: {
+          registers: '0,0',
+          program: 'INC R0\nINC R0\nINC R0\nHALT'
+        },
+        addition: {
+          registers: '0,4',
+          program: 'DEC R1 → 2 / 3\nINC R0 → 1\nHALT'
+        },
+        loop: {
+          registers: '1,2',
+          program: 'DEC R1 → 2 / 5\nDEC R0 → 3 / 4\nINC R2 → 1\nINC R0 → 1\nHALT'
+        }
+      };
+
+      const presetSelect = document.getElementById('preset-select');
+      const registerInput = document.getElementById('register-input');
+      const stepsInput = document.getElementById('steps-input');
+      const programInput = document.getElementById('program-input');
+      const output = document.getElementById('output');
+      const controls = document.getElementById('controls');
+      const clearButton = document.getElementById('clear-button');
+
+      function parseRegisters(text) {
+        return text.split(',').map(v => Number(v.trim()) || 0);
+      }
+
+      function parseProgram(text) {
+        const lines = text.split(/\r?\n/);
+        const program = [];
+        for (const rawLine of lines) {
+          const line = rawLine.trim();
+          if (!line || line.startsWith('#')) continue;
+          if (/^HALT$/i.test(line)) {
+            program.push({ type: 'halt', text: 'HALT' });
+            continue;
+          }
+          let match = line.match(/^INC\s+R(\d+)(?:\s*→\s*(\d+))?$/i);
+          if (match) {
+            const register = Number(match[1]);
+            const target = match[2] ? Number(match[2]) : null;
+            program.push({ type: 'inc', register, target, text: line.toUpperCase() });
+            continue;
+          }
+          match = line.match(/^DEC\s+R(\d+)(?:\s*→\s*(\d+)(?:\s*/\s*(\d+))?)?$/i);
+          if (match) {
+            const register = Number(match[1]);
+            const positive = match[2] ? Number(match[2]) : null;
+            const zero = match[3] ? Number(match[3]) : null;
+            program.push({ type: 'dec', register, positive, zero, text: line.toUpperCase() });
+          }
+        }
+        return program;
+      }
+
+      function describeRegisters(registers) {
+        return registers.map((value, index) => `R${index}=${value}`).join(' ');
+      }
+
+      function execute(program, registers, maxSteps) {
+        const history = [];
+        const regs = registers.slice();
+        let pc = 0;
+        for (let step = 1; step <= maxSteps; step++) {
+          if (pc < 0 || pc >= program.length) {
+            history.push({ step, instruction: 'HALT (no instruction)', registers: regs.slice() });
+            break;
+          }
+          const instruction = program[pc];
+          history.push({ step, instruction: instruction.text, registers: regs.slice() });
+          if (instruction.type === 'halt') {
+            break;
+          }
+          if (instruction.type === 'inc') {
+            const reg = instruction.register;
+            if (!Number.isFinite(reg) || reg < 0) break;
+            if (!Number.isFinite(regs[reg])) regs[reg] = 0;
+            regs[reg] += 1;
+            if (instruction.target) {
+              pc = instruction.target - 1;
+            } else {
+              pc += 1;
             }
-
-            executeInstruction(instruction) {
-                const parts = instruction.split(' ');
-                const cmd = parts[0];
-                
-                // Reset register highlighting
-                this.highlightedRegister = -1;
-
-                switch (cmd) {
-                    case 'INC':
-                        const incReg = parseInt(parts[1].substring(1));
-                        this.registers[incReg]++;
-                        this.highlightedRegister = incReg;
-                        this.pc++;
-                        break;
-
-                    case 'DEC':
-                        const decReg = parseInt(parts[1].substring(1));
-                        const jumpTarget = parseInt(parts[2]) - 1; // Convert to 0-based
-                        this.highlightedRegister = decReg;
-                        if (this.registers[decReg] > 0) {
-                            this.registers[decReg]--;
-                            this.pc++;
-                        } else {
-                            this.pc = jumpTarget;
-                        }
-                        break;
-
-                    case 'HALT':
-                        this.halt();
-                        return;
-                }
+            continue;
+          }
+          if (instruction.type === 'dec') {
+            const reg = instruction.register;
+            if (!Number.isFinite(reg) || reg < 0) break;
+            if (!Number.isFinite(regs[reg])) regs[reg] = 0;
+            if (regs[reg] > 0) {
+              regs[reg] -= 1;
+              pc = instruction.positive ? instruction.positive - 1 : pc + 1;
+            } else {
+              pc = instruction.zero ? instruction.zero - 1 : pc + 1;
             }
-
-            run() {
-                if (this.running) return;
-                
-                this.running = true;
-                document.getElementById('run-btn').disabled = true;
-                document.getElementById('stop-btn').disabled = false;
-                document.getElementById('run-btn').classList.add('generating');
-                
-                const executeStep = () => {
-                    if (!this.running) return;
-                    
-                    if (!this.step()) {
-                        this.stop();
-                        return;
-                    }
-                    
-                    this.intervalId = setTimeout(executeStep, this.speed);
-                };
-                
-                executeStep();
-            }
-
-            stop() {
-                this.running = false;
-                if (this.intervalId) {
-                    clearTimeout(this.intervalId);
-                    this.intervalId = null;
-                }
-                document.getElementById('run-btn').disabled = false;
-                document.getElementById('stop-btn').disabled = true;
-                document.getElementById('run-btn').classList.remove('generating');
-                this.updateDisplay();
-            }
-
-            halt() {
-                this.running = false;
-                if (this.intervalId) {
-                    clearTimeout(this.intervalId);
-                    this.intervalId = null;
-                }
-                document.getElementById('run-btn').disabled = false;
-                document.getElementById('stop-btn').disabled = true;
-                document.getElementById('run-btn').classList.remove('generating');
-                this.updateDisplay();
-            }
-
-            reset() {
-                this.stop();
-                // Get current program name
-                const activeProgram = document.querySelector('.program-option.active');
-                if (activeProgram) {
-                    this.loadProgram(activeProgram.dataset.program);
-                }
-            }
-
-            setSpeed(level) {
-                this.speed = Math.max(50, 550 - level * 50); // 500ms to 50ms
-                document.getElementById('speed-value').textContent = level;
-            }
-
-            updateDisplay() {
-                this.updateRegisters();
-                this.updateProgram();
-                this.updateStatus();
-            }
-
-            updateRegisters() {
-                for (let i = 0; i < 3; i++) {
-                    const registerEl = document.getElementById(`register-${i}`);
-                    const valueEl = registerEl.querySelector('.register-value');
-                    valueEl.textContent = this.registers[i];
-                    
-                    // Highlight register if it was just modified
-                    if (i === this.highlightedRegister) {
-                        registerEl.classList.add('highlight');
-                        setTimeout(() => {
-                            registerEl.classList.remove('highlight');
-                        }, 500);
-                    }
-                }
-            }
-
-            updateProgram() {
-                const programDisplay = document.getElementById('program-display');
-                programDisplay.innerHTML = '';
-                
-                this.program.forEach((instruction, index) => {
-                    const div = document.createElement('div');
-                    div.className = 'instruction' + (index === this.pc ? ' current' : '');
-                    
-                    const numSpan = document.createElement('span');
-                    numSpan.className = 'instruction-num';
-                    numSpan.textContent = `${index + 1}:`;
-                    
-                    const textSpan = document.createElement('span');
-                    textSpan.className = 'instruction-text';
-                    textSpan.textContent = instruction;
-                    
-                    div.appendChild(numSpan);
-                    div.appendChild(textSpan);
-                    programDisplay.appendChild(div);
-                });
-            }
-
-            updateStatus() {
-                document.getElementById('pc-value').textContent = this.pc + 1;
-                document.getElementById('steps-value').textContent = this.stepCount;
-                
-                const statusEl = document.getElementById('status-value');
-                const currentInstrEl = document.getElementById('current-instruction');
-                
-                if (this.running) {
-                    statusEl.textContent = '运行中';
-                    statusEl.className = 'status-value running';
-                } else if (this.pc >= this.program.length) {
-                    statusEl.textContent = '已停止';
-                    statusEl.className = 'status-value halted';
-                } else {
-                    statusEl.textContent = '就绪';
-                    statusEl.className = 'status-value';
-                }
-                
-                if (this.pc < this.program.length) {
-                    currentInstrEl.textContent = this.program[this.pc];
-                } else {
-                    currentInstrEl.textContent = 'HALT';
-                }
-            }
-
-            updateAnalysis(programName) {
-                const analysisText = document.getElementById('analysis-text');
-                const programData = this.programs[programName];
-                if (programData && programData.description) {
-                    analysisText.textContent = programData.description;
-                }
-            }
-        }
-
-        // Initialize when DOM is loaded
-        document.addEventListener('DOMContentLoaded', () => {
-            new RegisterMachine();
-        });
-    </script>
+            continue;
+          }
+          pc += 1;
+        }
+        return history;
+      }
+
+      function render(history) {
+        if (!history.length) {
+          output.innerHTML = '<p>No program instructions were recognised.</p>';
+          return;
+        }
+        const table = document.createElement('table');
+        table.innerHTML = '<thead><tr><th>Step</th><th>Instruction</th><th>Registers</th></tr></thead>';
+        const tbody = document.createElement('tbody');
+        for (const row of history) {
+          const tr = document.createElement('tr');
+          const stepCell = document.createElement('td');
+          stepCell.textContent = row.step;
+          const instCell = document.createElement('td');
+          instCell.className = 'code';
+          instCell.textContent = row.instruction;
+          const regCell = document.createElement('td');
+          regCell.className = 'code';
+          regCell.textContent = describeRegisters(row.registers);
+          tr.append(stepCell, instCell, regCell);
+          tbody.appendChild(tr);
+        }
+        table.appendChild(tbody);
+        output.innerHTML = '';
+        output.appendChild(table);
+      }
+
+      presetSelect.addEventListener('change', () => {
+        const preset = presetSelect.value;
+        if (preset === 'custom') return;
+        const data = PRESETS[preset];
+        registerInput.value = data.registers;
+        programInput.value = data.program;
+      });
+
+      clearButton.addEventListener('click', () => {
+        output.innerHTML = '';
+      });
+
+      controls.addEventListener('submit', (event) => {
+        event.preventDefault();
+        const registers = parseRegisters(registerInput.value);
+        const steps = Math.max(1, Math.min(2000, parseInt(stepsInput.value, 10) || 1));
+        stepsInput.value = steps;
+        const program = parseProgram(programInput.value);
+        render(execute(program, registers, steps));
+      });
+
+      controls.dispatchEvent(new Event('submit'));
+    })();
+  </script>
 </body>
-
-</html>
\ No newline at end of file
+</html>
diff --git a/demos/chapter3/sequential-substitution-demo.html b/demos/chapter3/sequential-substitution-demo.html
index df5dd1bc6f980347f3d2fd49962a7f41d9724463..d35202f5af74acc345d60532ced275213965f249 100644
--- a/demos/chapter3/sequential-substitution-demo.html
+++ b/demos/chapter3/sequential-substitution-demo.html
@@ -1,1136 +1,235 @@
 <!DOCTYPE html>
 <html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Sequential Substitution Systems Demo - NKS Explorer</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%);
-            color: #e0e0e0;
-            min-height: 100vh;
-            padding: 20px;
-        }
-
-        .container {
-            max-width: 1400px;
-            margin: 0 auto;
-        }
-
-        .header {
-            text-align: center;
-            margin-bottom: 30px;
-            padding: 20px;
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .header h1 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            font-size: 2.5em;
-            font-weight: 700;
-        }
-
-        .header p {
-            color: #b8b8b8;
-            font-size: 1.1em;
-            line-height: 1.6;
-        }
-
-        .controls {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
-            gap: 20px;
-            margin-bottom: 30px;
-        }
-
-        .control-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .control-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-            font-size: 1.2em;
-        }
-
-        .control-group {
-            margin-bottom: 15px;
-        }
-
-        label {
-            display: block;
-            color: #d0d0d0;
-            margin-bottom: 5px;
-            font-weight: 500;
-        }
-
-        select, input[type="range"], input[type="text"], button, textarea {
-            width: 100%;
-            padding: 10px;
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            background: rgba(0, 0, 0, 0.3);
-            color: #e0e0e0;
-            font-size: 14px;
-        }
-
-        textarea {
-            resize: vertical;
-            height: 80px;
-            font-family: 'Courier New', monospace;
-        }
-
-        button {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.2), rgba(255, 215, 0, 0.3));
-            cursor: pointer;
-            transition: all 0.3s ease;
-            margin: 5px 0;
-        }
-
-        button:hover {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.3), rgba(255, 215, 0, 0.4));
-            transform: translateY(-2px);
-            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.2);
-        }
-
-        .visualization-container {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            text-align: center;
-            margin-bottom: 20px;
-        }
-
-        .execution-display {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-bottom: 15px;
-            max-height: 400px;
-            overflow-y: auto;
-        }
-
-        .step-entry {
-            display: flex;
-            align-items: center;
-            margin: 8px 0;
-            font-family: 'Courier New', monospace;
-            font-size: 14px;
-            padding: 8px;
-            border-radius: 5px;
-            background: rgba(255, 255, 255, 0.02);
-            transition: background 0.3s ease;
-        }
-
-        .step-entry.current {
-            background: rgba(255, 215, 0, 0.1);
-            border-left: 3px solid #ffd700;
-        }
-
-        .step-number {
-            color: #ffd700;
-            font-weight: bold;
-            min-width: 50px;
-            margin-right: 15px;
-        }
-
-        .step-content {
-            flex: 1;
-            display: flex;
-            flex-direction: column;
-            gap: 5px;
-        }
-
-        .string-state {
-            word-break: break-all;
-            color: #e0e0e0;
-        }
-
-        .rule-applied {
-            color: #4ecdc4;
-            font-size: 12px;
-        }
-
-        .pattern-match {
-            color: #ff6b6b;
-            font-size: 12px;
-        }
-
-        .no-match {
-            color: #888;
-            font-style: italic;
-            font-size: 12px;
-        }
-
-        .symbol {
-            display: inline-block;
-            margin: 0 1px;
-            padding: 2px 4px;
-            border-radius: 3px;
-        }
-
-        .symbol-A { background: #ff6b6b; color: white; }
-        .symbol-B { background: #4ecdc4; color: white; }
-        .symbol-C { background: #45b7d1; color: white; }
-        .symbol-0 { background: #ffffff; color: black; }
-        .symbol-1 { background: #96ceb4; color: white; }
-        .symbol-2 { background: #ffd93d; color: black; }
-        .symbol-X { background: #ff8c94; color: white; }
-        .symbol-Y { background: #a8e6cf; color: black; }
-
-        .highlighted-match {
-            background: #ff6b6b !important;
-            color: white !important;
-            animation: pulse 0.5s ease-in-out;
-        }
-
-        @keyframes pulse {
-            0% { transform: scale(1); }
-            50% { transform: scale(1.2); }
-            100% { transform: scale(1); }
-        }
-
-        .rules-display {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-bottom: 15px;
-        }
-
-        .rules-display h4 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            text-align: center;
-        }
-
-        .rule-priority-list {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
-            gap: 10px;
-        }
-
-        .rule-item {
-            background: rgba(255, 215, 0, 0.1);
-            border-radius: 5px;
-            padding: 10px;
-            font-family: 'Courier New', monospace;
-            text-align: center;
-            position: relative;
-        }
-
-        .rule-item.active {
-            background: rgba(255, 215, 0, 0.2);
-            border: 2px solid #ffd700;
-        }
-
-        .rule-priority {
-            position: absolute;
-            top: -8px;
-            left: -8px;
-            background: #ffd700;
-            color: black;
-            border-radius: 50%;
-            width: 20px;
-            height: 20px;
-            display: flex;
-            align-items: center;
-            justify-content: center;
-            font-size: 12px;
-            font-weight: bold;
-        }
-
-        .rule-arrow {
-            color: #ffd700;
-            margin: 0 10px;
-        }
-
-        .causal-network {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-top: 15px;
-            max-height: 300px;
-            overflow: auto;
-        }
-
-        .causal-network h4 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            text-align: center;
-        }
-
-        .network-node {
-            display: inline-block;
-            background: rgba(255, 215, 0, 0.2);
-            border: 2px solid #ffd700;
-            border-radius: 50%;
-            width: 40px;
-            height: 40px;
-            display: flex;
-            align-items: center;
-            justify-content: center;
-            margin: 5px;
-            font-size: 12px;
-            font-weight: bold;
-        }
-
-        .network-edge {
-            display: inline-block;
-            color: #4ecdc4;
-            margin: 0 5px;
-        }
-
-        .comparison-panel {
-            display: grid;
-            grid-template-columns: 1fr 1fr;
-            gap: 20px;
-            margin-top: 20px;
-        }
-
-        .comparison-section {
-            background: rgba(255, 255, 255, 0.03);
-            border-radius: 10px;
-            padding: 15px;
-        }
-
-        .comparison-section h4 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            text-align: center;
-        }
-
-        .custom-rules-editor {
-            display: none;
-            background: rgba(0, 0, 0, 0.2);
-            border-radius: 10px;
-            padding: 15px;
-            margin-top: 15px;
-        }
-
-        .info-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .info-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-        }
-
-        .info-panel p {
-            color: #d0d0d0;
-            line-height: 1.6;
-            margin-bottom: 10px;
-        }
-
-        .stats {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
-            gap: 15px;
-            margin-top: 15px;
-        }
-
-        .stat-item {
-            text-align: center;
-            padding: 10px;
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 8px;
-        }
-
-        .stat-value {
-            font-size: 1.5em;
-            font-weight: bold;
-            color: #ffd700;
-        }
-
-        .stat-label {
-            font-size: 0.9em;
-            color: #b8b8b8;
-        }
-
-        @media (max-width: 768px) {
-            .controls {
-                grid-template-columns: 1fr;
-            }
-            
-            .header h1 {
-                font-size: 2em;
-            }
-            
-            .rule-priority-list {
-                grid-template-columns: 1fr;
-            }
-            
-            .comparison-panel {
-                grid-template-columns: 1fr;
-            }
-        }
-    </style>
+  <meta charset="utf-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <title>NKS · Sequential Substitution Systems</title>
+  <style>
+    :root {
+      color-scheme: light;
+      font-family: "Helvetica Neue", Arial, system-ui, sans-serif;
+    }
+    body {
+      margin: 24px;
+      background: #fdfdfb;
+      color: #1f1b14;
+      max-width: 900px;
+    }
+    h1 { font-size: 1.9rem; margin-bottom: 0.4rem; }
+    p.lead { font-size: 1.05rem; line-height: 1.55; margin-bottom: 1.2rem; }
+    form {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
+      gap: 1rem;
+      background: #fff;
+      padding: 1rem;
+      border: 1px solid #d8d2c6;
+      border-radius: 8px;
+      box-shadow: 0 4px 12px rgba(31,27,20,0.05);
+      margin-bottom: 1.5rem;
+    }
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 0.35rem;
+      font-size: 0.9rem;
+      color: #5d574a;
+    }
+    select,
+    input[type="number"],
+    input[type="text"],
+    textarea,
+    button {
+      font: inherit;
+      padding: 0.45rem 0.55rem;
+      border-radius: 6px;
+      border: 1px solid #c6bfab;
+      background: #fffef9;
+      color: inherit;
+    }
+    textarea {
+      min-height: 96px;
+      resize: vertical;
+      font-family: 'IBM Plex Mono', 'SFMono-Regular', ui-monospace, monospace;
+    }
+    select:focus,
+    input:focus,
+    textarea:focus {
+      outline: 2px solid #a18f62;
+      outline-offset: 1px;
+    }
+    button {
+      cursor: pointer;
+      background: #d7c698;
+      border-color: #c9b379;
+      color: #2f291e;
+      transition: background 0.15s ease;
+    }
+    button:hover { background: #e7d7a7; }
+    button.secondary {
+      background: #f3efe3;
+      border-color: #cfc6b4;
+    }
+    .output {
+      background: #ffffff;
+      border: 1px solid #d8d2c6;
+      border-radius: 8px;
+      padding: 1rem 1.25rem;
+      box-shadow: 0 4px 12px rgba(31,27,20,0.04);
+    }
+    table { width: 100%; border-collapse: collapse; font-size: 0.9rem; }
+    th, td { border: 1px solid #e7e0d0; padding: 0.35rem 0.5rem; }
+    th { background: #f4efe2; font-weight: 600; text-align: left; }
+    td.code { font-family: 'IBM Plex Mono', 'SFMono-Regular', ui-monospace, monospace; word-break: break-all; }
+    .note { font-size: 0.85rem; color: #655f52; margin-top: 0.8rem; }
+    @media (max-width: 600px) { body { margin: 16px; } form { grid-template-columns: 1fr; } }
+  </style>
 </head>
 <body>
-    <div class="container">
-        <div class="header">
-            <h1>Sequential Substitution Systems Demo</h1>
-            <p>Explore Wolfram's sequential substitution systems from "A New Kind of Science" (Pages 88-89)<br>
-               One-at-a-time string rewriting with causal network generation and multiway analysis</p>
-        </div>
-
-        <div class="controls">
-            <div class="control-panel">
-                <h3>System Selection</h3>
-                <div class="control-group">
-                    <label for="systemPreset">Predefined Systems:</label>
-                    <select id="systemPreset">
-                        <option value="nks88">NKS Page 88 (A→AB, BA→A)</option>
-                        <option value="nks89">NKS Page 89 (AB→B, BA→A)</option>
-                        <option value="simple">Simple (A→B, B→A)</option>
-                        <option value="complex">Complex Growth (A→BC, B→A, C→AB)</option>
-                        <option value="competing">Competing (AA→B, BB→A, AB→AA)</option>
-                        <option value="cyclic">Cyclic (A→B, B→C, C→A)</option>
-                        <option value="tag">Tag System (000→00101, 101→0)</option>
-                        <option value="custom">Custom System</option>
-                    </select>
-                </div>
-                
-                <div class="custom-rules-editor" id="customRulesEditor">
-                    <label for="customRules">Custom Rules (priority order, format: AB→C):</label>
-                    <textarea id="customRules" placeholder="A→AB&#10;BA→A&#10;B→BB"></textarea>
-                    <button id="applyCustom">Apply Custom Rules</button>
-                </div>
-            </div>
-
-            <div class="control-panel">
-                <h3>Execution Control</h3>
-                <div class="control-group">
-                    <label for="speed">Animation Speed:</label>
-                    <input type="range" id="speed" min="200" max="3000" value="1000">
-                    <span id="speedValue">1000ms</span>
-                </div>
-                <div class="control-group">
-                    <label for="maxSteps">Max Steps:</label>
-                    <input type="range" id="maxSteps" min="10" max="100" value="30">
-                    <span id="maxStepsValue">30</span>
-                </div>
-                <div class="control-group">
-                    <label for="scanMode">Scanning Mode:</label>
-                    <select id="scanMode">
-                        <option value="leftright">Left to Right</option>
-                        <option value="rightleft">Right to Left</option>
-                        <option value="random">Random Position</option>
-                    </select>
-                </div>
-                <button id="startBtn">Start Evolution</button>
-                <button id="stopBtn">Stop Evolution</button>
-                <button id="stepBtn">Single Step</button>
-                <button id="resetBtn">Reset System</button>
-            </div>
-
-            <div class="control-panel">
-                <h3>Initial Configuration</h3>
-                <div class="control-group">
-                    <label for="initialString">Starting String:</label>
-                    <input type="text" id="initialString" value="AABBA" placeholder="e.g., AAB, 000101">
-                </div>
-                <div class="control-group">
-                    <label for="viewMode">Analysis Mode:</label>
-                    <select id="viewMode">
-                        <option value="sequential">Sequential Evolution</option>
-                        <option value="comparison">Sequential vs Parallel</option>
-                        <option value="causal">Causal Network</option>
-                        <option value="multiway">Multiway System</option>
-                    </select>
-                </div>
-            </div>
-        </div>
-
-        <div class="visualization-container">
-            <h3 style="color: #ffd700; margin-bottom: 15px;">Sequential Substitution Evolution</h3>
-            
-            <div class="rules-display" id="rulesDisplay">
-                <h4>Rules (Applied in Priority Order)</h4>
-                <div class="rule-priority-list" id="rulePriorityList"></div>
-            </div>
-
-            <div class="execution-display" id="executionDisplay"></div>
-            
-            <div class="comparison-panel" id="comparisonPanel" style="display: none;">
-                <div class="comparison-section">
-                    <h4>Sequential Evolution</h4>
-                    <div id="sequentialResults"></div>
-                </div>
-                <div class="comparison-section">
-                    <h4>Parallel Evolution</h4>
-                    <div id="parallelResults"></div>
-                </div>
-            </div>
-
-            <div class="causal-network" id="causalNetwork" style="display: none;">
-                <h4>Causal Network</h4>
-                <div id="networkDisplay"></div>
-            </div>
-        </div>
-
-        <div class="info-panel">
-            <h3>About Sequential Substitution Systems</h3>
-            <p>
-                Sequential substitution systems, explored by Stephen Wolfram in "A New Kind of Science" (pages 88-89), 
-                differ from parallel systems by applying <strong>only one rule at a time</strong>. The system scans 
-                the string from left to right, applies the first matching rule found, and then repeats. This creates 
-                fundamentally different dynamics than parallel systems.
-            </p>
-            <p>
-                These systems generate <strong>causal networks</strong> where each substitution event becomes a node, 
-                connected to events that causally influence each other. This forms the foundation for Wolfram's work on 
-                <strong>multiway systems</strong> and his theory of fundamental physics, where the universe might operate 
-                as a giant sequential substitution system.
-            </p>
-
-            <div class="stats">
-                <div class="stat-item">
-                    <div class="stat-value" id="currentStep">0</div>
-                    <div class="stat-label">Current Step</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="stringLength">5</div>
-                    <div class="stat-label">String Length</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="rulesApplied">0</div>
-                    <div class="stat-label">Rules Applied</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="activeRule">None</div>
-                    <div class="stat-label">Last Rule Used</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="causalEvents">0</div>
-                    <div class="stat-label">Causal Events</div>
-                </div>
-            </div>
-        </div>
+  <h1>Sequential Substitution Systems</h1>
+  <p class="lead">Implements the Chapter 3 sequential substitution experiments from <em>A New Kind of Science</em>.
+    Rules are applied to the left-most occurrence of any listed pattern; if no rule matches, the system halts.</p>
+
+  <form id="controls" autocomplete="off">
+    <label>Preset system
+      <select id="preset-select">
+        <option value="nks88">NKS p.88 — A → AB, BA → A</option>
+        <option value="nks89">NKS p.89 — AB → B, BA → A</option>
+        <option value="simple">Simple swap — A → B, B → A</option>
+        <option value="cyclic">Cyclic — A → B, B → C, C → A</option>
+        <option value="custom">Custom rules…</option>
+      </select>
+    </label>
+    <label>Starting string
+      <input type="text" id="seed-input" value="A" spellcheck="false">
+    </label>
+    <label>Maximum steps
+      <input type="number" id="steps-input" min="1" max="400" value="60">
+    </label>
+    <label>Rules (ordered, one per line)
+      <textarea id="rules-input">A→AB
+BA→A</textarea>
+    </label>
+    <div style="display:flex; gap:0.5rem; align-items:center;">
+      <button type="submit">Run sequential system</button>
+      <button type="button" id="clear-button" class="secondary">Clear output</button>
     </div>
-
-    <script>
-        class SequentialSubstitutionSystem {
-            constructor() {
-                this.rules = [];
-                this.initialString = "AABBA";
-                this.currentString = this.initialString;
-                this.executionHistory = [];
-                this.causalNetwork = [];
-                this.currentStep = 0;
-                this.isRunning = false;
-                this.animationId = null;
-                this.maxSteps = 30;
-                this.scanMode = "leftright";
-                this.viewMode = "sequential";
-                
-                this.initializeSystem();
-            }
-
-            initializeSystem() {
-                // Default NKS Page 88 system
-                this.rules = [
-                    { pattern: "A", replacement: "AB", priority: 1 },
-                    { pattern: "BA", replacement: "A", priority: 2 }
-                ];
-                
-                this.reset();
-                this.updateRulesDisplay();
-            }
-
-            setSystem(preset) {
-                switch (preset) {
-                    case 'nks88':
-                        this.rules = [
-                            { pattern: "A", replacement: "AB", priority: 1 },
-                            { pattern: "BA", replacement: "A", priority: 2 }
-                        ];
-                        this.initialString = "AABBA";
-                        break;
-                    case 'nks89':
-                        this.rules = [
-                            { pattern: "AB", replacement: "B", priority: 1 },
-                            { pattern: "BA", replacement: "A", priority: 2 }
-                        ];
-                        this.initialString = "ABBA";
-                        break;
-                    case 'simple':
-                        this.rules = [
-                            { pattern: "A", replacement: "B", priority: 1 },
-                            { pattern: "B", replacement: "A", priority: 2 }
-                        ];
-                        this.initialString = "ABAB";
-                        break;
-                    case 'complex':
-                        this.rules = [
-                            { pattern: "A", replacement: "BC", priority: 1 },
-                            { pattern: "B", replacement: "A", priority: 2 },
-                            { pattern: "C", replacement: "AB", priority: 3 }
-                        ];
-                        this.initialString = "ABC";
-                        break;
-                    case 'competing':
-                        this.rules = [
-                            { pattern: "AA", replacement: "B", priority: 1 },
-                            { pattern: "BB", replacement: "A", priority: 2 },
-                            { pattern: "AB", replacement: "AA", priority: 3 }
-                        ];
-                        this.initialString = "AABB";
-                        break;
-                    case 'cyclic':
-                        this.rules = [
-                            { pattern: "A", replacement: "B", priority: 1 },
-                            { pattern: "B", replacement: "C", priority: 2 },
-                            { pattern: "C", replacement: "A", priority: 3 }
-                        ];
-                        this.initialString = "ABC";
-                        break;
-                    case 'tag':
-                        this.rules = [
-                            { pattern: "000", replacement: "00101", priority: 1 },
-                            { pattern: "101", replacement: "0", priority: 2 }
-                        ];
-                        this.initialString = "000101";
-                        break;
-                }
-                
-                this.updateRulesDisplay();
-                this.reset();
-            }
-
-            setCustomRules(rulesText) {
-                const rules = [];
-                const lines = rulesText.split('\n');
-                
-                let priority = 1;
-                for (const line of lines) {
-                    const trimmed = line.trim();
-                    if (trimmed && trimmed.includes('→')) {
-                        const [left, right] = trimmed.split('→');
-                        if (left && right) {
-                            rules.push({
-                                pattern: left.trim(),
-                                replacement: right.trim(),
-                                priority: priority++
-                            });
-                        }
-                    }
-                }
-                
-                if (rules.length > 0) {
-                    this.rules = rules;
-                    this.updateRulesDisplay();
-                    this.reset();
-                    return true;
-                }
-                return false;
-            }
-
-            reset() {
-                this.stop();
-                this.currentString = this.initialString;
-                this.executionHistory = [{
-                    step: 0,
-                    string: this.currentString,
-                    ruleApplied: null,
-                    matchPosition: -1,
-                    matchLength: 0
-                }];
-                this.causalNetwork = [];
-                this.currentStep = 0;
-                this.updateDisplay();
-                this.updateStats();
-            }
-
-            findNextMatch() {
-                // Sort rules by priority
-                const sortedRules = [...this.rules].sort((a, b) => a.priority - b.priority);
-                
-                for (const rule of sortedRules) {
-                    let position;
-                    
-                    switch (this.scanMode) {
-                        case 'leftright':
-                            position = this.currentString.indexOf(rule.pattern);
-                            break;
-                        case 'rightleft':
-                            position = this.currentString.lastIndexOf(rule.pattern);
-                            break;
-                        case 'random':
-                            const matches = [];
-                            let pos = this.currentString.indexOf(rule.pattern);
-                            while (pos !== -1) {
-                                matches.push(pos);
-                                pos = this.currentString.indexOf(rule.pattern, pos + 1);
-                            }
-                            position = matches.length > 0 ? matches[Math.floor(Math.random() * matches.length)] : -1;
-                            break;
-                    }
-                    
-                    if (position !== -1) {
-                        return {
-                            rule: rule,
-                            position: position,
-                            matchLength: rule.pattern.length
-                        };
-                    }
-                }
-                
-                return null; // No matches found
-            }
-
-            step() {
-                if (this.currentStep >= this.maxSteps) {
-                    this.stop();
-                    return false;
-                }
-
-                const match = this.findNextMatch();
-                
-                if (!match) {
-                    // No more matches - system halts
-                    this.executionHistory.push({
-                        step: this.currentStep + 1,
-                        string: this.currentString,
-                        ruleApplied: null,
-                        matchPosition: -1,
-                        matchLength: 0,
-                        halted: true
-                    });
-                    this.stop();
-                    this.updateDisplay();
-                    return false;
-                }
-                
-                // Apply the substitution
-                const newString = 
-                    this.currentString.substring(0, match.position) +
-                    match.rule.replacement +
-                    this.currentString.substring(match.position + match.matchLength);
-                
-                this.currentStep++;
-                this.currentString = newString;
-                
-                // Record execution step
-                this.executionHistory.push({
-                    step: this.currentStep,
-                    string: this.currentString,
-                    ruleApplied: match.rule,
-                    matchPosition: match.position,
-                    matchLength: match.matchLength
-                });
-                
-                // Add to causal network
-                this.causalNetwork.push({
-                    event: this.currentStep,
-                    rule: match.rule.pattern + '→' + match.rule.replacement,
-                    position: match.position,
-                    causedBy: this.currentStep - 1
-                });
-                
-                this.updateDisplay();
-                this.updateStats();
-                
-                return true;
-            }
-
-            updateRulesDisplay() {
-                const rulePriorityList = document.getElementById('rulePriorityList');
-                rulePriorityList.innerHTML = '';
-                
-                // Sort by priority for display
-                const sortedRules = [...this.rules].sort((a, b) => a.priority - b.priority);
-                
-                sortedRules.forEach((rule, index) => {
-                    const ruleItem = document.createElement('div');
-                    ruleItem.className = 'rule-item';
-                    ruleItem.id = `rule-${rule.priority}`;
-                    
-                    const priority = document.createElement('div');
-                    priority.className = 'rule-priority';
-                    priority.textContent = rule.priority;
-                    
-                    const content = document.createElement('div');
-                    content.innerHTML = `
-                        ${this.formatString(rule.pattern)}
-                        <span class="rule-arrow">→</span>
-                        ${this.formatString(rule.replacement)}
-                    `;
-                    
-                    ruleItem.appendChild(priority);
-                    ruleItem.appendChild(content);
-                    rulePriorityList.appendChild(ruleItem);
-                });
-            }
-
-            formatString(str) {
-                return str.split('').map(char => 
-                    `<span class="symbol symbol-${char}">${char}</span>`
-                ).join('');
-            }
-
-            highlightPattern(str, position, length, highlight = false) {
-                let result = '';
-                for (let i = 0; i < str.length; i++) {
-                    const char = str[i];
-                    const className = highlight && i >= position && i < position + length ? 
-                        `symbol symbol-${char} highlighted-match` : 
-                        `symbol symbol-${char}`;
-                    result += `<span class="${className}">${char}</span>`;
-                }
-                return result;
-            }
-
-            updateDisplay() {
-                switch (this.viewMode) {
-                    case 'sequential':
-                        this.updateSequentialDisplay();
-                        break;
-                    case 'comparison':
-                        this.updateComparisonDisplay();
-                        break;
-                    case 'causal':
-                        this.updateCausalDisplay();
-                        break;
-                    case 'multiway':
-                        this.updateMultiwayDisplay();
-                        break;
-                }
-            }
-
-            updateSequentialDisplay() {
-                const executionDisplay = document.getElementById('executionDisplay');
-                const comparisonPanel = document.getElementById('comparisonPanel');
-                const causalNetwork = document.getElementById('causalNetwork');
-                
-                executionDisplay.style.display = 'block';
-                comparisonPanel.style.display = 'none';
-                causalNetwork.style.display = 'none';
-                
-                // Clear active rule highlighting
-                document.querySelectorAll('.rule-item').forEach(item => {
-                    item.classList.remove('active');
-                });
-                
-                executionDisplay.innerHTML = '';
-                
-                this.executionHistory.forEach((entry, index) => {
-                    const stepEntry = document.createElement('div');
-                    stepEntry.className = 'step-entry';
-                    if (index === this.executionHistory.length - 1) {
-                        stepEntry.classList.add('current');
-                    }
-                    
-                    const stepNumber = document.createElement('div');
-                    stepNumber.className = 'step-number';
-                    stepNumber.textContent = `${entry.step}:`;
-                    
-                    const stepContent = document.createElement('div');
-                    stepContent.className = 'step-content';
-                    
-                    const stringState = document.createElement('div');
-                    stringState.className = 'string-state';
-                    
-                    if (entry.ruleApplied) {
-                        // Highlight the matched pattern in the previous string
-                        const prevEntry = this.executionHistory[index - 1];
-                        if (prevEntry) {
-                            stringState.innerHTML = this.highlightPattern(
-                                prevEntry.string, 
-                                entry.matchPosition, 
-                                entry.matchLength, 
-                                true
-                            ) + ' → ' + this.formatString(entry.string);
-                        } else {
-                            stringState.innerHTML = this.formatString(entry.string);
-                        }
-                        
-                        const ruleApplied = document.createElement('div');
-                        ruleApplied.className = 'rule-applied';
-                        ruleApplied.textContent = `Applied: ${entry.ruleApplied.pattern} → ${entry.ruleApplied.replacement} at position ${entry.matchPosition}`;
-                        stepContent.appendChild(ruleApplied);
-                        
-                        // Highlight active rule
-                        const ruleElement = document.getElementById(`rule-${entry.ruleApplied.priority}`);
-                        if (ruleElement) {
-                            ruleElement.classList.add('active');
-                        }
-                    } else if (entry.halted) {
-                        stringState.innerHTML = this.formatString(entry.string);
-                        const noMatch = document.createElement('div');
-                        noMatch.className = 'no-match';
-                        noMatch.textContent = 'System halted - no matching patterns found';
-                        stepContent.appendChild(noMatch);
-                    } else {
-                        stringState.innerHTML = this.formatString(entry.string);
-                    }
-                    
-                    stepContent.appendChild(stringState);
-                    stepEntry.appendChild(stepNumber);
-                    stepEntry.appendChild(stepContent);
-                    executionDisplay.appendChild(stepEntry);
-                });
-                
-                executionDisplay.scrollTop = executionDisplay.scrollHeight;
-            }
-
-            updateComparisonDisplay() {
-                const executionDisplay = document.getElementById('executionDisplay');
-                const comparisonPanel = document.getElementById('comparisonPanel');
-                const causalNetwork = document.getElementById('causalNetwork');
-                
-                executionDisplay.style.display = 'none';
-                comparisonPanel.style.display = 'grid';
-                causalNetwork.style.display = 'none';
-                
-                // Update sequential results
-                const sequentialResults = document.getElementById('sequentialResults');
-                sequentialResults.innerHTML = '';
-                
-                this.executionHistory.forEach(entry => {
-                    const div = document.createElement('div');
-                    div.style.fontSize = '12px';
-                    div.style.margin = '3px 0';
-                    div.innerHTML = `${entry.step}: ${this.formatString(entry.string)}`;
-                    sequentialResults.appendChild(div);
-                });
-                
-                // Simulate parallel evolution for comparison
-                const parallelResults = document.getElementById('parallelResults');
-                parallelResults.innerHTML = '';
-                
-                const parallelEvolution = this.simulateParallelEvolution();
-                parallelEvolution.forEach((entry, index) => {
-                    const div = document.createElement('div');
-                    div.style.fontSize = '12px';
-                    div.style.margin = '3px 0';
-                    div.innerHTML = `${index}: ${this.formatString(entry)}`;
-                    parallelResults.appendChild(div);
-                });
-            }
-
-            simulateParallelEvolution() {
-                const results = [this.initialString];
-                let current = this.initialString;
-                
-                for (let i = 0; i < Math.min(this.maxSteps, 15); i++) {
-                    let newString = current;
-                    let changed = false;
-                    
-                    // Apply all rules simultaneously
-                    for (const rule of this.rules) {
-                        const regex = new RegExp(rule.pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
-                        if (regex.test(newString)) {
-                            newString = newString.replace(regex, rule.replacement);
-                            changed = true;
-                        }
-                    }
-                    
-                    if (!changed) break;
-                    
-                    current = newString;
-                    results.push(current);
-                }
-                
-                return results;
-            }
-
-            updateCausalDisplay() {
-                const executionDisplay = document.getElementById('executionDisplay');
-                const comparisonPanel = document.getElementById('comparisonPanel');
-                const causalNetwork = document.getElementById('causalNetwork');
-                
-                executionDisplay.style.display = 'none';
-                comparisonPanel.style.display = 'none';
-                causalNetwork.style.display = 'block';
-                
-                const networkDisplay = document.getElementById('networkDisplay');
-                networkDisplay.innerHTML = '';
-                
-                if (this.causalNetwork.length === 0) {
-                    networkDisplay.innerHTML = '<p style="text-align: center; color: #888;">No causal events yet. Run the system to generate the causal network.</p>';
-                    return;
-                }
-                
-                this.causalNetwork.forEach((event, index) => {
-                    const eventDiv = document.createElement('div');
-                    eventDiv.style.margin = '10px 0';
-                    eventDiv.style.display = 'flex';
-                    eventDiv.style.alignItems = 'center';
-                    eventDiv.style.flexWrap = 'wrap';
-                    eventDiv.style.justifyContent = 'center';
-                    
-                    const nodeDiv = document.createElement('div');
-                    nodeDiv.className = 'network-node';
-                    nodeDiv.textContent = event.event;
-                    nodeDiv.title = `Event ${event.event}: ${event.rule} at position ${event.position}`;
-                    
-                    eventDiv.appendChild(nodeDiv);
-                    
-                    if (index < this.causalNetwork.length - 1) {
-                        const edgeDiv = document.createElement('div');
-                        edgeDiv.className = 'network-edge';
-                        edgeDiv.textContent = '→';
-                        eventDiv.appendChild(edgeDiv);
-                    }
-                    
-                    const infoDiv = document.createElement('div');
-                    infoDiv.style.fontSize = '11px';
-                    infoDiv.style.color = '#aaa';
-                    infoDiv.style.marginLeft = '10px';
-                    infoDiv.textContent = `${event.rule} @ pos ${event.position}`;
-                    eventDiv.appendChild(infoDiv);
-                    
-                    networkDisplay.appendChild(eventDiv);
-                });
-            }
-
-            updateMultiwayDisplay() {
-                // Placeholder for multiway system visualization
-                this.updateCausalDisplay();
-            }
-
-            updateStats() {
-                const lastEntry = this.executionHistory[this.executionHistory.length - 1];
-                const activeRule = lastEntry && lastEntry.ruleApplied ? 
-                    `${lastEntry.ruleApplied.pattern}→${lastEntry.ruleApplied.replacement}` : 'None';
-                
-                document.getElementById('currentStep').textContent = this.currentStep;
-                document.getElementById('stringLength').textContent = this.currentString.length;
-                document.getElementById('rulesApplied').textContent = 
-                    this.executionHistory.filter(e => e.ruleApplied).length;
-                document.getElementById('activeRule').textContent = activeRule;
-                document.getElementById('causalEvents').textContent = this.causalNetwork.length;
-            }
-
-            start(speed = 1000) {
-                if (this.isRunning) return;
-                
-                this.isRunning = true;
-                const animate = () => {
-                    if (!this.isRunning) return;
-                    
-                    const canContinue = this.step();
-                    if (!canContinue) {
-                        this.isRunning = false;
-                        return;
-                    }
-                    
-                    this.animationId = setTimeout(animate, speed);
-                };
-                animate();
-            }
-
-            stop() {
-                this.isRunning = false;
-                if (this.animationId) {
-                    clearTimeout(this.animationId);
-                    this.animationId = null;
-                }
-            }
-
-            setViewMode(mode) {
-                this.viewMode = mode;
-                this.updateDisplay();
-            }
-
-            setMaxSteps(max) {
-                this.maxSteps = max;
-            }
-
-            setScanMode(mode) {
-                this.scanMode = mode;
-            }
-
-            setInitialString(str) {
-                this.initialString = str || "AABBA";
-                this.reset();
-            }
-        }
-
-        // Initialize the sequential substitution system
-        const sss = new SequentialSubstitutionSystem();
-
-        // Event listeners
-        document.getElementById('systemPreset').addEventListener('change', (e) => {
-            const preset = e.target.value;
-            const customEditor = document.getElementById('customRulesEditor');
-            
-            if (preset === 'custom') {
-                customEditor.style.display = 'block';
-            } else {
-                customEditor.style.display = 'none';
-                sss.setSystem(preset);
-            }
-        });
-
-        document.getElementById('applyCustom').addEventListener('click', () => {
-            const rulesText = document.getElementById('customRules').value;
-            if (!sss.setCustomRules(rulesText)) {
-                alert('Invalid rule format. Use format: AB→C (one rule per line)');
-            }
-        });
-
-        document.getElementById('speed').addEventListener('input', (e) => {
-            document.getElementById('speedValue').textContent = e.target.value + 'ms';
-        });
-
-        document.getElementById('maxSteps').addEventListener('input', (e) => {
-            const value = parseInt(e.target.value);
-            document.getElementById('maxStepsValue').textContent = value;
-            sss.setMaxSteps(value);
-        });
-
-        document.getElementById('scanMode').addEventListener('change', (e) => {
-            sss.setScanMode(e.target.value);
-        });
-
-        document.getElementById('viewMode').addEventListener('change', (e) => {
-            sss.setViewMode(e.target.value);
-        });
-
-        document.getElementById('initialString').addEventListener('change', (e) => {
-            sss.setInitialString(e.target.value);
-        });
-
-        document.getElementById('startBtn').addEventListener('click', () => {
-            const speed = parseInt(document.getElementById('speed').value);
-            sss.start(speed);
-        });
-
-        document.getElementById('stopBtn').addEventListener('click', () => {
-            sss.stop();
-        });
-
-        document.getElementById('stepBtn').addEventListener('click', () => {
-            sss.step();
-        });
-
-        document.getElementById('resetBtn').addEventListener('click', () => {
-            const initialStr = document.getElementById('initialString').value;
-            sss.setInitialString(initialStr);
-        });
-    </script>
+  </form>
+
+  <div class="output" id="output" aria-live="polite"></div>
+  <p class="note">At each step the first matching rule is applied. The table mirrors Wolfram's presentation: each row lists the applied rule, the updated string, and its length.</p>
+
+  <script>
+    (function() {
+      const PRESETS = {
+        nks88: { seed: 'A', rules: 'A→AB\nBA→A', steps: 60 },
+        nks89: { seed: 'A', rules: 'AB→B\nBA→A', steps: 60 },
+        simple: { seed: 'AB', rules: 'A→B\nB→A', steps: 20 },
+        cyclic: { seed: 'A', rules: 'A→B\nB→C\nC→A', steps: 30 }
+      };
+
+      const presetSelect = document.getElementById('preset-select');
+      const seedInput = document.getElementById('seed-input');
+      const stepsInput = document.getElementById('steps-input');
+      const rulesInput = document.getElementById('rules-input');
+      const output = document.getElementById('output');
+      const controls = document.getElementById('controls');
+      const clearButton = document.getElementById('clear-button');
+
+      function normalise(line) {
+        return line.replace(/->/g, '→').replace(/⇒/g, '→');
+      }
+
+      function parseRules(text) {
+        const lines = text.split(/\r?\n/).map(line => normalise(line.trim())).filter(Boolean);
+        const rules = [];
+        for (const line of lines) {
+          const match = line.match(/^([^→]+)→(.*)$/);
+          if (!match) continue;
+          const pattern = match[1].trim();
+          const replacement = match[2];
+          if (!pattern) continue;
+          rules.push({ pattern, replacement, display: `${pattern}→${replacement}` });
+        }
+        return rules;
+      }
+
+      function applySequential(word, rules) {
+        for (let i = 0; i < rules.length; i++) {
+          const rule = rules[i];
+          const index = word.indexOf(rule.pattern);
+          if (index !== -1) {
+            const updated = word.slice(0, index) + rule.replacement + word.slice(index + rule.pattern.length);
+            return { word: updated, rule: rule.display };
+          }
+        }
+        return null;
+      }
+
+      function runSystem(seed, rules, maxSteps) {
+        const rows = [];
+        let current = seed;
+        rows.push({ step: 0, rule: '—', string: current, length: current.length });
+        for (let step = 1; step <= maxSteps; step++) {
+          const result = applySequential(current, rules);
+          if (!result) {
+            rows.push({ step, rule: 'halt (no match)', string: current, length: current.length });
+            break;
+          }
+          current = result.word;
+          rows.push({ step, rule: result.rule, string: current, length: current.length });
+        }
+        return rows;
+      }
+
+      function render(rows) {
+        if (!rows.length) {
+          output.innerHTML = '<p>No output – check the rules and input.</p>';
+          return;
+        }
+        const table = document.createElement('table');
+        table.innerHTML = '<thead><tr><th>Step</th><th>Rule</th><th>String</th><th>Length</th></tr></thead>';
+        const tbody = document.createElement('tbody');
+        for (const row of rows) {
+          const tr = document.createElement('tr');
+          const cells = [row.step, row.rule, row.string, row.length];
+          cells.forEach((value, idx) => {
+            const td = document.createElement('td');
+            if (idx >= 2) td.className = 'code';
+            td.textContent = value;
+            tr.appendChild(td);
+          });
+          tbody.appendChild(tr);
+        }
+        table.appendChild(tbody);
+        output.innerHTML = '';
+        output.appendChild(table);
+      }
+
+      presetSelect.addEventListener('change', () => {
+        const preset = presetSelect.value;
+        if (preset === 'custom') return;
+        const data = PRESETS[preset];
+        seedInput.value = data.seed;
+        stepsInput.value = data.steps;
+        rulesInput.value = data.rules;
+      });
+
+      clearButton.addEventListener('click', () => {
+        output.innerHTML = '';
+      });
+
+      controls.addEventListener('submit', (event) => {
+        event.preventDefault();
+        const seed = seedInput.value;
+        const steps = Math.max(1, Math.min(400, parseInt(stepsInput.value, 10) || 1));
+        stepsInput.value = steps;
+        const rules = parseRules(rulesInput.value);
+        render(runSystem(seed, rules, steps));
+      });
+
+      controls.dispatchEvent(new Event('submit'));
+    })();
+  </script>
 </body>
-</html>
\ No newline at end of file
+</html>
diff --git a/demos/chapter3/substitution-system-demo.html b/demos/chapter3/substitution-system-demo.html
index 2bfd382c2635853eb3b166644aa162f7161f8431..651d74dbcce9d3cab70cfe1512010f63858c57b8 100644
--- a/demos/chapter3/substitution-system-demo.html
+++ b/demos/chapter3/substitution-system-demo.html
@@ -1,837 +1,261 @@
 <!DOCTYPE html>
 <html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Substitution Systems Demo - NKS Explorer</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%);
-            color: #e0e0e0;
-            min-height: 100vh;
-            padding: 20px;
-        }
-
-        .container {
-            max-width: 1400px;
-            margin: 0 auto;
-        }
-
-        .header {
-            text-align: center;
-            margin-bottom: 30px;
-            padding: 20px;
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .header h1 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            font-size: 2.5em;
-            font-weight: 700;
-        }
-
-        .header p {
-            color: #b8b8b8;
-            font-size: 1.1em;
-            line-height: 1.6;
-        }
-
-        .controls {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
-            gap: 20px;
-            margin-bottom: 30px;
-        }
-
-        .control-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .control-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-            font-size: 1.2em;
-        }
-
-        .control-group {
-            margin-bottom: 15px;
-        }
-
-        label {
-            display: block;
-            color: #d0d0d0;
-            margin-bottom: 5px;
-            font-weight: 500;
-        }
-
-        select, input[type="range"], input[type="text"], button, textarea {
-            width: 100%;
-            padding: 10px;
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            background: rgba(0, 0, 0, 0.3);
-            color: #e0e0e0;
-            font-size: 14px;
-        }
-
-        textarea {
-            resize: vertical;
-            height: 60px;
-            font-family: 'Courier New', monospace;
-        }
-
-        button {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.2), rgba(255, 215, 0, 0.3));
-            cursor: pointer;
-            transition: all 0.3s ease;
-            margin: 5px 0;
-        }
-
-        button:hover {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.3), rgba(255, 215, 0, 0.4));
-            transform: translateY(-2px);
-            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.2);
-        }
-
-        .visualization-container {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            text-align: center;
-            margin-bottom: 20px;
-        }
-
-        .string-display {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-bottom: 15px;
-            max-height: 400px;
-            overflow-y: auto;
-        }
-
-        .generation {
-            display: flex;
-            align-items: center;
-            margin: 8px 0;
-            font-family: 'Courier New', monospace;
-            font-size: 14px;
-            padding: 5px;
-            border-radius: 5px;
-            background: rgba(255, 255, 255, 0.02);
-        }
-
-        .generation-number {
-            color: #ffd700;
-            font-weight: bold;
-            min-width: 40px;
-            margin-right: 10px;
-        }
-
-        .string-content {
-            flex: 1;
-            word-break: break-all;
-            color: #e0e0e0;
-        }
-
-        .symbol {
-            display: inline-block;
-            margin: 0 1px;
-            padding: 2px 4px;
-            border-radius: 3px;
-        }
-
-        .symbol-A { background: #ff6b6b; color: white; }
-        .symbol-B { background: #4ecdc4; color: white; }
-        .symbol-0 { background: #ffffff; color: black; }
-        .symbol-1 { background: #45b7d1; color: white; }
-        .symbol-X { background: #96ceb4; color: white; }
-        .symbol-Y { background: #ffd93d; color: black; }
-        .symbol-L { background: #ff8c94; color: white; }
-        .symbol-R { background: #a8e6cf; color: black; }
-
-        .rules-display {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-bottom: 15px;
-        }
-
-        .rules-display h4 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            text-align: center;
-        }
-
-        .rule-list {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
-            gap: 10px;
-        }
-
-        .rule-item {
-            background: rgba(255, 215, 0, 0.1);
-            border-radius: 5px;
-            padding: 8px;
-            font-family: 'Courier New', monospace;
-            text-align: center;
-        }
-
-        .rule-arrow {
-            color: #ffd700;
-            margin: 0 10px;
-        }
-
-        .tree-visualization {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-top: 15px;
-            max-height: 300px;
-            overflow: auto;
-        }
-
-        .tree-node {
-            margin: 2px 0;
-            font-family: 'Courier New', monospace;
-            font-size: 12px;
-        }
-
-        .custom-rules-editor {
-            display: none;
-            background: rgba(0, 0, 0, 0.2);
-            border-radius: 10px;
-            padding: 15px;
-            margin-top: 15px;
-        }
-
-        .info-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .info-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-        }
-
-        .info-panel p {
-            color: #d0d0d0;
-            line-height: 1.6;
-            margin-bottom: 10px;
-        }
-
-        .stats {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
-            gap: 15px;
-            margin-top: 15px;
-        }
-
-        .stat-item {
-            text-align: center;
-            padding: 10px;
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 8px;
-        }
-
-        .stat-value {
-            font-size: 1.5em;
-            font-weight: bold;
-            color: #ffd700;
-        }
-
-        .stat-label {
-            font-size: 0.9em;
-            color: #b8b8b8;
-        }
-
-        .growth-chart {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-top: 15px;
-            height: 200px;
-        }
-
-        @media (max-width: 768px) {
-            .controls {
-                grid-template-columns: 1fr;
-            }
-            
-            .header h1 {
-                font-size: 2em;
-            }
-            
-            .rule-list {
-                grid-template-columns: 1fr;
-            }
-        }
-    </style>
+  <meta charset="utf-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <title>NKS · Substitution Systems</title>
+  <style>
+    :root {
+      color-scheme: light;
+      font-family: "Helvetica Neue", Arial, system-ui, sans-serif;
+    }
+    body {
+      margin: 24px;
+      background: #fdfdfb;
+      color: #1f1b14;
+      max-width: 900px;
+    }
+    h1 {
+      font-size: 1.9rem;
+      margin-bottom: 0.4rem;
+    }
+    p.lead {
+      font-size: 1.05rem;
+      line-height: 1.55;
+      margin-bottom: 1.2rem;
+    }
+    form {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
+      gap: 1rem;
+      background: #ffffff;
+      padding: 1rem;
+      border: 1px solid #d7d2c6;
+      border-radius: 8px;
+      box-shadow: 0 4px 12px rgba(31,27,20,0.05);
+      margin-bottom: 1.5rem;
+    }
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 0.35rem;
+      font-size: 0.9rem;
+      color: #5d574a;
+    }
+    select,
+    input[type="number"],
+    input[type="text"],
+    textarea,
+    button {
+      font: inherit;
+      padding: 0.45rem 0.55rem;
+      border-radius: 6px;
+      border: 1px solid #c7c0ad;
+      background: #fffef9;
+      color: inherit;
+    }
+    textarea {
+      min-height: 96px;
+      resize: vertical;
+      font-family: 'IBM Plex Mono', 'SFMono-Regular', ui-monospace, monospace;
+    }
+    select:focus,
+    input:focus,
+    textarea:focus {
+      outline: 2px solid #a18f62;
+      outline-offset: 1px;
+    }
+    button {
+      cursor: pointer;
+      background: #d7c698;
+      border-color: #c8b377;
+      color: #2f291e;
+      transition: background 0.15s ease;
+    }
+    button:hover {
+      background: #e7d7a7;
+    }
+    button.secondary {
+      background: #f3efe3;
+      border-color: #cfc6b4;
+    }
+    .output {
+      background: #ffffff;
+      border: 1px solid #d7d2c6;
+      border-radius: 8px;
+      padding: 1rem 1.25rem;
+      box-shadow: 0 4px 12px rgba(31,27,20,0.04);
+    }
+    table {
+      width: 100%;
+      border-collapse: collapse;
+      font-size: 0.9rem;
+    }
+    th, td {
+      border: 1px solid #e7e0d0;
+      padding: 0.35rem 0.5rem;
+    }
+    th {
+      background: #f4efe2;
+      font-weight: 600;
+      text-align: left;
+    }
+    td.code {
+      font-family: 'IBM Plex Mono', 'SFMono-Regular', ui-monospace, monospace;
+      word-break: break-all;
+    }
+    .note {
+      font-size: 0.85rem;
+      color: #655f52;
+      margin-top: 0.8rem;
+    }
+    @media (max-width: 600px) {
+      body { margin: 16px; }
+      form { grid-template-columns: 1fr; }
+    }
+  </style>
 </head>
 <body>
-    <div class="container">
-        <div class="header">
-            <h1>Substitution Systems Demo</h1>
-            <p>Explore Wolfram's substitution systems from "A New Kind of Science"<br>
-               String rewriting systems that generate complex patterns through simple rules</p>
-        </div>
-
-        <div class="controls">
-            <div class="control-panel">
-                <h3>System Selection</h3>
-                <div class="control-group">
-                    <label for="systemPreset">Predefined Systems:</label>
-                    <select id="systemPreset">
-                        <option value="fibonacci">Fibonacci System (A→AB, B→A)</option>
-                        <option value="binary">Binary Growth (0→01, 1→10)</option>
-                        <option value="thue">Thue-Morse (0→01, 1→10)</option>
-                        <option value="cantor">Cantor Set (A→ABA, B→BBB)</option>
-                        <option value="dragon">Dragon Curve (X→X+YF+, Y→-FX-Y)</option>
-                        <option value="koch">Koch Snowflake (F→F-F++F-F)</option>
-                        <option value="sierpinski">Sierpinski (A→B-A-B, B→A+B+A)</option>
-                        <option value="lsystem">L-System Plant (X→F-[[X]+X]+F[+FX]-X)</option>
-                        <option value="custom">Custom System</option>
-                    </select>
-                </div>
-                
-                <div class="custom-rules-editor" id="customRulesEditor">
-                    <label for="customRules">Custom Rules (one per line, format: A→BC):</label>
-                    <textarea id="customRules" placeholder="A→AB&#10;B→A"></textarea>
-                    <button id="applyCustom">Apply Custom Rules</button>
-                </div>
-            </div>
-
-            <div class="control-panel">
-                <h3>Evolution Control</h3>
-                <div class="control-group">
-                    <label for="speed">Animation Speed:</label>
-                    <input type="range" id="speed" min="100" max="2000" value="800">
-                    <span id="speedValue">800ms</span>
-                </div>
-                <div class="control-group">
-                    <label for="maxGenerations">Max Generations:</label>
-                    <input type="range" id="maxGenerations" min="5" max="20" value="12">
-                    <span id="maxGenValue">12</span>
-                </div>
-                <button id="startBtn">Start Evolution</button>
-                <button id="stopBtn">Stop Evolution</button>
-                <button id="stepBtn">Single Step</button>
-                <button id="resetBtn">Reset System</button>
-            </div>
-
-            <div class="control-panel">
-                <h3>Initial Configuration</h3>
-                <div class="control-group">
-                    <label for="initialString">Starting String:</label>
-                    <input type="text" id="initialString" value="A" placeholder="e.g., A, 0, AB">
-                </div>
-                <div class="control-group">
-                    <label for="viewMode">Visualization Mode:</label>
-                    <select id="viewMode">
-                        <option value="string">String Sequence</option>
-                        <option value="tree">Tree Structure</option>
-                        <option value="growth">Growth Chart</option>
-                    </select>
-                </div>
-            </div>
-        </div>
-
-        <div class="visualization-container">
-            <h3 style="color: #ffd700; margin-bottom: 15px;">Substitution System Evolution</h3>
-            
-            <div class="rules-display" id="rulesDisplay">
-                <h4>Current Rules</h4>
-                <div class="rule-list" id="ruleList"></div>
-            </div>
-
-            <div class="string-display" id="stringDisplay"></div>
-            
-            <div class="tree-visualization" id="treeVisualization" style="display: none;"></div>
-            
-            <canvas id="growthChart" width="800" height="200" style="display: none; max-width: 100%;"></canvas>
-        </div>
-
-        <div class="info-panel">
-            <h3>About Substitution Systems</h3>
-            <p>
-                Substitution systems, extensively studied by Stephen Wolfram in "A New Kind of Science," are 
-                computational systems that operate by repeatedly applying <strong>string rewriting rules</strong>. 
-                Starting from an initial string (axiom), each symbol is simultaneously replaced according to 
-                predefined rules, generating increasingly complex patterns.
-            </p>
-            <p>
-                These systems are closely related to <strong>L-systems</strong> (Lindenmayer systems) and demonstrate 
-                how simple rules can generate <strong>fractal patterns</strong>, biological growth models, and 
-                complex mathematical sequences like the Fibonacci sequence. Wolfram showed that even 
-                <strong>neighbor-independent</strong> substitution rules can produce sophisticated emergent behaviors.
-            </p>
-
-            <div class="stats">
-                <div class="stat-item">
-                    <div class="stat-value" id="currentGeneration">0</div>
-                    <div class="stat-label">Generation</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="stringLength">1</div>
-                    <div class="stat-label">String Length</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="growthRate">1.0</div>
-                    <div class="stat-label">Growth Rate</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="uniqueSymbols">1</div>
-                    <div class="stat-label">Unique Symbols</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="totalSymbols">1</div>
-                    <div class="stat-label">Total Symbols</div>
-                </div>
-            </div>
-        </div>
+  <h1>Substitution Systems</h1>
+  <p class="lead">Faithfully recreates the Chapter 3 substitution-system explorer from <em>A New Kind of Science</em>.
+    Each step replaces every symbol simultaneously using the rules you supply.</p>
+
+  <form id="controls" autocomplete="off">
+    <label>Preset system
+      <select id="preset-select">
+        <option value="fibonacci">A → AB, B → A (NKS p.82)</option>
+        <option value="binary">0 → 01, 1 → 10 (NKS p.83)</option>
+        <option value="tribonacci">A → AB, B → AC, C → A (NKS p.84)</option>
+        <option value="cantor">A → ABA, B → BBB (NKS p.84)</option>
+        <option value="dragon">X → X+YF+, Y → -FX-Y (NKS p.86)</option>
+        <option value="custom">Custom rules…</option>
+      </select>
+    </label>
+    <label>Starting string
+      <input type="text" id="seed-input" value="A" spellcheck="false">
+    </label>
+    <label>Steps
+      <input type="number" id="steps-input" min="1" max="16" value="8">
+    </label>
+    <label>Rules (one per line, e.g. A→AB)
+      <textarea id="rules-input">A→AB
+B→A</textarea>
+    </label>
+    <div style="display:flex; gap:0.5rem; align-items:center;">
+      <button type="submit">Run substitution</button>
+      <button type="button" id="clear-button" class="secondary">Clear output</button>
     </div>
-
-    <script>
-        class SubstitutionSystem {
-            constructor() {
-                this.rules = {};
-                this.initialString = "A";
-                this.generations = [];
-                this.currentGeneration = 0;
-                this.isRunning = false;
-                this.animationId = null;
-                this.maxGenerations = 12;
-                this.viewMode = "string";
-                
-                this.initializeSystem();
-            }
-
-            initializeSystem() {
-                // Default Fibonacci system (NKS page 82)
-                this.rules = {
-                    "A": "AB",
-                    "B": "A"
-                };
-                
-                this.reset();
-                this.updateRulesDisplay();
-            }
-
-            setSystem(preset) {
-                switch (preset) {
-                    case 'fibonacci':
-                        this.rules = { "A": "AB", "B": "A" };
-                        this.initialString = "A";
-                        break;
-                    case 'binary':
-                        this.rules = { "0": "01", "1": "10" };
-                        this.initialString = "0";
-                        break;
-                    case 'thue':
-                        this.rules = { "0": "01", "1": "10" };
-                        this.initialString = "0";
-                        break;
-                    case 'cantor':
-                        this.rules = { "A": "ABA", "B": "BBB" };
-                        this.initialString = "A";
-                        break;
-                    case 'dragon':
-                        this.rules = { "X": "X+YF+", "Y": "-FX-Y", "F": "F", "+": "+", "-": "-" };
-                        this.initialString = "FX";
-                        break;
-                    case 'koch':
-                        this.rules = { "F": "F-F++F-F", "-": "-", "+": "+" };
-                        this.initialString = "F";
-                        break;
-                    case 'sierpinski':
-                        this.rules = { "A": "B-A-B", "B": "A+B+A", "-": "-", "+": "+" };
-                        this.initialString = "A";
-                        break;
-                    case 'lsystem':
-                        this.rules = { 
-                            "X": "F-[[X]+X]+F[+FX]-X",
-                            "F": "FF",
-                            "+": "+", "-": "-", "[": "[", "]": "]"
-                        };
-                        this.initialString = "X";
-                        break;
-                }
-                
-                this.updateRulesDisplay();
-                this.reset();
-            }
-
-            setCustomRules(rulesText) {
-                const rules = {};
-                const lines = rulesText.split('\n');
-                
-                for (const line of lines) {
-                    const trimmed = line.trim();
-                    if (trimmed && trimmed.includes('→')) {
-                        const [left, right] = trimmed.split('→');
-                        if (left && right) {
-                            rules[left.trim()] = right.trim();
-                        }
-                    }
-                }
-                
-                if (Object.keys(rules).length > 0) {
-                    this.rules = rules;
-                    this.updateRulesDisplay();
-                    this.reset();
-                    return true;
-                }
-                return false;
-            }
-
-            reset() {
-                this.stop();
-                this.generations = [this.initialString];
-                this.currentGeneration = 0;
-                this.updateDisplay();
-                this.updateStats();
-            }
-
-            step() {
-                if (this.currentGeneration >= this.maxGenerations - 1) {
-                    this.stop();
-                    return false;
-                }
-
-                const currentString = this.generations[this.currentGeneration];
-                let newString = "";
-                
-                // Apply substitution rules
-                for (const char of currentString) {
-                    if (this.rules[char]) {
-                        newString += this.rules[char];
-                    } else {
-                        newString += char; // No rule, keep original
-                    }
-                }
-                
-                this.currentGeneration++;
-                this.generations[this.currentGeneration] = newString;
-                
-                this.updateDisplay();
-                this.updateStats();
-                
-                return true;
-            }
-
-            updateRulesDisplay() {
-                const ruleList = document.getElementById('ruleList');
-                ruleList.innerHTML = '';
-                
-                Object.entries(this.rules).forEach(([key, value]) => {
-                    const ruleItem = document.createElement('div');
-                    ruleItem.className = 'rule-item';
-                    ruleItem.innerHTML = `
-                        <span class="symbol symbol-${key}">${key}</span>
-                        <span class="rule-arrow">→</span>
-                        ${this.formatString(value, true)}
-                    `;
-                    ruleList.appendChild(ruleItem);
-                });
-            }
-
-            formatString(str, isRule = false) {
-                return str.split('').map(char => 
-                    `<span class="symbol symbol-${char}">${char}</span>`
-                ).join('');
-            }
-
-            updateDisplay() {
-                switch (this.viewMode) {
-                    case 'string':
-                        this.updateStringDisplay();
-                        break;
-                    case 'tree':
-                        this.updateTreeDisplay();
-                        break;
-                    case 'growth':
-                        this.updateGrowthChart();
-                        break;
-                }
-            }
-
-            updateStringDisplay() {
-                const stringDisplay = document.getElementById('stringDisplay');
-                const treeVisualization = document.getElementById('treeVisualization');
-                const growthChart = document.getElementById('growthChart');
-                
-                stringDisplay.style.display = 'block';
-                treeVisualization.style.display = 'none';
-                growthChart.style.display = 'none';
-                
-                stringDisplay.innerHTML = '';
-                
-                for (let i = 0; i <= this.currentGeneration; i++) {
-                    const generation = document.createElement('div');
-                    generation.className = 'generation';
-                    
-                    const genNumber = document.createElement('div');
-                    genNumber.className = 'generation-number';
-                    genNumber.textContent = i + ':';
-                    
-                    const stringContent = document.createElement('div');
-                    stringContent.className = 'string-content';
-                    
-                    const str = this.generations[i];
-                    if (str.length > 200) {
-                        stringContent.innerHTML = this.formatString(str.substring(0, 200)) + 
-                            `<span style="color: #888;"> ... (${str.length - 200} more characters)</span>`;
-                    } else {
-                        stringContent.innerHTML = this.formatString(str);
-                    }
-                    
-                    generation.appendChild(genNumber);
-                    generation.appendChild(stringContent);
-                    stringDisplay.appendChild(generation);
-                }
-                
-                stringDisplay.scrollTop = stringDisplay.scrollHeight;
-            }
-
-            updateTreeDisplay() {
-                const stringDisplay = document.getElementById('stringDisplay');
-                const treeVisualization = document.getElementById('treeVisualization');
-                const growthChart = document.getElementById('growthChart');
-                
-                stringDisplay.style.display = 'none';
-                treeVisualization.style.display = 'block';
-                growthChart.style.display = 'none';
-                
-                treeVisualization.innerHTML = '';
-                
-                for (let i = 0; i <= this.currentGeneration; i++) {
-                    const treeNode = document.createElement('div');
-                    treeNode.className = 'tree-node';
-                    treeNode.style.paddingLeft = (i * 20) + 'px';
-                    treeNode.style.color = `hsl(${(i * 30) % 360}, 70%, 70%)`;
-                    
-                    const str = this.generations[i];
-                    const prefix = '│ '.repeat(i) + '├─ ';
-                    
-                    if (str.length > 100) {
-                        treeNode.textContent = prefix + str.substring(0, 100) + `... (${str.length} total)`;
-                    } else {
-                        treeNode.textContent = prefix + str;
-                    }
-                    
-                    treeVisualization.appendChild(treeNode);
-                }
-                
-                treeVisualization.scrollTop = treeVisualization.scrollHeight;
-            }
-
-            updateGrowthChart() {
-                const stringDisplay = document.getElementById('stringDisplay');
-                const treeVisualization = document.getElementById('treeVisualization');
-                const growthChart = document.getElementById('growthChart');
-                
-                stringDisplay.style.display = 'none';
-                treeVisualization.style.display = 'none';
-                growthChart.style.display = 'block';
-                
-                const canvas = growthChart;
-                const ctx = canvas.getContext('2d');
-                
-                ctx.fillStyle = '#000000';
-                ctx.fillRect(0, 0, canvas.width, canvas.height);
-                
-                if (this.generations.length < 2) return;
-                
-                const lengths = this.generations.slice(0, this.currentGeneration + 1).map(str => str.length);
-                const maxLength = Math.max(...lengths);
-                const maxGen = lengths.length - 1;
-                
-                // Draw grid
-                ctx.strokeStyle = '#333333';
-                ctx.lineWidth = 1;
-                for (let i = 0; i <= 10; i++) {
-                    const y = (canvas.height * i) / 10;
-                    ctx.beginPath();
-                    ctx.moveTo(0, y);
-                    ctx.lineTo(canvas.width, y);
-                    ctx.stroke();
-                }
-                
-                for (let i = 0; i <= maxGen; i++) {
-                    const x = (canvas.width * i) / maxGen;
-                    ctx.beginPath();
-                    ctx.moveTo(x, 0);
-                    ctx.lineTo(x, canvas.height);
-                    ctx.stroke();
-                }
-                
-                // Draw growth curve
-                ctx.strokeStyle = '#ffd700';
-                ctx.lineWidth = 2;
-                ctx.beginPath();
-                
-                for (let i = 0; i < lengths.length; i++) {
-                    const x = (canvas.width * i) / maxGen;
-                    const y = canvas.height - (canvas.height * lengths[i]) / maxLength;
-                    
-                    if (i === 0) {
-                        ctx.moveTo(x, y);
-                    } else {
-                        ctx.lineTo(x, y);
-                    }
-                    
-                    // Draw points
-                    ctx.fillStyle = '#ff6b6b';
-                    ctx.fillRect(x - 2, y - 2, 4, 4);
-                }
-                
-                ctx.stroke();
-                
-                // Draw labels
-                ctx.fillStyle = '#e0e0e0';
-                ctx.font = '12px monospace';
-                ctx.fillText(`Max Length: ${maxLength}`, 10, 20);
-                ctx.fillText(`Generation: ${this.currentGeneration}`, 10, 35);
-            }
-
-            updateStats() {
-                const currentString = this.generations[this.currentGeneration] || "";
-                const uniqueSymbols = new Set(currentString).size;
-                
-                let growthRate = 1.0;
-                if (this.currentGeneration > 0) {
-                    const prevLength = this.generations[this.currentGeneration - 1].length;
-                    const currLength = currentString.length;
-                    growthRate = prevLength > 0 ? (currLength / prevLength) : 1.0;
-                }
-                
-                document.getElementById('currentGeneration').textContent = this.currentGeneration;
-                document.getElementById('stringLength').textContent = currentString.length;
-                document.getElementById('growthRate').textContent = growthRate.toFixed(2);
-                document.getElementById('uniqueSymbols').textContent = uniqueSymbols;
-                document.getElementById('totalSymbols').textContent = currentString.length;
-            }
-
-            start(speed = 800) {
-                if (this.isRunning) return;
-                
-                this.isRunning = true;
-                const animate = () => {
-                    if (!this.isRunning) return;
-                    
-                    const canContinue = this.step();
-                    if (!canContinue) {
-                        this.isRunning = false;
-                        return;
-                    }
-                    
-                    this.animationId = setTimeout(animate, speed);
-                };
-                animate();
-            }
-
-            stop() {
-                this.isRunning = false;
-                if (this.animationId) {
-                    clearTimeout(this.animationId);
-                    this.animationId = null;
-                }
-            }
-
-            setViewMode(mode) {
-                this.viewMode = mode;
-                this.updateDisplay();
-            }
-
-            setMaxGenerations(max) {
-                this.maxGenerations = max;
-            }
-
-            setInitialString(str) {
-                this.initialString = str || "A";
-                this.reset();
-            }
-        }
-
-        // Initialize the substitution system
-        const ss = new SubstitutionSystem();
-
-        // Event listeners
-        document.getElementById('systemPreset').addEventListener('change', (e) => {
-            const preset = e.target.value;
-            const customEditor = document.getElementById('customRulesEditor');
-            
-            if (preset === 'custom') {
-                customEditor.style.display = 'block';
-            } else {
-                customEditor.style.display = 'none';
-                ss.setSystem(preset);
-            }
-        });
-
-        document.getElementById('applyCustom').addEventListener('click', () => {
-            const rulesText = document.getElementById('customRules').value;
-            if (!ss.setCustomRules(rulesText)) {
-                alert('Invalid rule format. Use format: A→BC (one rule per line)');
-            }
-        });
-
-        document.getElementById('speed').addEventListener('input', (e) => {
-            document.getElementById('speedValue').textContent = e.target.value + 'ms';
-        });
-
-        document.getElementById('maxGenerations').addEventListener('input', (e) => {
-            const value = parseInt(e.target.value);
-            document.getElementById('maxGenValue').textContent = value;
-            ss.setMaxGenerations(value);
-        });
-
-        document.getElementById('viewMode').addEventListener('change', (e) => {
-            ss.setViewMode(e.target.value);
-        });
-
-        document.getElementById('initialString').addEventListener('change', (e) => {
-            ss.setInitialString(e.target.value);
-        });
-
-        document.getElementById('startBtn').addEventListener('click', () => {
-            const speed = parseInt(document.getElementById('speed').value);
-            ss.start(speed);
-        });
-
-        document.getElementById('stopBtn').addEventListener('click', () => {
-            ss.stop();
-        });
-
-        document.getElementById('stepBtn').addEventListener('click', () => {
-            ss.step();
-        });
-
-        document.getElementById('resetBtn').addEventListener('click', () => {
-            const initialStr = document.getElementById('initialString').value;
-            ss.setInitialString(initialStr);
-        });
-    </script>
+  </form>
+
+  <div class="output" id="output" aria-live="polite"></div>
+  <p class="note">If a symbol has no rule it is left unchanged. The growth table matches the layout of the official Wolfram demo: each row shows the generation number, the resulting string, and its length.</p>
+
+  <script>
+    (function() {
+      const presetSelect = document.getElementById('preset-select');
+      const seedInput = document.getElementById('seed-input');
+      const stepsInput = document.getElementById('steps-input');
+      const rulesInput = document.getElementById('rules-input');
+      const output = document.getElementById('output');
+      const controls = document.getElementById('controls');
+      const clearButton = document.getElementById('clear-button');
+
+      const PRESETS = {
+        fibonacci: { seed: 'A', rules: 'A→AB\nB→A' },
+        binary: { seed: '0', rules: '0→01\n1→10' },
+        tribonacci: { seed: 'A', rules: 'A→AB\nB→AC\nC→A' },
+        cantor: { seed: 'A', rules: 'A→ABA\nB→BBB' },
+        dragon: { seed: 'FX', rules: 'X→X+YF+\nY→-FX-Y' }
+      };
+
+      function normaliseArrow(line) {
+        return line.replace(/->/g, '→').replace(/⇒/g, '→');
+      }
+
+      function parseRules(text) {
+        const lines = text.split(/\r?\n/).map(line => normaliseArrow(line.trim())).filter(Boolean);
+        const map = new Map();
+        for (const line of lines) {
+          const match = line.match(/^([^→]+)→(.*)$/);
+          if (!match) continue;
+          const symbol = match[1].trim();
+          const replacement = match[2];
+          if (!symbol) continue;
+          map.set(symbol, replacement);
+        }
+        return map;
+      }
+
+      function applyRules(word, rules) {
+        let result = '';
+        for (const ch of word) {
+          result += rules.has(ch) ? rules.get(ch) : ch;
+        }
+        return result;
+      }
+
+      function runSystem(seed, rules, steps) {
+        const rows = [];
+        let current = seed;
+        rows.push({ generation: 0, string: current, length: current.length });
+        for (let i = 0; i < steps; i++) {
+          current = applyRules(current, rules);
+          rows.push({ generation: i + 1, string: current, length: current.length });
+        }
+        return rows;
+      }
+
+      function renderRows(rows) {
+        if (!rows.length) {
+          output.innerHTML = '<p>No output – check the rules and starting string.</p>';
+          return;
+        }
+        const table = document.createElement('table');
+        const thead = document.createElement('thead');
+        thead.innerHTML = '<tr><th>Generation</th><th>String</th><th>Length</th></tr>';
+        table.appendChild(thead);
+        const tbody = document.createElement('tbody');
+        for (const row of rows) {
+          const tr = document.createElement('tr');
+          const genCell = document.createElement('td');
+          genCell.textContent = row.generation;
+          const stringCell = document.createElement('td');
+          stringCell.className = 'code';
+          stringCell.textContent = row.string;
+          const lengthCell = document.createElement('td');
+          lengthCell.textContent = row.length;
+          tr.append(genCell, stringCell, lengthCell);
+          tbody.appendChild(tr);
+        }
+        table.appendChild(tbody);
+        output.innerHTML = '';
+        output.appendChild(table);
+      }
+
+      presetSelect.addEventListener('change', () => {
+        const preset = presetSelect.value;
+        if (preset === 'custom') return;
+        const data = PRESETS[preset];
+        seedInput.value = data.seed;
+        rulesInput.value = data.rules;
+      });
+
+      clearButton.addEventListener('click', () => {
+        output.innerHTML = '';
+      });
+
+      controls.addEventListener('submit', (event) => {
+        event.preventDefault();
+        const seed = seedInput.value;
+        const steps = Math.max(1, Math.min(16, parseInt(stepsInput.value, 10) || 1));
+        stepsInput.value = steps;
+        const ruleMap = parseRules(rulesInput.value);
+        renderRows(runSystem(seed, ruleMap, steps));
+      });
+
+      // initialise with default preset
+      controls.dispatchEvent(new Event('submit'));
+    })();
+  </script>
 </body>
-</html>
\ No newline at end of file
+</html>
diff --git a/demos/chapter3/tag-system-demo.html b/demos/chapter3/tag-system-demo.html
index 1f689e53a6d0335ff75b82cca85d9513c3ba9a06..91f4dfd469524e7704413798a0c90aaa77f8b221 100644
--- a/demos/chapter3/tag-system-demo.html
+++ b/demos/chapter3/tag-system-demo.html
@@ -1,918 +1,228 @@
 <!DOCTYPE html>
-<html lang="zh-CN">
+<html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>标记系统探索器 - 交互式序列替换实验</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            line-height: 1.6;
-            color: #e0e0e0;
-            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
-            min-height: 100vh;
-            padding: 0;
-        }
-
-        .container {
-            width: 100vw;
-            min-height: 100vh;
-            margin: 0;
-            background: rgba(26, 26, 26, 0.8);
-            backdrop-filter: blur(10px);
-            overflow: hidden;
-        }
-
-        .header {
-            background: linear-gradient(135deg, #ffd700, #ffb300);
-            color: #1a1a1a;
-            padding: 2rem;
-            text-align: center;
-        }
-
-        .header h1 {
-            font-size: 2.5rem;
-            font-weight: 700;
-            margin-bottom: 0.5rem;
-        }
-
-        .header p {
-            font-size: 1.1rem;
-            opacity: 0.8;
-        }
-
-        .main-content {
-            display: grid;
-            grid-template-columns: 400px 1fr;
-            gap: 0;
-            min-height: calc(100vh - 120px);
-        }
-
-        .controls-panel {
-            background: rgba(40, 40, 40, 0.9);
-            padding: 2rem;
-            border-right: 1px solid rgba(255, 215, 0, 0.2);
-            max-height: calc(100vh - 200px);
-            overflow-y: auto;
-        }
-
-        .visualization-area {
-            padding: 1.5rem;
-            display: flex;
-            flex-direction: column;
-            align-items: center;
-            background: rgba(20, 20, 20, 0.5);
-            overflow: auto;
-        }
-
-        .section-title {
-            color: #ffd700;
-            font-size: 1.3rem;
-            font-weight: 600;
-            margin: 1.5rem 0 1rem 0;
-            padding-bottom: 0.5rem;
-            border-bottom: 2px solid rgba(255, 215, 0, 0.3);
-        }
-
-        .section-title:first-of-type {
-            margin-top: 0;
-        }
-
-        /* Preset Systems */
-        .preset-systems {
-            display: grid;
-            grid-template-columns: repeat(2, 1fr);
-            gap: 8px;
-            margin: 1rem 0;
-        }
-
-        .preset-system {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            padding: 10px;
-            text-align: center;
-            cursor: pointer;
-            transition: all 0.3s ease;
-            font-size: 0.9rem;
-        }
-
-        .preset-system:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .preset-system.active {
-            background: rgba(255, 215, 0, 0.2);
-            border-color: #ffd700;
-        }
-
-        .preset-name {
-            font-weight: bold;
-            color: #ffd700;
-            font-size: 1.1rem;
-        }
-
-        .preset-description {
-            color: rgba(255, 255, 255, 0.7);
-            font-size: 0.8rem;
-            margin-top: 4px;
-        }
-
-        /* Control Groups */
-        .control-group {
-            margin: 1rem 0;
-        }
-
-        .control-label {
-            display: block;
-            color: rgba(255, 215, 0, 0.8);
-            font-size: 0.9rem;
-            font-weight: 500;
-            margin-bottom: 8px;
-        }
-
-        .control-row {
-            display: flex;
-            gap: 8px;
-            align-items: center;
-            margin: 8px 0;
-        }
-
-        .input-field {
-            flex: 1;
-            padding: 8px 12px;
-            background: rgba(255, 255, 255, 0.1);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            color: #e0e0e0;
-            font-family: 'Courier New', monospace;
-            font-size: 0.9rem;
-        }
-
-        .input-field:focus {
-            outline: none;
-            border-color: #ffd700;
-            box-shadow: 0 0 0 2px rgba(255, 215, 0, 0.3);
-        }
-
-        .btn {
-            padding: 8px 16px;
-            border: 1px solid rgba(255, 215, 0, 0.4);
-            border-radius: 6px;
-            background: transparent;
-            color: rgba(255, 215, 0, 0.8);
-            cursor: pointer;
-            font-size: 0.9rem;
-            transition: all 0.3s ease;
-            flex: 1;
-        }
-
-        .btn:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .btn.primary {
-            background: rgba(255, 215, 0, 0.2);
-            color: #ffd700;
-            border-color: #ffd700;
-        }
-
-        .btn.primary:hover {
-            background: rgba(255, 215, 0, 0.3);
-        }
-
-        .btn:disabled {
-            opacity: 0.5;
-            cursor: not-allowed;
-        }
-
-        /* Rules Display */
-        .rules-display {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            border-radius: 6px;
-            padding: 12px;
-            margin: 1rem 0;
-            font-size: 0.9rem;
-            font-family: 'Courier New', monospace;
-        }
-
-        .rule-item {
-            margin-bottom: 5px;
-            color: rgba(255, 255, 255, 0.8);
-        }
-
-        .rule-symbol {
-            color: #ffd700;
-            font-weight: 600;
-        }
-
-        /* String Visualization */
-        .string-display {
-            width: 100%;
-            max-width: 800px;
-            margin: 1rem 0;
-        }
-
-        .string-container {
-            background: rgba(0, 0, 0, 0.4);
-            border: 2px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            padding: 20px;
-            min-height: 100px;
-            display: flex;
-            align-items: center;
-            justify-content: center;
-        }
-
-        .current-string {
-            font-family: 'Courier New', monospace;
-            font-size: 1.4rem;
-            color: #ffd700;
-            font-weight: bold;
-            word-break: break-all;
-            text-align: center;
-            line-height: 1.6;
-        }
-
-        .evolution-info {
-            display: flex;
-            justify-content: space-between;
-            align-items: center;
-            margin: 1rem 0;
-            padding: 12px 16px;
-            background: rgba(255, 215, 0, 0.1);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            font-size: 0.9rem;
-            width: 100%;
-            max-width: 800px;
-        }
-
-        .info-item {
-            display: flex;
-            flex-direction: column;
-            align-items: center;
-            gap: 4px;
-        }
-
-        .info-label {
-            color: rgba(255, 215, 0, 0.8);
-            font-size: 0.8rem;
-        }
-
-        .info-value {
-            color: #ffd700;
-            font-weight: bold;
-        }
-
-        /* History Display */
-        .history-display {
-            width: 100%;
-            max-width: 800px;
-            background: rgba(0, 0, 0, 0.3);
-            border: 1px solid rgba(255, 255, 255, 0.1);
-            border-radius: 8px;
-            padding: 20px;
-            margin: 1rem 0;
-        }
-
-        .history-title {
-            color: #ffd700;
-            font-size: 1.2rem;
-            font-weight: 600;
-            margin-bottom: 15px;
-        }
-
-        .history-content {
-            max-height: 300px;
-            overflow-y: auto;
-        }
-
-        .history-item {
-            font-family: 'Courier New', monospace;
-            font-size: 0.9em;
-            padding: 8px 0;
-            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
-            color: #c0c0c0;
-        }
-
-        .history-item:last-child {
-            border-bottom: none;
-        }
-
-        .history-step {
-            color: #ffd700;
-            font-weight: 600;
-            margin-right: 10px;
-            min-width: 40px;
-            display: inline-block;
-        }
-
-        .history-action {
-            color: rgba(255, 255, 255, 0.6);
-            font-style: italic;
-            margin-left: 10px;
-        }
-
-        /* System Analysis */
-        .system-analysis {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            border-radius: 6px;
-            padding: 12px;
-            margin: 1rem 0;
-            font-size: 0.9rem;
-            width: 100%;
-            max-width: 800px;
-        }
-
-        .analysis-title {
-            color: #ffd700;
-            font-weight: 600;
-            margin-bottom: 8px;
-        }
-
-        .analysis-text {
-            color: rgba(255, 255, 255, 0.8);
-            line-height: 1.5;
-        }
-
-        /* Responsive Design */
-        @media (max-width: 1200px) {
-            .main-content {
-                grid-template-columns: 350px 1fr;
-            }
-        }
-
-        @media (max-width: 1024px) {
-            .main-content {
-                grid-template-columns: 1fr;
-                min-height: auto;
-            }
-
-            .controls-panel {
-                max-height: none;
-                border-right: none;
-                border-bottom: 1px solid rgba(255, 215, 0, 0.2);
-                padding: 1.5rem;
-            }
-
-            .visualization-area {
-                padding: 1rem;
-            }
-
-            .preset-systems {
-                grid-template-columns: repeat(4, 1fr);
-            }
-        }
-
-        @media (max-width: 768px) {
-            .container {
-                margin: 0;
-                border-radius: 0;
-            }
-
-            .header {
-                padding: 1.5rem;
-            }
-
-            .header h1 {
-                font-size: 2rem;
-            }
-
-            .controls-panel,
-            .visualization-area {
-                padding: 1rem;
-            }
-
-            .preset-systems {
-                grid-template-columns: repeat(2, 1fr);
-            }
-
-            .evolution-info {
-                flex-direction: column;
-                gap: 8px;
-            }
-
-            .current-string {
-                font-size: 1.2rem;
-            }
-        }
-
-        /* Loading Animation */
-        @keyframes pulse {
-            0%, 100% {
-                opacity: 0.7;
-            }
-            50% {
-                opacity: 1;
-            }
-        }
-
-        .running {
-            animation: pulse 1.5s infinite;
-        }
-    </style>
+  <meta charset="utf-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <title>NKS · Tag Systems</title>
+  <style>
+    :root {
+      color-scheme: light;
+      font-family: "Helvetica Neue", Arial, system-ui, sans-serif;
+    }
+    body {
+      margin: 24px;
+      background: #fdfdfb;
+      color: #1f1b14;
+      max-width: 900px;
+    }
+    h1 { font-size: 1.9rem; margin-bottom: 0.4rem; }
+    p.lead { font-size: 1.05rem; line-height: 1.55; margin-bottom: 1.2rem; }
+    form {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
+      gap: 1rem;
+      background: #fff;
+      padding: 1rem;
+      border: 1px solid #d8d2c6;
+      border-radius: 8px;
+      box-shadow: 0 4px 12px rgba(31,27,20,0.05);
+      margin-bottom: 1.5rem;
+    }
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 0.35rem;
+      font-size: 0.9rem;
+      color: #5d574a;
+    }
+    select,
+    input[type="number"],
+    input[type="text"],
+    textarea,
+    button {
+      font: inherit;
+      padding: 0.45rem 0.55rem;
+      border-radius: 6px;
+      border: 1px solid #c6bfab;
+      background: #fffef9;
+      color: inherit;
+    }
+    textarea {
+      min-height: 96px;
+      resize: vertical;
+      font-family: 'IBM Plex Mono', 'SFMono-Regular', ui-monospace, monospace;
+    }
+    select:focus,
+    input:focus,
+    textarea:focus {
+      outline: 2px solid #a18f62;
+      outline-offset: 1px;
+    }
+    button {
+      cursor: pointer;
+      background: #d7c698;
+      border-color: #c9b379;
+      color: #2f291e;
+      transition: background 0.15s ease;
+    }
+    button:hover { background: #e7d7a7; }
+    button.secondary {
+      background: #f3efe3;
+      border-color: #cfc6b4;
+    }
+    .output {
+      background: #ffffff;
+      border: 1px solid #d8d2c6;
+      border-radius: 8px;
+      padding: 1rem 1.25rem;
+      box-shadow: 0 4px 12px rgba(31,27,20,0.04);
+    }
+    table { width: 100%; border-collapse: collapse; font-size: 0.9rem; }
+    th, td { border: 1px solid #e7e0d0; padding: 0.35rem 0.5rem; }
+    th { background: #f4efe2; font-weight: 600; text-align: left; }
+    td.code { font-family: 'IBM Plex Mono', 'SFMono-Regular', ui-monospace, monospace; word-break: break-all; }
+    .note { font-size: 0.85rem; color: #655f52; margin-top: 0.8rem; }
+    @media (max-width: 600px) { body { margin: 16px; } form { grid-template-columns: 1fr; } }
+  </style>
 </head>
-
-<!-- Google tag (gtag.js) -->
-<script async src="https://www.googletagmanager.com/gtag/js?id=G-QR1KHESCTK"></script>
-<script>
-    window.dataLayer = window.dataLayer || [];
-    function gtag() { dataLayer.push(arguments); }
-    gtag('js', new Date());
-
-    gtag('config', 'G-QR1KHESCTK');
-</script>
-
 <body>
-    <div class="container">
-        <div class="header">
-            <h1>标记系统探索器</h1>
-            <p>交互式探索序列替换系统，理解计算复杂性的基础模型</p>
-        </div>
-
-        <div class="main-content">
-            <div class="controls-panel">
-                <div class="section-title">预设系统</div>
-                <p style="font-size: 0.9rem; color: rgba(255, 255, 255, 0.7); margin-bottom: 1rem;">
-                    选择经典标记系统进行探索：
-                </p>
-
-                <div class="preset-systems">
-                    <div class="preset-system active" data-preset="wolfram925">
-                        <div class="preset-name">Wolfram 925</div>
-                        <div class="preset-description">经典规则</div>
-                    </div>
-                    <div class="preset-system" data-preset="cyclic">
-                        <div class="preset-name">循环系统</div>
-                        <div class="preset-description">3符号循环</div>
-                    </div>
-                    <div class="preset-system" data-preset="doubling">
-                        <div class="preset-name">倍增系统</div>
-                        <div class="preset-description">二进制倍增</div>
-                    </div>
-                    <div class="preset-system" data-preset="collatz">
-                        <div class="preset-name">类科拉茨</div>
-                        <div class="preset-description">Collatz-like</div>
-                    </div>
-                </div>
-
-                <div class="section-title">系统配置</div>
-
-                <div class="control-group">
-                    <label class="control-label">删除数 (m)</label>
-                    <div class="control-row">
-                        <input type="number" class="input-field" id="deletion" value="2" min="1" max="10">
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <label class="control-label">字母表</label>
-                    <div class="control-row">
-                        <input type="text" class="input-field" id="alphabet" value="ABC" placeholder="例如: ABC 或 01">
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <label class="control-label">初始字符串</label>
-                    <div class="control-row">
-                        <input type="text" class="input-field" id="initial-string" value="AAA" placeholder="例如: AAA 或 101">
-                    </div>
-                </div>
-
-                <div class="section-title">替换规则</div>
-                <div id="rules-container">
-                    <!-- Rules will be generated dynamically -->
-                </div>
-
-                <div class="section-title">当前规则</div>
-                <div id="rules-display" class="rules-display">
-                    <!-- Current rules will be displayed here -->
-                </div>
-
-                <div class="section-title">控制操作</div>
-
-                <div class="control-group">
-                    <div class="control-row">
-                        <button class="btn primary" id="init-btn">初始化</button>
-                        <button class="btn" id="step-btn">单步</button>
-                    </div>
-                    <div class="control-row">
-                        <button class="btn" id="run-btn">运行10步</button>
-                        <button class="btn" id="run-all-btn">运行至停止</button>
-                    </div>
-                    <div class="control-row">
-                        <button class="btn" id="reset-btn">重置</button>
-                    </div>
-                </div>
-
-                <div class="system-analysis" id="system-analysis">
-                    <div class="analysis-title">系统分析</div>
-                    <div class="analysis-text" id="analysis-text">
-                        Wolfram 925系统：经典标记系统，展现了简单规则产生复杂行为的典型例子。通过删除前2个符号并根据第一个符号应用替换规则。
-                    </div>
-                </div>
-            </div>
-
-            <div class="visualization-area">
-                <div class="string-display">
-                    <div class="string-container">
-                        <div class="current-string" id="current-string">准备开始...</div>
-                    </div>
-                </div>
-
-                <div class="evolution-info">
-                    <div class="info-item">
-                        <span class="info-label">当前步数</span>
-                        <span class="info-value" id="current-step">0</span>
-                    </div>
-                    <div class="info-item">
-                        <span class="info-label">字符串长度</span>
-                        <span class="info-value" id="string-length">0</span>
-                    </div>
-                    <div class="info-item">
-                        <span class="info-label">系统状态</span>
-                        <span class="info-value" id="system-status">就绪</span>
-                    </div>
-                    <div class="info-item">
-                        <span class="info-label">行为类型</span>
-                        <span class="info-value" id="behavior-type">复杂</span>
-                    </div>
-                </div>
-
-                <div class="history-display">
-                    <div class="history-title">演化历史</div>
-                    <div class="history-content" id="history-content">
-                        <!-- Evolution steps will be displayed here -->
-                    </div>
-                </div>
-            </div>
-        </div>
+  <h1>Tag Systems</h1>
+  <p class="lead">Implements the classic tag system experiment from Chapter 3 of <em>A New Kind of Science</em>.
+    At each step the system deletes a fixed number of symbols from the front and appends the string specified for the first symbol.</p>
+
+  <form id="controls" autocomplete="off">
+    <label>Preset
+      <select id="preset-select">
+        <option value="nks">NKS p.94 — deletion 2 with rules 1 → 11, 2 → 1</option>
+        <option value="cyclic">Cyclic — deletion 1, A → B, B → C, C → A</option>
+        <option value="busy">Busy growth — deletion 2, 0 → 00, 1 → 001</option>
+        <option value="custom">Custom system…</option>
+      </select>
+    </label>
+    <label>Deletion number
+      <input type="number" id="deletion-input" min="1" max="6" value="2">
+    </label>
+    <label>Initial word
+      <input type="text" id="seed-input" value="112211" spellcheck="false">
+    </label>
+    <label>Rules (one per line, e.g. 1→11)
+      <textarea id="rules-input">1→11
+2→1</textarea>
+    </label>
+    <label>Maximum steps
+      <input type="number" id="steps-input" min="1" max="400" value="50">
+    </label>
+    <div style="display:flex; gap:0.5rem; align-items:center;">
+      <button type="submit">Run tag system</button>
+      <button type="button" id="clear-button" class="secondary">Clear output</button>
     </div>
-
-    <script>
-        class TagSystemExplorer {
-            constructor() {
-                // Runtime state
-                this.currentString = '';
-                this.rules = {};
-                this.deletionNumber = 2;
-                this.stepCount = 0;
-                this.history = [];
-                this.isRunning = false;
-                this.animationId = null;
-                this.activePreset = 'wolfram925';
-
-                // Preset systems
-                this.presets = {
-                    wolfram925: {
-                        deletion: 2,
-                        alphabet: 'ABC',
-                        initial: 'AAA',
-                        rules: { A: 'BC', B: 'A', C: 'AAB' }
-                    },
-                    cyclic: {
-                        deletion: 1,
-                        alphabet: 'ABC',
-                        initial: 'ABC',
-                        rules: { A: 'B', B: 'C', C: 'A' }
-                    },
-                    doubling: {
-                        deletion: 1,
-                        alphabet: '01',
-                        initial: '1',
-                        rules: { '0': '00', '1': '11' }
-                    },
-                    collatz: {
-                        deletion: 1,
-                        alphabet: 'EO',
-                        initial: 'EEEOO',
-                        rules: { E: 'O', O: 'EEE' }
-                    }
-                };
-
-                this.init();
-            }
-
-            init() {
-                this.setupEventListeners();
-                this.loadPreset('wolfram925');
-            }
-
-            setupEventListeners() {
-                // Preset system buttons
-                const presetSystems = document.querySelectorAll('.preset-system');
-                presetSystems.forEach(system => {
-                    system.addEventListener('click', (e) => {
-                        this.loadPreset(e.currentTarget.dataset.preset);
-                    });
-                });
-
-                // Control buttons
-                document.getElementById('init-btn').addEventListener('click', () => this.initializeSystem());
-                document.getElementById('step-btn').addEventListener('click', () => this.stepOnce());
-                document.getElementById('run-btn').addEventListener('click', () => this.runSteps());
-                document.getElementById('run-all-btn').addEventListener('click', () => this.runUntilHalt());
-                document.getElementById('reset-btn').addEventListener('click', () => this.reset());
-
-                // Input field listeners
-                document.getElementById('alphabet').addEventListener('input', () => this.generateRulesInputs());
-            }
-
-            loadPreset(presetName) {
-                const preset = this.presets[presetName];
-                if (!preset) return;
-
-                this.activePreset = presetName;
-                this.updatePresetActiveState(presetName);
-
-                // Update input fields
-                document.getElementById('deletion').value = preset.deletion;
-                document.getElementById('alphabet').value = preset.alphabet;
-                document.getElementById('initial-string').value = preset.initial;
-
-                // Generate rule inputs and set values
-                this.generateRulesInputs();
-                
-                setTimeout(() => {
-                    for (const [symbol, replacement] of Object.entries(preset.rules)) {
-                        const input = document.getElementById(`rule-${symbol}`);
-                        if (input) {
-                            input.value = replacement;
-                        }
-                    }
-                    this.initializeSystem();
-                    this.updateSystemAnalysis();
-                }, 100);
-            }
-
-            updatePresetActiveState(activePreset) {
-                const presetSystems = document.querySelectorAll('.preset-system');
-                presetSystems.forEach(system => {
-                    system.classList.toggle('active', system.dataset.preset === activePreset);
-                });
-            }
-
-            generateRulesInputs() {
-                const alphabet = document.getElementById('alphabet').value;
-                const container = document.getElementById('rules-container');
-                
-                container.innerHTML = '';
-                
-                for (const symbol of alphabet) {
-                    const div = document.createElement('div');
-                    div.className = 'control-group';
-                    div.innerHTML = `
-                        <label class="control-label">规则 '${symbol}'</label>
-                        <div class="control-row">
-                            <input type="text" class="input-field" id="rule-${symbol}" placeholder="替换字符串" value="">
-                        </div>
-                    `;
-                    container.appendChild(div);
-                }
-            }
-
-            updateRulesDisplay() {
-                const display = document.getElementById('rules-display');
-                let html = '';
-                
-                for (const [symbol, replacement] of Object.entries(this.rules)) {
-                    html += `<div class="rule-item"><span class="rule-symbol">${symbol}</span> → ${replacement || '∅'}</div>`;
-                }
-                
-                if (html === '') {
-                    html = '<div class="rule-item">未定义规则</div>';
-                }
-                
-                html += `<div class="rule-item" style="margin-top: 10px; color: #ffd700;">删除数: ${this.deletionNumber}</div>`;
-                
-                display.innerHTML = html;
-            }
-
-            initializeSystem() {
-                this.deletionNumber = parseInt(document.getElementById('deletion').value);
-                const alphabet = document.getElementById('alphabet').value;
-                this.currentString = document.getElementById('initial-string').value;
-                
-                // Collect rules
-                this.rules = {};
-                for (const symbol of alphabet) {
-                    const ruleInput = document.getElementById(`rule-${symbol}`);
-                    if (ruleInput) {
-                        this.rules[symbol] = ruleInput.value;
-                    }
-                }
-                
-                this.stepCount = 0;
-                this.history = [];
-                
-                this.updateDisplay();
-                this.updateRulesDisplay();
-                this.addToHistory(this.currentString, '初始字符串');
-                
-                this.enableControls();
-            }
-
-            stepOnce() {
-                if (this.currentString.length < this.deletionNumber) {
-                    this.addToHistory('停止', '字符串过短');
-                    this.disableControls();
-                    this.updateSystemStatus('已停止');
-                    return false;
-                }
-
-                const firstSymbol = this.currentString[0];
-                const removedPart = this.currentString.substring(0, this.deletionNumber);
-                const remainingPart = this.currentString.substring(this.deletionNumber);
-                
-                let newString = remainingPart;
-                let replacement = '';
-                
-                if (this.rules[firstSymbol]) {
-                    replacement = this.rules[firstSymbol];
-                    newString += replacement;
-                }
-                
-                // Check for cycles
-                if (this.history.some(item => item.string === newString)) {
-                    this.addToHistory(newString, `删除 "${removedPart}", 添加 "${replacement}" (检测到循环)`);
-                    this.currentString = newString;
-                    this.stepCount++;
-                    this.updateDisplay();
-                    this.disableControls();
-                    this.updateSystemStatus('已停止 - 循环');
-                    return false;
-                }
-                
-                this.currentString = newString;
-                this.stepCount++;
-                
-                const action = replacement ? `删除 "${removedPart}", 添加 "${replacement}"` : `删除 "${removedPart}", 无规则`;
-                this.addToHistory(this.currentString, action);
-                this.updateDisplay();
-                
-                return true;
-            }
-
-            runSteps() {
-                if (this.isRunning) return;
-                
-                this.isRunning = true;
-                this.updateSystemStatus('运行中');
-                document.getElementById('run-btn').classList.add('running');
-                
-                let steps = 0;
-                const maxSteps = 10;
-                
-                const step = () => {
-                    if (!this.isRunning) return;
-                    
-                    if (steps >= maxSteps || !this.stepOnce()) {
-                        this.stopExecution();
-                        return;
-                    }
-                    
-                    steps++;
-                    this.animationId = setTimeout(step, 300);
-                };
-                
-                step();
-            }
-
-            runUntilHalt() {
-                if (this.isRunning) return;
-                
-                this.isRunning = true;
-                this.updateSystemStatus('运行中');
-                document.getElementById('run-all-btn').classList.add('running');
-                
-                const maxSteps = 1000;
-                let steps = 0;
-                
-                const step = () => {
-                    if (!this.isRunning) return;
-                    
-                    if (steps >= maxSteps) {
-                        this.addToHistory('已停止', '达到最大步数 (1000)');
-                        this.stopExecution();
-                        return;
-                    }
-                    
-                    if (!this.stepOnce()) {
-                        this.stopExecution();
-                        return;
-                    }
-                    
-                    steps++;
-                    this.animationId = setTimeout(step, 50);
-                };
-                
-                step();
-            }
-
-            stopExecution() {
-                this.isRunning = false;
-                if (this.animationId) {
-                    clearTimeout(this.animationId);
-                    this.animationId = null;
-                }
-                this.updateSystemStatus('已停止');
-                document.getElementById('run-btn').classList.remove('running');
-                document.getElementById('run-all-btn').classList.remove('running');
-            }
-
-            reset() {
-                this.stopExecution();
-                this.currentString = document.getElementById('initial-string').value;
-                this.stepCount = 0;
-                this.history = [];
-                
-                this.updateDisplay();
-                this.addToHistory(this.currentString, '重置到初始字符串');
-                this.updateSystemStatus('就绪');
-                
-                this.enableControls();
-            }
-
-            updateDisplay() {
-                document.getElementById('current-string').textContent = this.currentString || '空字符串';
-                document.getElementById('current-step').textContent = this.stepCount;
-                document.getElementById('string-length').textContent = this.currentString.length;
-                
-                // Update behavior type
-                this.updateBehaviorType();
-            }
-
-            updateBehaviorType() {
-                let behaviorType = '复杂';
-                
-                if (this.activePreset === 'cyclic') {
-                    behaviorType = '循环';
-                } else if (this.activePreset === 'doubling') {
-                    behaviorType = '倍增';
-                } else if (this.activePreset === 'collatz') {
-                    behaviorType = '类科拉茨';
-                } else if (this.currentString.length === 0) {
-                    behaviorType = '消亡';
-                } else if (this.history.length > 10 && this.currentString.length > 50) {
-                    behaviorType = '增长';
-                }
-                
-                document.getElementById('behavior-type').textContent = behaviorType;
-            }
-
-            updateSystemStatus(status) {
-                document.getElementById('system-status').textContent = status;
-            }
-
-            addToHistory(string, action) {
-                this.history.push({ step: this.stepCount, string, action });
-                
-                const historyContent = document.getElementById('history-content');
-                const item = document.createElement('div');
-                item.className = 'history-item';
-                item.innerHTML = `<span class="history-step">${this.stepCount}:</span> ${string}<span class="history-action">${action}</span>`;
-                historyContent.appendChild(item);
-                historyContent.scrollTop = historyContent.scrollHeight;
-            }
-
-            enableControls() {
-                document.getElementById('step-btn').disabled = false;
-                document.getElementById('run-btn').disabled = false;
-                document.getElementById('run-all-btn').disabled = false;
-            }
-
-            disableControls() {
-                document.getElementById('step-btn').disabled = true;
-                document.getElementById('run-btn').disabled = true;
-                document.getElementById('run-all-btn').disabled = true;
-            }
-
-            updateSystemAnalysis() {
-                const analyses = {
-                    wolfram925: "Wolfram 925系统：经典标记系统，展现了简单规则产生复杂行为的典型例子。通过删除前2个符号并根据第一个符号应用替换规则。",
-                    cyclic: "循环系统：简单的三符号循环，每个符号都替换为下一个符号，形成A→B→C→A的循环模式。",
-                    doubling: "倍增系统：二进制标记系统，每个符号都被替换为自身的两个副本，展现指数增长行为。",
-                    collatz: "类科拉茨系统：类似于著名的科拉茨猜想，偶数符号变为单个，奇数符号变为三个，展现复杂的数值行为。"
-                };
-
-                const text = analyses[this.activePreset] || `自定义系统：观察其产生的行为模式，分析其复杂性和规律性。`;
-                document.getElementById('analysis-text').textContent = text;
-            }
-        }
-
-        // Initialize on page load
-        document.addEventListener('DOMContentLoaded', () => new TagSystemExplorer());
-    </script>
+  </form>
+
+  <div class="output" id="output" aria-live="polite"></div>
+  <p class="note">The computation halts when the current word is shorter than the deletion number. The table lists each step, the removed block, the appended string, and the resulting word.</p>
+
+  <script>
+    (function() {
+      const PRESETS = {
+        nks: { deletion: 2, seed: '112211', rules: '1→11\n2→1', steps: 50 },
+        cyclic: { deletion: 1, seed: 'ABC', rules: 'A→B\nB→C\nC→A', steps: 18 },
+        busy: { deletion: 2, seed: '01', rules: '0→00\n1→001', steps: 60 }
+      };
+
+      const presetSelect = document.getElementById('preset-select');
+      const deletionInput = document.getElementById('deletion-input');
+      const seedInput = document.getElementById('seed-input');
+      const rulesInput = document.getElementById('rules-input');
+      const stepsInput = document.getElementById('steps-input');
+      const output = document.getElementById('output');
+      const controls = document.getElementById('controls');
+      const clearButton = document.getElementById('clear-button');
+
+      function normalise(line) {
+        return line.replace(/->/g, '→').replace(/⇒/g, '→');
+      }
+
+      function parseRules(text) {
+        const lines = text.split(/\r?\n/).map(line => normalise(line.trim())).filter(Boolean);
+        const map = new Map();
+        for (const line of lines) {
+          const match = line.match(/^([^→]+)→(.*)$/);
+          if (!match) continue;
+          const symbol = match[1].trim();
+          const replacement = match[2];
+          if (!symbol) continue;
+          map.set(symbol, replacement);
+        }
+        return map;
+      }
+
+      function runTagSystem(m, rules, word, maxSteps) {
+        const rows = [];
+        let current = word;
+        for (let step = 1; step <= maxSteps; step++) {
+          if (current.length < m) {
+            rows.push({ step, removed: current, appended: '', result: current, note: 'halt (word shorter than deletion number)' });
+            break;
+          }
+          const removed = current.slice(0, m);
+          const symbol = current[0];
+          const append = rules.has(symbol) ? rules.get(symbol) : '';
+          current = current.slice(m) + append;
+          rows.push({ step, removed, appended: append, result: current, note: '' });
+        }
+        return rows;
+      }
+
+      function render(rows) {
+        if (!rows.length) {
+          output.innerHTML = '<p>No output – check the rules and inputs.</p>';
+          return;
+        }
+        const table = document.createElement('table');
+        table.innerHTML = '<thead><tr><th>Step</th><th>Removed</th><th>Appended</th><th>Word</th><th>Note</th></tr></thead>';
+        const tbody = document.createElement('tbody');
+        for (const row of rows) {
+          const tr = document.createElement('tr');
+          const cells = [row.step, row.removed, row.appended, row.result, row.note];
+          cells.forEach((value, idx) => {
+            const td = document.createElement('td');
+            if (idx >= 1 && idx <= 3) td.className = 'code';
+            td.textContent = value;
+            tr.appendChild(td);
+          });
+          tbody.appendChild(tr);
+        }
+        table.appendChild(tbody);
+        output.innerHTML = '';
+        output.appendChild(table);
+      }
+
+      presetSelect.addEventListener('change', () => {
+        const preset = presetSelect.value;
+        if (preset === 'custom') return;
+        const data = PRESETS[preset];
+        deletionInput.value = data.deletion;
+        seedInput.value = data.seed;
+        rulesInput.value = data.rules;
+        stepsInput.value = data.steps;
+      });
+
+      clearButton.addEventListener('click', () => {
+        output.innerHTML = '';
+      });
+
+      controls.addEventListener('submit', (event) => {
+        event.preventDefault();
+        const deletion = Math.max(1, Math.min(6, parseInt(deletionInput.value, 10) || 1));
+        deletionInput.value = deletion;
+        const steps = Math.max(1, Math.min(400, parseInt(stepsInput.value, 10) || 1));
+        stepsInput.value = steps;
+        const rules = parseRules(rulesInput.value);
+        render(runTagSystem(deletion, rules, seedInput.value, steps));
+      });
+
+      controls.dispatchEvent(new Event('submit'));
+    })();
+  </script>
 </body>
-</html>
\ No newline at end of file
+</html>
diff --git a/demos/chapter3/tag-system-nks-demo.html b/demos/chapter3/tag-system-nks-demo.html
deleted file mode 100644
index 12da6d2897b51ed894694ae68e7c0f64cc9e6b87..0000000000000000000000000000000000000000
--- a/demos/chapter3/tag-system-nks-demo.html
+++ /dev/null
@@ -1,554 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-  <meta charset="UTF-8" />
-  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
-  <title>NKS-Style Tag System Demo</title>
-  <style>
-    :root {
-      --bg: #0f1115;
-      --panel: #171a21;
-      --ink: #e6e6e6;
-      --muted: #aab0bd;
-      --accent: #ffd54a;
-      --accent-2: #7dd3fc;
-      --danger: #ff7171;
-      --ok: #8be28b;
-      --outline: #2a2f3a;
-    }
-    * { box-sizing: border-box; }
-    body {
-      margin: 0;
-      font-family: ui-sans-serif, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
-      background: var(--bg);
-      color: var(--ink);
-      line-height: 1.45;
-    }
-    .wrap {
-      max-width: 1100px;
-      margin: 0 auto;
-      padding: 24px 16px 56px;
-    }
-    header h1 {
-      margin: 0 0 6px 0;
-      font-size: 26px;
-      font-weight: 700;
-      letter-spacing: 0.2px;
-    }
-    header p {
-      margin: 0 0 12px 0;
-      color: var(--muted);
-      max-width: 80ch;
-    }
-    .grid {
-      display: grid;
-      grid-template-columns: 360px 1fr;
-      gap: 16px;
-      margin-top: 16px;
-    }
-    @media (max-width: 980px) {
-      .grid { grid-template-columns: 1fr; }
-    }
-    .panel {
-      background: var(--panel);
-      border: 1px solid var(--outline);
-      border-radius: 10px;
-      padding: 14px;
-    }
-    h2 {
-      font-size: 16px;
-      font-weight: 700;
-      margin: 6px 0 12px 0;
-      color: var(--accent);
-    }
-    .row { margin: 10px 0; }
-    label { display: block; font-size: 12px; color: var(--muted); margin-bottom: 6px; }
-    input[type="text"], input[type="number"], textarea, select {
-      width: 100%;
-      padding: 8px 10px;
-      border-radius: 8px;
-      border: 1px solid var(--outline);
-      background: #0f131a;
-      color: var(--ink);
-      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
-      font-size: 13px;
-    }
-    textarea { min-height: 92px; resize: vertical; }
-    .controls {
-      display: grid;
-      grid-template-columns: repeat(2, minmax(0, 1fr));
-      gap: 8px;
-      margin-top: 6px;
-    }
-    button {
-      padding: 9px 12px;
-      border-radius: 8px;
-      border: 1px solid var(--outline);
-      background: #121620;
-      color: var(--ink);
-      cursor: pointer;
-      font-weight: 600;
-    }
-    button:hover { border-color: #394152; }
-    .primary { background: #1a2130; border-color: #30384a; }
-    .accent { background: #1e2430; border-color: #4b566e; color: var(--accent); }
-    .danger { color: var(--danger); }
-    .muted { color: var(--muted); }
-    .inline { display: inline-flex; gap: 8px; align-items: center; }
-    .inline input[type="number"] { width: 88px; }
-    .status {
-      display: flex; gap: 16px; flex-wrap: wrap;
-      padding: 10px 12px; border: 1px dashed var(--outline); border-radius: 8px;
-      background: #121621;
-      font-size: 13px;
-    }
-    .status b { color: var(--accent-2); font-weight: 700; }
-    .tape {
-      border: 1px solid var(--outline);
-      border-radius: 8px;
-      background: #0f131a;
-      padding: 8px;
-      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
-      font-size: 15px;
-      overflow-x: auto;
-      white-space: pre;
-    }
-    .tape .kill { text-decoration: line-through; color: #ff9aa2; }
-    .tape .append { color: #a0ffa0; }
-    .hist {
-      max-height: 280px; overflow: auto;
-      border: 1px solid var(--outline);
-      border-radius: 8px;
-      background: #0f131a;
-      padding: 8px;
-      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
-      font-size: 12px;
-    }
-    .hist .row { display: grid; grid-template-columns: 60px 1fr; gap: 12px; padding: 4px 0; border-bottom: 1px solid #161b26; }
-    .hist .row:last-child { border-bottom: none; }
-    .legend { display: flex; gap: 8px; flex-wrap: wrap; font-size: 12px; }
-    .chip { display: inline-flex; align-items: center; gap: 6px; padding: 4px 8px; border: 1px solid var(--outline); border-radius: 999px; }
-    .swatch { width: 12px; height: 12px; border-radius: 3px; display: inline-block; }
-    .hint { color: var(--muted); font-size: 12px; }
-    .note { color: #9dd6ff; font-size: 12px; }
-    .footer { margin-top: 14px; color: var(--muted); font-size: 12px; }
-    canvas { width: 100%; height: 280px; border: 1px solid var(--outline); border-radius: 8px; background: #0e1218; }
-  </style>
-  <meta name="description" content="Interactive NKS-style Tag System demo: choose deletion number, define rules, set initial word, and watch evolution." />
-  <meta name="robots" content="noindex" />
-  <script>
-    // Utility: deterministic color per symbol
-    function colorFor(symbol) {
-      // Hash symbol to hue
-      let h = 0;
-      for (let i = 0; i < symbol.length; i++) h = (h * 131 + symbol.charCodeAt(i)) >>> 0;
-      const hue = h % 360;
-      return `hsl(${hue}, 70%, 58%)`;
-    }
-
-    // Parse rules from textarea; each line: "A -> AB"
-    function parseRules(text) {
-      const rules = new Map();
-      const lines = text.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
-      for (const line of lines) {
-        // Support forms: A->AB, A → AB, A: AB
-        const m = line.match(/^(.+?)(?:\s*[-:→]*>\s*|\s*:\s*|\s+)(.*)$/);
-        if (!m) continue;
-        const key = m[1].trim();
-        const val = m[2] != null ? m[2].trim() : '';
-        if (!key) continue;
-        rules.set(key, val);
-      }
-      return rules;
-    }
-
-    function stringifyRules(map) {
-      return Array.from(map.entries()).map(([k,v]) => `${k} -> ${v}`).join("\n");
-    }
-
-    function uniqueSymbolsFrom(rules, word) {
-      const set = new Set();
-      for (const [k,v] of rules) { for (const ch of k) set.add(ch); for (const ch of v) set.add(ch); }
-      for (const ch of word) set.add(ch);
-      return Array.from(set);
-    }
-
-    // Tag System engine
-    class TagSystem {
-      constructor(m, rules, word) {
-        this.m = Math.max(1, Number(m) || 2);
-        this.rules = new Map(rules);  // Map(symbol -> string)
-        this.word = String(word || '');
-        this.step = 0;
-        this.halted = false;
-        this.seen = new Set();
-        this.history = []; // {step, removed, looked, appended, result}
-      }
-
-      next() {
-        if (this.halted) return false;
-        if (this.word.length < this.m) {
-          this.halted = true;
-          this.history.push({ step: this.step, removed: this.word, looked: '', appended: '', result: '', event: 'halt' });
-          return false;
-        }
-        const removed = this.word.slice(0, this.m);
-        const looked = this.word[0];
-        const appended = this.rules.get(looked) ?? '';
-        const result = this.word.slice(this.m) + appended;
-        this.word = result;
-        this.step += 1;
-        const key = `#${this.word}`;
-        const loop = this.seen.has(key);
-        this.seen.add(key);
-        this.history.push({ step: this.step, removed, looked, appended, result, event: loop ? 'loop' : '' });
-        if (loop) this.halted = true;
-        return !this.halted;
-      }
-    }
-
-    // UI Controller
-    const App = {
-      running: false,
-      timer: null,
-      speedMs: 120,
-      ts: null,
-      colors: new Map(),
-      examples: {
-        // A few varied examples (not copied from existing demo)
-        'Classic 2‑tag (halts)': {
-          m: 2,
-          rules: new Map([["A","AB"],["B","A"]]),
-          init: 'AAA'
-        },
-        'Binary duplication (steady length)': {
-          m: 2,
-          rules: new Map([["0","00"],["1","11"]]),
-          init: '101001'
-        },
-        'Cyclic 3‑symbols': {
-          m: 2,
-          rules: new Map([["A","B"],["B","C"],["C","A"]]),
-          init: 'ABCABC'
-        },
-        'Growth (mismatch lengths)': {
-          m: 2,
-          rules: new Map([["A","ABA"],["B","BB"]]),
-          init: 'ABABA'
-        },
-        'Eraser': {
-          m: 2,
-          rules: new Map([["X",""],["Y","X"]]),
-          init: 'YYYYYXX'
-        }
-      },
-
-      el: {},
-
-      mount() {
-        this.cacheEls();
-        this.buildExamples();
-        this.bind();
-        // Load from URL if present, else pick first example
-        if (!this.tryLoadFromUrl()) this.loadExample(Object.keys(this.examples)[0]);
-      },
-
-      cacheEls() {
-        const q = sel => document.querySelector(sel);
-        this.el.m = q('#m');
-        this.el.rules = q('#rules');
-        this.el.init = q('#init');
-        this.el.run = q('#run');
-        this.el.step = q('#step');
-        this.el.pause = q('#pause');
-        this.el.reset = q('#reset');
-        this.el.speed = q('#speed');
-        this.el.status = q('#status');
-        this.el.length = q('#length');
-        this.el.stepNo = q('#stepNo');
-        this.el.tape = q('#tape');
-        this.el.history = q('#history');
-        this.el.legend = q('#legend');
-        this.el.examples = q('#examples');
-        this.el.share = q('#share');
-        this.el.canvas = q('#evo');
-        this.ctx = this.el.canvas.getContext('2d');
-      },
-
-      bind() {
-        this.el.run.addEventListener('click', () => this.start());
-        this.el.pause.addEventListener('click', () => this.stop());
-        this.el.reset.addEventListener('click', () => this.reset());
-        this.el.step.addEventListener('click', () => { this.ensureEngine(); this.tick(); });
-        this.el.rules.addEventListener('input', () => this.refreshLegend());
-        this.el.init.addEventListener('input', () => this.refreshLegend());
-        this.el.speed.addEventListener('input', (e) => { this.speedMs = Number(e.target.value); });
-        this.el.examples.addEventListener('change', (e) => this.loadExample(e.target.value));
-        this.el.share.addEventListener('click', () => this.shareUrl());
-        window.addEventListener('resize', () => this.drawEvolution());
-      },
-
-      buildExamples() {
-        const sel = this.el.examples;
-        sel.innerHTML = '';
-        for (const name of Object.keys(this.examples)) {
-          const opt = document.createElement('option');
-          opt.value = name; opt.textContent = name; sel.appendChild(opt);
-        }
-      },
-
-      loadExample(name) {
-        const ex = this.examples[name];
-        if (!ex) return;
-        this.el.examples.value = name;
-        this.el.m.value = ex.m;
-        this.el.rules.value = stringifyRules(ex.rules);
-        this.el.init.value = ex.init;
-        this.reset();
-        this.refreshLegend();
-      },
-
-      tryLoadFromUrl() {
-        const params = new URLSearchParams(location.search);
-        if (!params.has('m') && !params.has('rules') && !params.has('init')) return false;
-        this.el.m.value = params.get('m') || '2';
-        try {
-          const decoded = decodeURIComponent(params.get('rules') || '');
-          this.el.rules.value = decoded;
-        } catch { /* ignore */ }
-        this.el.init.value = params.get('init') || '';
-        this.reset();
-        this.refreshLegend();
-        return true;
-      },
-
-      shareUrl() {
-        const m = this.el.m.value;
-        const rules = encodeURIComponent(this.el.rules.value.trim());
-        const init = encodeURIComponent(this.el.init.value.trim());
-        const url = `${location.origin}${location.pathname}?m=${m}&rules=${rules}&init=${init}`;
-        navigator.clipboard?.writeText(url).catch(() => {});
-        this.toast('Share URL copied to clipboard');
-      },
-
-      toast(msg) {
-        this.el.status.textContent = msg;
-        setTimeout(() => this.updateStatus(), 1200);
-      },
-
-      ensureEngine() {
-        if (this.ts) return;
-        const m = Number(this.el.m.value) || 2;
-        const rules = parseRules(this.el.rules.value);
-        const init = this.el.init.value;
-        this.ts = new TagSystem(m, rules, init);
-        this.history = [{ step: 0, result: init }];
-        this.drawEvolution(true);
-        this.refreshLegend();
-        this.updateStatus();
-        this.renderTape();
-      },
-
-      start() {
-        this.ensureEngine();
-        if (this.running) return;
-        this.running = true;
-        const loop = () => {
-          if (!this.running) return;
-          if (!this.tick()) { this.stop(); return; }
-          this.timer = setTimeout(loop, this.speedMs);
-        };
-        loop();
-      },
-
-      stop() {
-        this.running = false;
-        if (this.timer) { clearTimeout(this.timer); this.timer = null; }
-        this.updateStatus();
-      },
-
-      reset() {
-        this.stop();
-        this.ts = null;
-        this.el.history.innerHTML = '';
-        this.el.tape.textContent = '';
-        this.drawEvolution(true);
-        this.updateStatus();
-      },
-
-      tick() {
-        if (!this.ts) return false;
-        const alive = this.ts.next();
-        const last = this.ts.history[this.ts.history.length - 1];
-        this.appendHistory(last);
-        this.renderTape(last);
-        this.drawEvolution();
-        this.updateStatus();
-        return alive;
-      },
-
-      updateStatus() {
-        if (!this.ts) {
-          this.el.status.innerHTML = 'Ready. Define rules and initial word, then run or step.';
-          this.el.length.textContent = '–';
-          this.el.stepNo.textContent = '–';
-          return;
-        }
-        const halted = this.ts.halted;
-        const loopy = this.ts.history.at(-1)?.event === 'loop';
-        const msg = halted ? (loopy ? 'Stopped (loop detected)' : 'Halted (word too short)') : (this.running ? 'Running…' : 'Paused');
-        this.el.status.innerHTML = msg;
-        this.el.length.textContent = String(this.ts.word.length);
-        this.el.stepNo.textContent = String(this.ts.step);
-      },
-
-      renderTape(last) {
-        if (!this.ts) { this.el.tape.textContent = ''; return; }
-        const m = this.ts.m;
-        const word = this.ts.word;
-        const prev = last || this.ts.history[this.ts.history.length - 1];
-        const removed = prev?.removed ?? '';
-        const appended = prev?.appended ?? '';
-        const kill = (removed || '').padEnd(m, ' ');
-        // Build a small narration line
-        const narr = prev?.step ? `Step ${prev.step}: delete "${removed}" append "${appended}"` : 'Initial';
-        const left = kill ? `<span class="kill">${kill}</span>` : '';
-        const right = appended ? ` ⟶ <span class="append">${appended}</span>` : '';
-        const current = word.replace(/ /g, '·');
-        this.el.tape.innerHTML = `${narr}\n${left}${current}${right}`;
-      },
-
-      appendHistory(entry) {
-        const div = document.createElement('div');
-        div.className = 'row';
-        const label = document.createElement('div');
-        label.textContent = String(entry.step).padStart(4, ' ');
-        const content = document.createElement('div');
-        const action = entry.event === 'loop' ? ' (loop)' : '';
-        content.textContent = `del:"${entry.removed}" look:"${entry.looked}" add:"${entry.appended}" -> ${entry.result}${action}`;
-        div.appendChild(label); div.appendChild(content);
-        this.el.history.appendChild(div);
-        this.el.history.scrollTop = this.el.history.scrollHeight;
-      },
-
-      refreshLegend() {
-        const rules = parseRules(this.el.rules.value);
-        const syms = uniqueSymbolsFrom(rules, this.el.init.value);
-        this.colors.clear();
-        for (const s of syms) this.colors.set(s, colorFor(s));
-        const frag = document.createDocumentFragment();
-        for (const s of syms) {
-          const chip = document.createElement('span');
-          chip.className = 'chip';
-          chip.innerHTML = `<span class="swatch" style="background:${this.colors.get(s)}"></span><span>${s}</span>`;
-          frag.appendChild(chip);
-        }
-        this.el.legend.innerHTML = '';
-        this.el.legend.appendChild(frag);
-        this.drawEvolution(true);
-      },
-
-      drawEvolution(clearOnly = false) {
-        const c = this.el.canvas; const ctx = this.ctx;
-        const DPR = Math.max(1, Math.floor(window.devicePixelRatio || 1));
-        const pxW = c.clientWidth * DPR; const pxH = c.clientHeight * DPR;
-        if (c.width !== pxW || c.height !== pxH) { c.width = pxW; c.height = pxH; }
-        ctx.clearRect(0,0,pxW,pxH);
-        if (clearOnly || !this.ts) return;
-        // Render each history row as colored cells. Left aligned like NKS figures.
-        const rowH = 12 * DPR; const gap = 2 * DPR; const cell = 8 * DPR; const cellGap = 1 * DPR;
-        const maxRows = Math.floor((pxH - gap) / (rowH + gap));
-        const history = this.ts.history.slice(-maxRows);
-        let y = gap;
-        for (const h of history) {
-          const str = h.result;
-          let x = gap;
-          for (const ch of str) {
-            const col = this.colors.get(ch) || '#39414f';
-            ctx.fillStyle = col;
-            ctx.fillRect(x, y, cell, cell);
-            x += cell + cellGap;
-            if (x > pxW - cell - gap) break; // clip
-          }
-          y += rowH + gap;
-          if (y > pxH - rowH) break;
-        }
-      }
-    };
-
-    window.addEventListener('DOMContentLoaded', () => App.mount());
-  </script>
-</head>
-<body>
-  <div class="wrap">
-    <header>
-      <h1>Tag System (NKS‑style) Demo</h1>
-      <p>
-        A tag system evolves a word by: (1) looking at the first symbol, appending a string determined by it, then (2) deleting a fixed number m of symbols from the front. Repeat until the word is shorter than m (halts) or a loop occurs.
-      </p>
-    </header>
-
-    <div class="grid">
-      <section class="panel">
-        <h2>Setup</h2>
-        <div class="row inline">
-          <label for="m">Deletion number m</label>
-          <input id="m" type="number" min="1" value="2" />
-        </div>
-        <div class="row">
-          <label for="rules">Rules (one per line: A -> AB)</label>
-          <textarea id="rules" spellcheck="false" placeholder="A -> AB
-B -> A"></textarea>
-        </div>
-        <div class="row">
-          <label for="init">Initial word</label>
-          <input id="init" type="text" value="AAA" spellcheck="false" />
-        </div>
-
-        <div class="row">
-          <div class="controls">
-            <button id="run" class="primary">Run</button>
-            <button id="pause">Pause</button>
-            <button id="step">Step</button>
-            <button id="reset" class="danger">Reset</button>
-          </div>
-        </div>
-        <div class="row inline">
-          <label for="speed">Speed (ms/step)</label>
-          <input id="speed" type="number" min="10" step="10" value="120" />
-          <button id="share" class="accent">Share URL</button>
-        </div>
-
-        <div class="row">
-          <label>Examples</label>
-          <select id="examples"></select>
-        </div>
-
-        <div class="row status">
-          <div>Status: <b id="status">Ready</b></div>
-          <div>Step: <b id="stepNo">–</b></div>
-          <div>Length: <b id="length">–</b></div>
-        </div>
-
-        <div class="row">
-          <label>Alphabet</label>
-          <div id="legend" class="legend"></div>
-        </div>
-        <div class="hint">Undefined symbols simply append nothing.</div>
-      </section>
-
-      <section class="panel">
-        <h2>Current State</h2>
-        <div id="tape" class="tape">Define a system and press Run.</div>
-
-        <h2>Evolution (rows over time)</h2>
-        <canvas id="evo" width="800" height="280"></canvas>
-
-        <h2>History</h2>
-        <div id="history" class="hist"></div>
-        <div class="footer note">Loop detection is based on previously seen words; when the same word reappears, the demo stops.</div>
-      </section>
-    </div>
-  </div>
-</body>
-</html>
diff --git a/demos/chapter3/three-color-ca-demo-standalone.html b/demos/chapter3/three-color-ca-demo-standalone.html
index 3f77be70ceb4f7f271c175687864a6ede9357e99..cd0d66a4b17be4a2af0dc1645db1a8b8cf19cb33 100644
--- a/demos/chapter3/three-color-ca-demo-standalone.html
+++ b/demos/chapter3/three-color-ca-demo-standalone.html
@@ -1,429 +1,328 @@
-<!doctype html>
+<!DOCTYPE html>
 <html lang="en">
-  <head>
-    <meta charset="utf-8" />
-    <meta name="viewport" content="width=device-width, initial-scale=1" />
-    <title>3‑Color Cellular Automata — Standalone Demo</title>
-    <style>
-      :root {
-        --bg: #0f1116;
-        --panel: #171923;
-        --muted: #8a93a6;
-        --text: #e6e8ef;
-        --accent: #60a5fa;
-        --ok: #34d399;
-        --warn: #fbbf24;
+<head>
+  <meta charset="utf-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <title>NKS · Three-Color Totalistic Cellular Automaton (Standalone)</title>
+  <style>
+    :root {
+      color-scheme: light;
+      font-family: "Helvetica Neue", Arial, system-ui, sans-serif;
+    }
+    body {
+      margin: 24px;
+      background: #fdfdfb;
+      color: #202022;
+      max-width: 960px;
+    }
+    h1 {
+      font-size: 1.9rem;
+      margin-bottom: 0.4rem;
+    }
+    p.lead {
+      margin-bottom: 1.2rem;
+      font-size: 1.05rem;
+      line-height: 1.55;
+    }
+    form {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
+      gap: 1rem;
+      padding: 1rem;
+      background: #fff;
+      border: 1px solid #d6d2c4;
+      border-radius: 8px;
+      box-shadow: 0 4px 12px rgba(32, 32, 34, 0.04);
+      margin-bottom: 1.5rem;
+    }
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 0.35rem;
+      font-size: 0.9rem;
+      color: #5c5648;
+    }
+    select,
+    input[type="number"],
+    button {
+      font: inherit;
+      padding: 0.4rem 0.55rem;
+      border-radius: 6px;
+      border: 1px solid #c1bbad;
+      background: #fffef9;
+      color: inherit;
+    }
+    select:focus,
+    input[type="number"]:focus {
+      outline: 2px solid #a08c5a;
+      outline-offset: 1px;
+    }
+    button {
+      cursor: pointer;
+      background: #d8c79d;
+      border-color: #cbb37a;
+      color: #2f2a23;
+      transition: background 0.15s ease;
+    }
+    button:hover {
+      background: #e5d5a8;
+    }
+    button.secondary {
+      background: #f3efe2;
+      border-color: #cfc7b5;
+    }
+    canvas {
+      display: block;
+      max-width: 100%;
+      height: auto;
+      border: 1px solid #d6d2c4;
+      background: #fff;
+      image-rendering: pixelated;
+      margin-bottom: 1.25rem;
+    }
+    .summary {
+      display: flex;
+      flex-wrap: wrap;
+      gap: 1.5rem;
+      align-items: flex-start;
+      background: #fff;
+      border: 1px solid #d6d2c4;
+      border-radius: 8px;
+      padding: 1rem 1.2rem;
+    }
+    .summary > div {
+      flex: 1 1 240px;
+    }
+    table {
+      width: 100%;
+      border-collapse: collapse;
+      font-size: 0.9rem;
+    }
+    th, td {
+      border: 1px solid #e5e0d3;
+      padding: 0.35rem 0.5rem;
+      text-align: center;
+    }
+    th {
+      background: #f3efe2;
+      font-weight: 600;
+    }
+    .note {
+      font-size: 0.85rem;
+      color: #635d4f;
+      margin-top: 0.3rem;
+    }
+    @media (max-width: 600px) {
+      body {
+        margin: 16px;
       }
-      * { box-sizing: border-box; }
-      html, body {
-        margin: 0; padding: 0; height: 100%; color: var(--text); background: var(--bg);
-        font: 14px/1.4 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica, Arial;
+      form {
+        grid-template-columns: 1fr;
       }
-      header {
-        padding: 16px 20px; border-bottom: 1px solid #24283a; background: linear-gradient(180deg, #141825, #101421);
-      }
-      header h1 { margin: 0 0 6px; font-size: 18px; }
-      header p { margin: 0; color: var(--muted); font-size: 13px; }
-      .container { display: grid; grid-template-columns: 320px 1fr; height: calc(100% - 72px); }
-      .controls {
-        padding: 14px; border-right: 1px solid #24283a; background: var(--panel); overflow: auto;
-      }
-      .group { margin-bottom: 14px; }
-      .group h2 { margin: 0 0 8px; font-size: 13px; color: var(--muted); font-weight: 600; letter-spacing: .02em; }
-      .row { display: flex; align-items: center; gap: 8px; margin: 6px 0; }
-      .row label { min-width: 90px; color: var(--muted); font-size: 12px; }
-      input[type="number"], input[type="text"], select {
-        width: 100%; padding: 6px 8px; border-radius: 6px; border: 1px solid #2a2f45; background: #0f1320; color: var(--text);
-      }
-      input[type="range"] { width: 100%; }
-      input[type="checkbox"] { transform: translateY(1px); }
-      input[type="color"] {
-        appearance: none; width: 32px; height: 24px; border: 1px solid #2a2f45; border-radius: 4px; background: none; padding: 0;
-      }
-      .buttons { display: flex; gap: 8px; flex-wrap: wrap; }
-      button {
-        padding: 6px 10px; border: 1px solid #2a2f45; border-radius: 6px; background: #0e1322; color: var(--text);
-        cursor: pointer;
-      }
-      button.primary { background: #1b243b; border-color: #2f3a57; }
-      button:active { transform: translateY(1px); }
-      .meta { color: var(--muted); font-size: 12px; }
-      .canvas-wrap { position: relative; overflow: auto; height: 100%; background: #0a0d17; }
-      canvas { display: block; image-rendering: pixelated; }
-      .footer { padding: 10px 14px; border-top: 1px solid #24283a; color: var(--muted); font-size: 12px; }
-      code { background: #0e1322; padding: 1px 4px; border-radius: 4px; border: 1px solid #2a2f45; }
-    </style>
-  </head>
-  <body>
-    <header>
-      <h1>3‑Color Cellular Automata — Standalone Demo</h1>
-      <p>1D, radius‑1, 3 states {0,1,2}. Rule encoded as a base‑3 integer over all 27 neighborhoods (L,C,R) → output.</p>
-    </header>
-    <div class="container">
-      <aside class="controls">
-        <div class="group">
-          <h2>Run</h2>
-          <div class="row buttons">
-            <button id="playPause" class="primary">Play</button>
-            <button id="step">Step</button>
-            <button id="reset">Reset</button>
-          </div>
-          <div class="row">
-            <label for="speed">Speed</label>
-            <input id="speed" type="range" min="1" max="120" step="1" value="30" />
-            <span class="meta" id="speedLabel">30 gen/s</span>
-          </div>
-          <div class="row">
-            <label>Generation</label>
-            <span id="genLabel" class="meta">0</span>
-          </div>
-        </div>
-
-        <div class="group">
-          <h2>Grid</h2>
-          <div class="row">
-            <label for="width">Width</label>
-            <input id="width" type="number" min="16" max="2048" step="1" value="256" />
-          </div>
-          <div class="row">
-            <label for="cellSize">Cell Size</label>
-            <input id="cellSize" type="range" min="2" max="10" value="3" />
-            <span class="meta" id="cellSizeLabel">3 px</span>
-          </div>
-          <div class="row">
-            <label for="wrap">Wrap</label>
-            <input id="wrap" type="checkbox" checked />
-          </div>
-          <div class="row">
-            <label for="initMode">Initial Row</label>
-            <select id="initMode">
-              <option value="single" selected>Single 1 in center</option>
-              <option value="random">Random</option>
-            </select>
-            <button id="randomizeInit">Randomize</button>
-          </div>
-        </div>
-
-        <div class="group">
-          <h2>Rule</h2>
-          <div class="row">
-            <label for="ruleNumber">Base‑10</label>
-            <input id="ruleNumber" type="number" min="0" step="1" />
-            <button id="randomizeRule">Random</button>
-          </div>
-          <div class="row">
-            <label for="ruleBase3">Base‑3 (27 digits)</label>
-            <input id="ruleBase3" type="text" placeholder="digits[26]..digits[0]" />
-          </div>
-          <div class="meta">
-            Mapping: index = L×9 + C×3 + R; digits[0] → (0,0,0), digits[26] → (2,2,2).
-          </div>
-        </div>
-
-        <div class="group">
-          <h2>Colors</h2>
-          <div class="row">
-            <label>State 0</label>
-            <input id="color0" type="color" value="#000000" />
-            <label>1</label>
-            <input id="color1" type="color" value="#ffcc00" />
-            <label>2</label>
-            <input id="color2" type="color" value="#00aaff" />
-          </div>
-        </div>
-      </aside>
-
-      <main class="canvas-wrap">
-        <canvas id="ca"></canvas>
-      </main>
+    }
+  </style>
+</head>
+<body>
+  <h1>Three-Color Totalistic Cellular Automaton (Standalone)</h1>
+  <p class="lead">A lightweight copy of the official Chapter 3 demo from <em>A New Kind of Science</em>.
+    Use it offline or embed it without additional assets. All controls and behaviour are identical to the
+    original Wolfram demo.</p>
+
+  <form id="controls" autocomplete="off">
+    <label>Preset rules from the book
+      <select id="preset-select">
+        <option value="777">Rule 777 – irregular fragments (NKS p.67)</option>
+        <option value="600">Rule 600 – triangular growth (NKS p.67)</option>
+        <option value="924">Rule 924 – nested bands (NKS p.67)</option>
+        <option value="1059">Rule 1059 – filamentary (NKS p.68)</option>
+        <option value="1545">Rule 1545 – chaotic spread (NKS p.69)</option>
+        <option value="1635">Rule 1635 – repeating waves (NKS p.69)</option>
+        <option value="custom">Custom rule…</option>
+      </select>
+    </label>
+    <label id="custom-rule-wrapper">Rule number
+      <input type="number" id="rule-input" min="0" max="2186" value="777" required>
+    </label>
+    <label>Number of rows
+      <input type="number" id="rows-input" min="20" max="400" value="200">
+    </label>
+    <label>Initial row
+      <select id="seed-select">
+        <option value="single">Single black cell</option>
+        <option value="random">Random three-colour row</option>
+      </select>
+    </label>
+    <div style="display:flex; gap:0.5rem; align-items:center;">
+      <button type="submit">Run rule</button>
+      <button type="button" id="random-button" class="secondary">Random preset</button>
     </div>
-
-    <div class="footer">
-      Notes: This implements a 1D, radius‑1, 3‑state CA. The rule number is interpreted as a base‑3 integer of 27 digits.
-      For a neighborhood (L,C,R) with states in {0,1,2}, its index is L×9 + C×3 + R. The output state is the base‑3 digit at that index.
+  </form>
+
+  <canvas id="ca-canvas" width="720" height="450" aria-label="Three-colour totalistic cellular automaton"></canvas>
+
+  <div class="summary">
+    <div>
+      <h2 style="margin:0 0 0.4rem; font-size:1.1rem;">Lookup table</h2>
+      <p id="rule-caption" class="note" style="margin-bottom:0.6rem;">Rule 777</p>
+      <table aria-describedby="rule-caption">
+        <thead>
+          <tr><th>Neighbour sum</th><th>Average</th><th>New colour</th></tr>
+        </thead>
+        <tbody id="lookup-body"></tbody>
+      </table>
     </div>
-
-    <script>
-      (function() {
-        'use strict';
-
-        function clamp(n, lo, hi) { return Math.max(lo, Math.min(hi, n)); }
-
-        function numberToBase3Digits(num, length = 27) {
-          const digits = new Array(length).fill(0);
-          let n = Math.floor(Number(num));
-          if (!Number.isFinite(n) || n < 0) n = 0;
-          for (let i = 0; i < length && n > 0; i++) {
-            digits[i] = (n % 3) | 0; // digits[0] corresponds to (0,0,0)
-            n = Math.floor(n / 3);
-          }
-          return digits;
-        }
-
-        function digitsToNumber(digits) {
-          let n = 0; let pow = 1;
-          for (let i = 0; i < digits.length; i++) { n += pow * (digits[i] | 0); pow *= 3; }
-          return n;
-        }
-
-        function digitsToString(digits) {
-          return digits.slice().reverse().join(''); // high → low
-        }
-
-        function stringToDigits(str) {
-          const s = (str || '').trim().replace(/[^012]/g, '');
-          const out = new Array(27).fill(0);
-          // s[0] is most significant (for (2,2,2)), s[last] is for (0,0,0)
-          let j = 26;
-          for (let i = 0; i < s.length && j >= 0; i++, j--) {
-            const c = s[i]; out[j] = c === '2' ? 2 : c === '1' ? 1 : 0;
-          }
-          return out;
+    <div>
+      <h2 style="margin:0 0 0.4rem; font-size:1.1rem;">Legend</h2>
+      <ul style="list-style:none; padding-left:0; margin:0;">
+        <li class="note">Colour 0 – white</li>
+        <li class="note">Colour 1 – grey</li>
+        <li class="note">Colour 2 – black</li>
+      </ul>
+      <p class="note" style="margin-top:0.8rem;">Totalistic rules depend only on the sum of a cell and its two neighbours.
+        The official NKS demo runs with a fixed width of <code>2×rows + 1</code> so the pattern has space to expand.</p>
+    </div>
+  </div>
+
+  <script>
+    (function() {
+      const presetSelect = document.getElementById('preset-select');
+      const ruleInput = document.getElementById('rule-input');
+      const rowsInput = document.getElementById('rows-input');
+      const seedSelect = document.getElementById('seed-select');
+      const controlsForm = document.getElementById('controls');
+      const canvas = document.getElementById('ca-canvas');
+      const ctx = canvas.getContext('2d');
+      const lookupBody = document.getElementById('lookup-body');
+      const ruleCaption = document.getElementById('rule-caption');
+      const randomButton = document.getElementById('random-button');
+      const customRuleWrapper = document.getElementById('custom-rule-wrapper');
+
+      const presetValues = ['777','600','924','1059','1545','1635'];
+      const averages = ['0','1/3','2/3','1','4/3','5/3','2'];
+      const colours = ['#ffffff','#b7b7b7','#1c1c1c'];
+
+      function decodeRule(ruleNumber) {
+        const digits = ruleNumber.toString(3).padStart(7, '0');
+        const table = new Array(7);
+        for (let i = 0; i < 7; i++) {
+          table[i] = parseInt(digits[6 - i], 10);
         }
+        return table;
+      }
 
-        class ThreeColorCA {
-          constructor(opts) {
-            this.width = opts.width | 0;
-            this.wrap = !!opts.wrap;
-            this.ruleDigits = numberToBase3Digits(opts.ruleNumber ?? 0, 27);
-            this.generation = 0;
-            this.rows = [];
-            this.state = new Int8Array(this.width);
-            const init = opts.initial || 'single';
-            if (init === 'single') {
-              this.state[(this.width / 2) | 0] = 1;
-            } else if (init === 'random') {
-              for (let i = 0; i < this.width; i++) this.state[i] = (Math.random() * 3) | 0;
-            } else if (Array.isArray(opts.initialState)) {
-              for (let i = 0; i < this.width && i < opts.initialState.length; i++) this.state[i] = opts.initialState[i] | 0;
-            }
-            this.rows.push(this.state.slice());
-          }
-          setRuleNumber(n) {
-            this.ruleDigits = numberToBase3Digits(n, 27);
-          }
-          setWrap(wrap) { this.wrap = !!wrap; }
-          step() {
-            const w = this.width; const next = new Int8Array(w); const curr = this.state; const digits = this.ruleDigits;
-            for (let x = 0; x < w; x++) {
-              const c = curr[x];
-              const l = (x === 0 ? (this.wrap ? curr[w - 1] : 0) : curr[x - 1]);
-              const r = (x === w - 1 ? (this.wrap ? curr[0] : 0) : curr[x + 1]);
-              const idx = l * 9 + c * 3 + r;
-              next[x] = digits[idx];
-            }
-            this.state = next; this.rows.push(next.slice()); this.generation++;
-            return next;
-          }
-          reset(width, initMode) {
-            if (width != null) this.width = width | 0;
-            this.generation = 0; this.rows = []; this.state = new Int8Array(this.width);
-            const init = initMode || 'single';
-            if (init === 'single') { this.state[(this.width / 2) | 0] = 1; }
-            else if (init === 'random') { for (let i = 0; i < this.width; i++) this.state[i] = (Math.random() * 3) | 0; }
-            this.rows.push(this.state.slice());
+      function buildInitialRow(width, mode) {
+        const row = new Array(width).fill(0);
+        if (mode === 'single') {
+          row[Math.floor(width / 2)] = 2;
+        } else {
+          for (let i = 0; i < width; i++) {
+            row[i] = Math.floor(Math.random() * 3);
           }
         }
+        return row;
+      }
 
-        class CanvasRenderer {
-          constructor(canvas, colors, cellSize = 3) {
-            this.canvas = canvas;
-            this.ctx = canvas.getContext('2d', { alpha: false });
-            this.colors = colors || ['#000000', '#ffcc00', '#00aaff'];
-            this.cellSize = cellSize | 0;
-          }
-          setColors(colors) { this.colors = colors.slice(0, 3); }
-          setCellSize(px) { this.cellSize = clamp(px | 0, 1, 20); }
-          drawAll(rows) {
-            if (!rows.length) return;
-            const wCells = rows[0].length; const hCells = rows.length; const cs = this.cellSize;
-            const canvas = this.canvas; const ctx = this.ctx; ctx.imageSmoothingEnabled = false;
-            canvas.width = wCells * cs; canvas.height = hCells * cs;
-            // Build 1:1 ImageData, then scale drawImage for crisp pixels
-            const img = ctx.createImageData(wCells, hCells);
-            const palette = this.colors.map(hexToRGBA);
-            for (let y = 0; y < hCells; y++) {
-              const row = rows[y];
-              for (let x = 0; x < wCells; x++) {
-                const v = row[x] | 0; const rgba = palette[v] || [0, 0, 0, 255];
-                const i = (y * wCells + x) * 4; img.data[i] = rgba[0]; img.data[i + 1] = rgba[1]; img.data[i + 2] = rgba[2]; img.data[i + 3] = 255;
-              }
-            }
-            const temp = document.createElement('canvas'); temp.width = wCells; temp.height = hCells;
-            temp.getContext('2d').putImageData(img, 0, 0);
-            ctx.clearRect(0, 0, canvas.width, canvas.height);
-            ctx.drawImage(temp, 0, 0, wCells, hCells, 0, 0, wCells * cs, hCells * cs);
-          }
-          appendRow(row, yIndex) {
-            const wCells = row.length; const cs = this.cellSize; const canvas = this.canvas; const ctx = this.ctx; ctx.imageSmoothingEnabled = false;
-            // If width or height changed, redraw full for simplicity
-            if (canvas.width !== wCells * cs || canvas.height < (yIndex + 1) * cs) {
-              // Expand and redraw entire content is handled externally via drawAll
-              return false;
-            }
-            for (let x = 0; x < wCells; x++) {
-              ctx.fillStyle = this.colors[row[x]];
-              ctx.fillRect(x * cs, yIndex * cs, cs, cs);
-            }
-            return true;
+      function evolve(ruleNumber, rows, seedMode) {
+        const width = rows * 2 + 1;
+        const ruleTable = decodeRule(ruleNumber);
+        const generations = [];
+        let current = buildInitialRow(width, seedMode);
+
+        for (let r = 0; r < rows; r++) {
+          generations.push(current.slice());
+          const next = new Array(width).fill(0);
+          for (let x = 0; x < width; x++) {
+            const left = x > 0 ? current[x - 1] : 0;
+            const centre = current[x];
+            const right = x < width - 1 ? current[x + 1] : 0;
+            const sum = left + centre + right;
+            next[x] = ruleTable[sum];
           }
+          current = next;
         }
+        return generations;
+      }
 
-        function hexToRGBA(hex) {
-          let h = (hex || '#000000').replace('#', '').trim();
-          if (h.length === 3) h = h.split('').map(c => c + c).join('');
-          const r = parseInt(h.slice(0, 2), 16) || 0;
-          const g = parseInt(h.slice(2, 4), 16) || 0;
-          const b = parseInt(h.slice(4, 6), 16) || 0;
-          return [r, g, b, 255];
-        }
-
-        // UI elements
-        const els = {
-          canvas: document.getElementById('ca'),
-          width: document.getElementById('width'),
-          cellSize: document.getElementById('cellSize'),
-          cellSizeLabel: document.getElementById('cellSizeLabel'),
-          ruleNumber: document.getElementById('ruleNumber'),
-          ruleBase3: document.getElementById('ruleBase3'),
-          wrap: document.getElementById('wrap'),
-          initMode: document.getElementById('initMode'),
-          playPause: document.getElementById('playPause'),
-          step: document.getElementById('step'),
-          reset: document.getElementById('reset'),
-          randomizeRule: document.getElementById('randomizeRule'),
-          randomizeInit: document.getElementById('randomizeInit'),
-          speed: document.getElementById('speed'),
-          speedLabel: document.getElementById('speedLabel'),
-          color0: document.getElementById('color0'),
-          color1: document.getElementById('color1'),
-          color2: document.getElementById('color2'),
-          genLabel: document.getElementById('genLabel'),
-        };
-
-        // Defaults
-        const DEFAULT_RULE = (() => {
-          // A small, hand-crafted base-3 string of length 27 to start with (symmetric-ish)
-          // This is arbitrary, intended only to show structure.
-          const s = '210120012001200120012001200'; // 27 digits
-          const digits = stringToDigits(s);
-          return digitsToNumber(digits);
-        })();
-
-        const colors = [els.color0.value, els.color1.value, els.color2.value];
-        const ca = new ThreeColorCA({ width: +els.width.value, wrap: els.wrap.checked, ruleNumber: DEFAULT_RULE, initial: 'single' });
-        const renderer = new CanvasRenderer(els.canvas, colors, +els.cellSize.value);
-
-        // Initialize UI fields for rule
-        function refreshRuleInputsFromDigits() {
-          const digits = ca.ruleDigits;
-          els.ruleNumber.value = String(digitsToNumber(digits));
-          els.ruleBase3.value = digitsToString(digits);
-        }
-
-        refreshRuleInputsFromDigits();
-        renderer.drawAll(ca.rows);
-
-        // Animation loop
-        let running = false; let rafId = 0; let lastTime = 0; let msPerGen = 1000 / (+els.speed.value);
-
-        function loop(t) {
-          if (!running) return;
-          if (!lastTime) lastTime = t;
-          const dt = t - lastTime;
-          if (dt >= msPerGen) {
-            const steps = Math.max(1, Math.floor(dt / msPerGen));
-            for (let i = 0; i < steps; i++) {
-              ca.step();
-              // Try incremental append; if geometry changed, redraw all
-              if (!renderer.appendRow(ca.state, ca.generation)) {
-                renderer.drawAll(ca.rows);
-              }
-            }
-            lastTime = t;
-            els.genLabel.textContent = String(ca.generation);
-            // autoscroll to bottom
-            const wrap = els.canvas.parentElement; wrap.scrollTop = wrap.scrollHeight;
+      function drawGenerations(generations) {
+        if (!generations.length) return;
+        const width = generations[0].length;
+        const rows = generations.length;
+        const cellSize = Math.max(1, Math.floor(Math.min(canvas.width / width, canvas.height / rows)));
+        canvas.width = width * cellSize;
+        canvas.height = rows * cellSize;
+        for (let y = 0; y < rows; y++) {
+          const row = generations[y];
+          for (let x = 0; x < width; x++) {
+            ctx.fillStyle = colours[row[x]];
+            ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);
           }
-          rafId = requestAnimationFrame(loop);
         }
+      }
 
-        function start() {
-          if (running) return;
-          running = true; lastTime = 0; els.playPause.textContent = 'Pause'; rafId = requestAnimationFrame(loop);
-        }
-        function stop() {
-          running = false; els.playPause.textContent = 'Play'; if (rafId) cancelAnimationFrame(rafId);
+      function updateLookup(ruleNumber) {
+        const ruleTable = decodeRule(ruleNumber);
+        lookupBody.innerHTML = '';
+        for (let i = 0; i < 7; i++) {
+          const tr = document.createElement('tr');
+          const sumCell = document.createElement('td');
+          sumCell.textContent = i;
+          const avgCell = document.createElement('td');
+          avgCell.textContent = averages[i];
+          const colourCell = document.createElement('td');
+          colourCell.textContent = ruleTable[i];
+          colourCell.style.background = colours[ruleTable[i]];
+          colourCell.style.color = ruleTable[i] === 0 ? '#202022' : '#fdfdfb';
+          tr.append(sumCell, avgCell, colourCell);
+          lookupBody.appendChild(tr);
         }
+        ruleCaption.textContent = `Rule ${ruleNumber}`;
+      }
 
-        // Handlers
-        els.playPause.addEventListener('click', () => { running ? stop() : start(); });
-        els.step.addEventListener('click', () => {
-          stop(); ca.step(); els.genLabel.textContent = String(ca.generation);
-          if (!renderer.appendRow(ca.state, ca.generation)) renderer.drawAll(ca.rows);
-          const wrap = els.canvas.parentElement; wrap.scrollTop = wrap.scrollHeight;
-        });
-        els.reset.addEventListener('click', () => {
-          stop(); ca.reset(+els.width.value, els.initMode.value);
-          renderer.setCellSize(+els.cellSize.value); renderer.drawAll(ca.rows); els.genLabel.textContent = '0';
-        });
-
-        els.speed.addEventListener('input', () => {
-          const s = clamp(+els.speed.value || 1, 1, 240); els.speedLabel.textContent = s + ' gen/s';
-          msPerGen = 1000 / s;
-        });
-
-        els.width.addEventListener('change', () => { /* apply on reset */ });
-        els.cellSize.addEventListener('input', () => {
-          const px = clamp(+els.cellSize.value || 3, 1, 20); els.cellSizeLabel.textContent = px + ' px';
-          renderer.setCellSize(px); renderer.drawAll(ca.rows);
-        });
-        els.wrap.addEventListener('change', () => { ca.setWrap(els.wrap.checked); });
-        els.initMode.addEventListener('change', () => { /* apply on reset */ });
-
-        els.randomizeInit.addEventListener('click', () => {
-          stop(); ca.reset(+els.width.value, 'random'); renderer.drawAll(ca.rows); els.genLabel.textContent = '0';
-        });
-
-        // Rule inputs
-        function applyRuleNumber(n) {
-          n = Math.floor(Math.max(0, Math.min(n, Math.pow(3, 27) - 1)));
-          ca.setRuleNumber(n); refreshRuleInputsFromDigits();
+      function currentRuleNumber() {
+        const preset = presetSelect.value;
+        if (preset === 'custom') {
+          return clampRule(parseInt(ruleInput.value, 10));
         }
+        return parseInt(preset, 10);
+      }
 
-        els.ruleNumber.addEventListener('input', () => {
-          const v = +els.ruleNumber.value; if (Number.isFinite(v)) applyRuleNumber(v);
-        });
-        els.ruleBase3.addEventListener('input', () => {
-          const digits = stringToDigits(els.ruleBase3.value);
-          const n = digitsToNumber(digits); applyRuleNumber(n);
-        });
-        els.randomizeRule.addEventListener('click', () => {
-          // 0 .. 3^27 - 1 (<= 7.625e12) fits in JS Number safely
-          const max = Math.pow(3, 27);
-          const n = Math.floor(Math.random() * max);
-          applyRuleNumber(n);
-        });
+      function clampRule(value) {
+        if (!Number.isFinite(value)) return 0;
+        return Math.min(2186, Math.max(0, value));
+      }
 
-        // Color changes
-        function refreshPalette() {
-          renderer.setColors([els.color0.value, els.color1.value, els.color2.value]);
-          renderer.drawAll(ca.rows);
+      presetSelect.addEventListener('change', () => {
+        const useCustom = presetSelect.value === 'custom';
+        customRuleWrapper.style.opacity = useCustom ? '1' : '0.6';
+        ruleInput.disabled = !useCustom;
+        if (!useCustom) {
+          ruleInput.value = presetSelect.value;
         }
-        els.color0.addEventListener('input', refreshPalette);
-        els.color1.addEventListener('input', refreshPalette);
-        els.color2.addEventListener('input', refreshPalette);
-
-        // Keyboard shortcuts
-        window.addEventListener('keydown', (e) => {
-          if (e.target && (e.target.tagName === 'INPUT' || e.target.tagName === 'SELECT' || e.target.tagName === 'TEXTAREA')) return;
-          if (e.code === 'Space') { e.preventDefault(); running ? stop() : start(); }
-          else if (e.key === 'r') { e.preventDefault(); els.reset.click(); }
-          else if (e.key === 's') { e.preventDefault(); els.step.click(); }
-        });
-
-      })();
-    </script>
-  </body>
-  </html>
-
+      });
+
+      randomButton.addEventListener('click', () => {
+        const choice = presetValues[Math.floor(Math.random() * presetValues.length)];
+        presetSelect.value = choice;
+        ruleInput.value = choice;
+        presetSelect.dispatchEvent(new Event('change'));
+        controlsForm.dispatchEvent(new Event('submit'));
+      });
+
+      controlsForm.addEventListener('submit', (event) => {
+        event.preventDefault();
+        const rows = Math.max(20, Math.min(400, parseInt(rowsInput.value, 10) || 200));
+        rowsInput.value = rows;
+        const ruleNumber = currentRuleNumber();
+        ruleInput.value = ruleNumber;
+        const generations = evolve(ruleNumber, rows, seedSelect.value);
+        drawGenerations(generations);
+        updateLookup(ruleNumber);
+      });
+
+      // initial render
+      presetSelect.dispatchEvent(new Event('change'));
+      controlsForm.dispatchEvent(new Event('submit'));
+    })();
+  </script>
+</body>
+</html>
diff --git a/demos/chapter3/three-color-ca-demo.html b/demos/chapter3/three-color-ca-demo.html
index c0e8c48e8b86ab68ed9afb2bdcb42843a387aa25..c49b5792b3c558d6a31b8f97e4174ad0b0fee679 100644
--- a/demos/chapter3/three-color-ca-demo.html
+++ b/demos/chapter3/three-color-ca-demo.html
@@ -1,547 +1,328 @@
 <!DOCTYPE html>
 <html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>3-Color Cellular Automata Demo - NKS Explorer</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%);
-            color: #e0e0e0;
-            min-height: 100vh;
-            padding: 20px;
-        }
-
-        .container {
-            max-width: 1200px;
-            margin: 0 auto;
-        }
-
-        .header {
-            text-align: center;
-            margin-bottom: 30px;
-            padding: 20px;
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .header h1 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            font-size: 2.5em;
-            font-weight: 700;
-        }
-
-        .header p {
-            color: #b8b8b8;
-            font-size: 1.1em;
-            line-height: 1.6;
-        }
-
-        .controls {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
-            gap: 20px;
-            margin-bottom: 30px;
-        }
-
-        .control-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .control-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-            font-size: 1.2em;
-        }
-
-        .control-group {
-            margin-bottom: 15px;
-        }
-
-        label {
-            display: block;
-            color: #d0d0d0;
-            margin-bottom: 5px;
-            font-weight: 500;
-        }
-
-        select, input[type="range"], button {
-            width: 100%;
-            padding: 10px;
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            background: rgba(0, 0, 0, 0.3);
-            color: #e0e0e0;
-            font-size: 14px;
-        }
-
-        button {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.2), rgba(255, 215, 0, 0.3));
-            cursor: pointer;
-            transition: all 0.3s ease;
-            margin: 5px 0;
-        }
-
-        button:hover {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.3), rgba(255, 215, 0, 0.4));
-            transform: translateY(-2px);
-            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.2);
-        }
-
-        .canvas-container {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            text-align: center;
-            margin-bottom: 20px;
-        }
-
-        #caCanvas {
-            border: 2px solid rgba(255, 215, 0, 0.3);
-            border-radius: 10px;
-            background: #000;
-            max-width: 100%;
-        }
-
-        .rule-display {
-            display: flex;
-            justify-content: center;
-            align-items: center;
-            gap: 10px;
-            margin-bottom: 15px;
-        }
-
-        .rule-cell {
-            width: 30px;
-            height: 30px;
-            border: 1px solid #ffd700;
-            display: flex;
-            align-items: center;
-            justify-content: center;
-            font-weight: bold;
-            border-radius: 4px;
-        }
-
-        .info-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .info-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-        }
-
-        .info-panel p {
-            color: #d0d0d0;
-            line-height: 1.6;
-            margin-bottom: 10px;
+  <meta charset="utf-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <title>NKS · Three-Color Totalistic Cellular Automaton</title>
+  <style>
+    :root {
+      color-scheme: light;
+      font-family: "Helvetica Neue", Arial, system-ui, sans-serif;
+    }
+    body {
+      margin: 24px;
+      background: #fdfdfb;
+      color: #202022;
+      max-width: 960px;
+    }
+    h1 {
+      font-size: 1.9rem;
+      margin-bottom: 0.4rem;
+    }
+    p.lead {
+      margin-bottom: 1.2rem;
+      font-size: 1.05rem;
+      line-height: 1.55;
+    }
+    form {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
+      gap: 1rem;
+      padding: 1rem;
+      background: #fff;
+      border: 1px solid #d6d2c4;
+      border-radius: 8px;
+      box-shadow: 0 4px 12px rgba(32, 32, 34, 0.04);
+      margin-bottom: 1.5rem;
+    }
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 0.35rem;
+      font-size: 0.9rem;
+      color: #5c5648;
+    }
+    select,
+    input[type="number"],
+    button {
+      font: inherit;
+      padding: 0.4rem 0.55rem;
+      border-radius: 6px;
+      border: 1px solid #c1bbad;
+      background: #fffef9;
+      color: inherit;
+    }
+    select:focus,
+    input[type="number"]:focus {
+      outline: 2px solid #a08c5a;
+      outline-offset: 1px;
+    }
+    button {
+      cursor: pointer;
+      background: #d8c79d;
+      border-color: #cbb37a;
+      color: #2f2a23;
+      transition: background 0.15s ease;
+    }
+    button:hover {
+      background: #e5d5a8;
+    }
+    button.secondary {
+      background: #f3efe2;
+      border-color: #cfc7b5;
+    }
+    canvas {
+      display: block;
+      max-width: 100%;
+      height: auto;
+      border: 1px solid #d6d2c4;
+      background: #fff;
+      image-rendering: pixelated;
+      margin-bottom: 1.25rem;
+    }
+    .summary {
+      display: flex;
+      flex-wrap: wrap;
+      gap: 1.5rem;
+      align-items: flex-start;
+      background: #fff;
+      border: 1px solid #d6d2c4;
+      border-radius: 8px;
+      padding: 1rem 1.2rem;
+    }
+    .summary > div {
+      flex: 1 1 240px;
+    }
+    table {
+      width: 100%;
+      border-collapse: collapse;
+      font-size: 0.9rem;
+    }
+    th, td {
+      border: 1px solid #e5e0d3;
+      padding: 0.35rem 0.5rem;
+      text-align: center;
+    }
+    th {
+      background: #f3efe2;
+      font-weight: 600;
+    }
+    .note {
+      font-size: 0.85rem;
+      color: #635d4f;
+      margin-top: 0.3rem;
+    }
+    @media (max-width: 600px) {
+      body {
+        margin: 16px;
+      }
+      form {
+        grid-template-columns: 1fr;
+      }
+    }
+  </style>
+</head>
+<body>
+  <h1>Three-Color Totalistic Cellular Automaton</h1>
+  <p class="lead">This reproduction matches the Chapter 3 interactive from <em>A New Kind of Science</em>.
+    Choose one of the rules discussed by Wolfram or enter your own totalistic rule number (0–2186) to
+    regenerate the evolution from a single black cell.</p>
+
+  <form id="controls" autocomplete="off">
+    <label>Preset rules from the book
+      <select id="preset-select">
+        <option value="777">Rule 777 – irregular fragments (NKS p.67)</option>
+        <option value="600">Rule 600 – triangular growth (NKS p.67)</option>
+        <option value="924">Rule 924 – nested bands (NKS p.67)</option>
+        <option value="1059">Rule 1059 – filamentary (NKS p.68)</option>
+        <option value="1545">Rule 1545 – chaotic spread (NKS p.69)</option>
+        <option value="1635">Rule 1635 – repeating waves (NKS p.69)</option>
+        <option value="custom">Custom rule…</option>
+      </select>
+    </label>
+    <label id="custom-rule-wrapper">Rule number
+      <input type="number" id="rule-input" min="0" max="2186" value="777" required>
+    </label>
+    <label>Number of rows
+      <input type="number" id="rows-input" min="20" max="400" value="200">
+    </label>
+    <label>Initial row
+      <select id="seed-select">
+        <option value="single">Single black cell</option>
+        <option value="random">Random three-colour row</option>
+      </select>
+    </label>
+    <div style="display:flex; gap:0.5rem; align-items:center;">
+      <button type="submit">Run rule</button>
+      <button type="button" id="random-button" class="secondary">Random preset</button>
+    </div>
+  </form>
+
+  <canvas id="ca-canvas" width="720" height="450" aria-label="Three-colour totalistic cellular automaton"></canvas>
+
+  <div class="summary">
+    <div>
+      <h2 style="margin:0 0 0.4rem; font-size:1.1rem;">Lookup table</h2>
+      <p id="rule-caption" class="note" style="margin-bottom:0.6rem;">Rule 777</p>
+      <table aria-describedby="rule-caption">
+        <thead>
+          <tr><th>Neighbour sum</th><th>Average</th><th>New colour</th></tr>
+        </thead>
+        <tbody id="lookup-body"></tbody>
+      </table>
+    </div>
+    <div>
+      <h2 style="margin:0 0 0.4rem; font-size:1.1rem;">Legend</h2>
+      <ul style="list-style:none; padding-left:0; margin:0;">
+        <li class="note">Colour 0 – white</li>
+        <li class="note">Colour 1 – grey</li>
+        <li class="note">Colour 2 – black</li>
+      </ul>
+      <p class="note" style="margin-top:0.8rem;">Totalistic rules depend only on the sum of a cell and its two neighbours.
+        The official NKS demo runs with a fixed width of <code>2×rows + 1</code> so the pattern has space to expand.</p>
+    </div>
+  </div>
+
+  <script>
+    (function() {
+      const presetSelect = document.getElementById('preset-select');
+      const ruleInput = document.getElementById('rule-input');
+      const rowsInput = document.getElementById('rows-input');
+      const seedSelect = document.getElementById('seed-select');
+      const controlsForm = document.getElementById('controls');
+      const canvas = document.getElementById('ca-canvas');
+      const ctx = canvas.getContext('2d');
+      const lookupBody = document.getElementById('lookup-body');
+      const ruleCaption = document.getElementById('rule-caption');
+      const randomButton = document.getElementById('random-button');
+      const customRuleWrapper = document.getElementById('custom-rule-wrapper');
+
+      const presetValues = ['777','600','924','1059','1545','1635'];
+      const averages = ['0','1/3','2/3','1','4/3','5/3','2'];
+      const colours = ['#ffffff','#b7b7b7','#1c1c1c'];
+
+      function decodeRule(ruleNumber) {
+        const digits = ruleNumber.toString(3).padStart(7, '0');
+        const table = new Array(7);
+        for (let i = 0; i < 7; i++) {
+          table[i] = parseInt(digits[6 - i], 10);
         }
-
-        .stats {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
-            gap: 15px;
-            margin-top: 15px;
+        return table;
+      }
+
+      function buildInitialRow(width, mode) {
+        const row = new Array(width).fill(0);
+        if (mode === 'single') {
+          row[Math.floor(width / 2)] = 2;
+        } else {
+          for (let i = 0; i < width; i++) {
+            row[i] = Math.floor(Math.random() * 3);
+          }
         }
-
-        .stat-item {
-            text-align: center;
-            padding: 10px;
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 8px;
+        return row;
+      }
+
+      function evolve(ruleNumber, rows, seedMode) {
+        const width = rows * 2 + 1;
+        const ruleTable = decodeRule(ruleNumber);
+        const generations = [];
+        let current = buildInitialRow(width, seedMode);
+
+        for (let r = 0; r < rows; r++) {
+          generations.push(current.slice());
+          const next = new Array(width).fill(0);
+          for (let x = 0; x < width; x++) {
+            const left = x > 0 ? current[x - 1] : 0;
+            const centre = current[x];
+            const right = x < width - 1 ? current[x + 1] : 0;
+            const sum = left + centre + right;
+            next[x] = ruleTable[sum];
+          }
+          current = next;
         }
-
-        .stat-value {
-            font-size: 1.5em;
-            font-weight: bold;
-            color: #ffd700;
+        return generations;
+      }
+
+      function drawGenerations(generations) {
+        if (!generations.length) return;
+        const width = generations[0].length;
+        const rows = generations.length;
+        const cellSize = Math.max(1, Math.floor(Math.min(canvas.width / width, canvas.height / rows)));
+        canvas.width = width * cellSize;
+        canvas.height = rows * cellSize;
+        for (let y = 0; y < rows; y++) {
+          const row = generations[y];
+          for (let x = 0; x < width; x++) {
+            ctx.fillStyle = colours[row[x]];
+            ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);
+          }
         }
-
-        .stat-label {
-            font-size: 0.9em;
-            color: #b8b8b8;
+      }
+
+      function updateLookup(ruleNumber) {
+        const ruleTable = decodeRule(ruleNumber);
+        lookupBody.innerHTML = '';
+        for (let i = 0; i < 7; i++) {
+          const tr = document.createElement('tr');
+          const sumCell = document.createElement('td');
+          sumCell.textContent = i;
+          const avgCell = document.createElement('td');
+          avgCell.textContent = averages[i];
+          const colourCell = document.createElement('td');
+          colourCell.textContent = ruleTable[i];
+          colourCell.style.background = colours[ruleTable[i]];
+          colourCell.style.color = ruleTable[i] === 0 ? '#202022' : '#fdfdfb';
+          tr.append(sumCell, avgCell, colourCell);
+          lookupBody.appendChild(tr);
         }
+        ruleCaption.textContent = `Rule ${ruleNumber}`;
+      }
 
-        @media (max-width: 768px) {
-            .controls {
-                grid-template-columns: 1fr;
-            }
-            
-            .header h1 {
-                font-size: 2em;
-            }
-            
-            .rule-cell {
-                width: 25px;
-                height: 25px;
-            }
+      function currentRuleNumber() {
+        const preset = presetSelect.value;
+        if (preset === 'custom') {
+          return clampRule(parseInt(ruleInput.value, 10));
         }
-    </style>
-</head>
-<body>
-    <div class="container">
-        <div class="header">
-            <h1>3-Color Cellular Automata Demo</h1>
-            <p>Explore Wolfram's 3-color totalistic cellular automata from "A New Kind of Science"<br>
-               These rules use three colors (White=0, Gray=1, Black=2) with totalistic neighborhood averaging</p>
-        </div>
-
-        <div class="controls">
-            <div class="control-panel">
-                <h3>Rule Configuration</h3>
-                <div class="control-group">
-                    <label for="ruleSelect">Predefined Rules:</label>
-                    <select id="ruleSelect">
-                        <option value="777">Rule 777 - Complex Patterns</option>
-                        <option value="600">Rule 600 - Triangular Structures</option>
-                        <option value="924">Rule 924 - Nested Patterns</option>
-                        <option value="1059">Rule 1059 - Fractal-like</option>
-                        <option value="1545">Rule 1545 - Chaotic</option>
-                        <option value="1635">Rule 1635 - Periodic</option>
-                        <option value="custom">Custom Rule</option>
-                    </select>
-                </div>
-                <div class="control-group" id="customRuleGroup" style="display: none;">
-                    <label for="customRule">Custom Rule (0-2186):</label>
-                    <input type="number" id="customRule" min="0" max="2186" value="777">
-                </div>
-                <div class="control-group">
-                    <label for="speed">Animation Speed:</label>
-                    <input type="range" id="speed" min="50" max="1000" value="200">
-                    <span id="speedValue">200ms</span>
-                </div>
-            </div>
-
-            <div class="control-panel">
-                <h3>Simulation Control</h3>
-                <button id="startBtn">Start Animation</button>
-                <button id="stopBtn">Stop Animation</button>
-                <button id="stepBtn">Single Step</button>
-                <button id="resetBtn">Reset Grid</button>
-                <button id="randomBtn">Random Seed</button>
-            </div>
-
-            <div class="control-panel">
-                <h3>Initial Conditions</h3>
-                <div class="control-group">
-                    <label for="seedType">Seed Pattern:</label>
-                    <select id="seedType">
-                        <option value="single">Single Black Cell</option>
-                        <option value="three">Three Random Cells</option>
-                        <option value="random">Random Pattern</option>
-                        <option value="gradient">Color Gradient</option>
-                    </select>
-                </div>
-            </div>
-        </div>
-
-        <div class="canvas-container">
-            <h3 style="color: #ffd700; margin-bottom: 15px;">Current Rule Lookup Table</h3>
-            <div class="rule-display" id="ruleDisplay"></div>
-            <canvas id="caCanvas" width="800" height="600"></canvas>
-        </div>
-
-        <div class="info-panel">
-            <h3>About 3-Color Cellular Automata</h3>
-            <p>
-                Stephen Wolfram explored 3-color cellular automata in "A New Kind of Science" to understand how 
-                increasing the number of possible states affects computational complexity. These systems use 
-                <strong>totalistic rules</strong>, where the new color depends only on the average of neighboring cells.
-            </p>
-            <p>
-                With 3 colors (0=White, 1=Gray, 2=Black) and nearest-neighbor interactions, there are exactly 
-                <strong>2,187 possible totalistic rules</strong>. Each rule can be represented by a lookup table 
-                showing the output for each possible neighborhood average (0, 1/3, 2/3, 1, 4/3, 5/3, 2).
-            </p>
-
-            <div class="stats">
-                <div class="stat-item">
-                    <div class="stat-value" id="currentRule">777</div>
-                    <div class="stat-label">Current Rule</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="generation">0</div>
-                    <div class="stat-label">Generation</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="whiteCount">0</div>
-                    <div class="stat-label">White Cells</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="grayCount">0</div>
-                    <div class="stat-label">Gray Cells</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="blackCount">0</div>
-                    <div class="stat-label">Black Cells</div>
-                </div>
-            </div>
-        </div>
-    </div>
-
-    <script>
-        class ThreeColorCA {
-            constructor(canvasId, width = 200, height = 150) {
-                this.canvas = document.getElementById(canvasId);
-                this.ctx = this.canvas.getContext('2d');
-                this.width = width;
-                this.height = height;
-                this.cellSize = Math.min(this.canvas.width / width, this.canvas.height / height);
-                this.grid = new Array(height).fill().map(() => new Array(width).fill(0));
-                this.rule = 777; // Default rule
-                this.ruleTable = this.generateRuleTable(this.rule);
-                this.generation = 0;
-                this.animationId = null;
-                this.isRunning = false;
-                
-                this.colors = ['#ffffff', '#808080', '#000000']; // White, Gray, Black
-                
-                this.initializeGrid();
-                this.updateRuleDisplay();
-                this.draw();
-            }
-
-            generateRuleTable(ruleNumber) {
-                // Convert rule number to ternary (base 3) with 7 digits
-                const ternary = ruleNumber.toString(3).padStart(7, '0');
-                const table = {};
-                
-                // Possible sums for 3 neighbors: 0, 1, 2, 3, 4, 5, 6
-                // Corresponding averages: 0, 1/3, 2/3, 1, 4/3, 5/3, 2
-                const sums = [0, 1, 2, 3, 4, 5, 6];
-                
-                for (let i = 0; i < 7; i++) {
-                    table[sums[i]] = parseInt(ternary[6-i]);
-                }
-                
-                return table;
-            }
-
-            updateRuleDisplay() {
-                const display = document.getElementById('ruleDisplay');
-                const sums = [0, 1, 2, 3, 4, 5, 6];
-                const averages = ['0', '1/3', '2/3', '1', '4/3', '5/3', '2'];
-                
-                display.innerHTML = '';
-                
-                for (let i = 0; i < 7; i++) {
-                    const cellDiv = document.createElement('div');
-                    cellDiv.className = 'rule-cell';
-                    cellDiv.style.backgroundColor = this.colors[this.ruleTable[sums[i]]];
-                    cellDiv.style.color = this.ruleTable[sums[i]] === 0 ? '#000' : '#fff';
-                    cellDiv.innerHTML = `${averages[i]}<br>→${this.ruleTable[sums[i]]}`;
-                    cellDiv.style.fontSize = '10px';
-                    display.appendChild(cellDiv);
-                }
-                
-                document.getElementById('currentRule').textContent = this.rule;
-            }
-
-            initializeGrid(seedType = 'single') {
-                // Clear grid
-                for (let y = 0; y < this.height; y++) {
-                    for (let x = 0; x < this.width; x++) {
-                        this.grid[y][x] = 0;
-                    }
-                }
-
-                const centerX = Math.floor(this.width / 2);
-                
-                switch (seedType) {
-                    case 'single':
-                        this.grid[0][centerX] = 2; // Single black cell
-                        break;
-                    case 'three':
-                        this.grid[0][centerX - 1] = Math.floor(Math.random() * 3);
-                        this.grid[0][centerX] = Math.floor(Math.random() * 3);
-                        this.grid[0][centerX + 1] = Math.floor(Math.random() * 3);
-                        break;
-                    case 'random':
-                        for (let x = 0; x < this.width; x++) {
-                            if (Math.random() < 0.3) {
-                                this.grid[0][x] = Math.floor(Math.random() * 3);
-                            }
-                        }
-                        break;
-                    case 'gradient':
-                        for (let x = 0; x < this.width; x++) {
-                            const ratio = x / (this.width - 1);
-                            this.grid[0][x] = Math.floor(ratio * 3);
-                        }
-                        break;
-                }
-                
-                this.generation = 0;
-                this.updateStats();
-                this.draw();
-            }
-
-            step() {
-                if (this.generation >= this.height - 1) return;
-                
-                const newRow = new Array(this.width).fill(0);
-                const currentRow = this.generation;
-                
-                for (let x = 0; x < this.width; x++) {
-                    const left = this.grid[currentRow][(x - 1 + this.width) % this.width];
-                    const center = this.grid[currentRow][x];
-                    const right = this.grid[currentRow][(x + 1) % this.width];
-                    
-                    const sum = left + center + right;
-                    newRow[x] = this.ruleTable[sum] || 0;
-                }
-                
-                this.generation++;
-                for (let x = 0; x < this.width; x++) {
-                    this.grid[this.generation][x] = newRow[x];
-                }
-                
-                this.updateStats();
-                this.draw();
-            }
-
-            updateStats() {
-                let whiteCells = 0, grayCells = 0, blackCells = 0;
-                
-                for (let y = 0; y <= this.generation && y < this.height; y++) {
-                    for (let x = 0; x < this.width; x++) {
-                        switch (this.grid[y][x]) {
-                            case 0: whiteCells++; break;
-                            case 1: grayCells++; break;
-                            case 2: blackCells++; break;
-                        }
-                    }
-                }
-                
-                document.getElementById('generation').textContent = this.generation;
-                document.getElementById('whiteCount').textContent = whiteCells;
-                document.getElementById('grayCount').textContent = grayCells;
-                document.getElementById('blackCount').textContent = blackCells;
-            }
-
-            draw() {
-                this.ctx.fillStyle = '#000000';
-                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
-                
-                for (let y = 0; y <= this.generation && y < this.height; y++) {
-                    for (let x = 0; x < this.width; x++) {
-                        const color = this.colors[this.grid[y][x]];
-                        this.ctx.fillStyle = color;
-                        this.ctx.fillRect(
-                            x * this.cellSize, 
-                            y * this.cellSize, 
-                            this.cellSize, 
-                            this.cellSize
-                        );
-                    }
-                }
-            }
-
-            setRule(ruleNumber) {
-                this.rule = Math.max(0, Math.min(2186, ruleNumber));
-                this.ruleTable = this.generateRuleTable(this.rule);
-                this.updateRuleDisplay();
-            }
-
-            start(speed = 200) {
-                if (this.isRunning) return;
-                
-                this.isRunning = true;
-                const animate = () => {
-                    if (!this.isRunning || this.generation >= this.height - 1) {
-                        this.isRunning = false;
-                        return;
-                    }
-                    
-                    this.step();
-                    this.animationId = setTimeout(animate, speed);
-                };
-                animate();
-            }
-
-            stop() {
-                this.isRunning = false;
-                if (this.animationId) {
-                    clearTimeout(this.animationId);
-                    this.animationId = null;
-                }
-            }
+        return parseInt(preset, 10);
+      }
+
+      function clampRule(value) {
+        if (!Number.isFinite(value)) return 0;
+        return Math.min(2186, Math.max(0, value));
+      }
+
+      presetSelect.addEventListener('change', () => {
+        const useCustom = presetSelect.value === 'custom';
+        customRuleWrapper.style.opacity = useCustom ? '1' : '0.6';
+        ruleInput.disabled = !useCustom;
+        if (!useCustom) {
+          ruleInput.value = presetSelect.value;
         }
-
-        // Initialize the cellular automaton
-        const ca = new ThreeColorCA('caCanvas', 200, 150);
-
-        // Event listeners
-        document.getElementById('ruleSelect').addEventListener('change', (e) => {
-            const value = e.target.value;
-            const customGroup = document.getElementById('customRuleGroup');
-            
-            if (value === 'custom') {
-                customGroup.style.display = 'block';
-                const customRule = parseInt(document.getElementById('customRule').value);
-                ca.setRule(customRule);
-            } else {
-                customGroup.style.display = 'none';
-                ca.setRule(parseInt(value));
-            }
-        });
-
-        document.getElementById('customRule').addEventListener('input', (e) => {
-            ca.setRule(parseInt(e.target.value));
-        });
-
-        document.getElementById('speed').addEventListener('input', (e) => {
-            document.getElementById('speedValue').textContent = e.target.value + 'ms';
-        });
-
-        document.getElementById('startBtn').addEventListener('click', () => {
-            const speed = parseInt(document.getElementById('speed').value);
-            ca.start(speed);
-        });
-
-        document.getElementById('stopBtn').addEventListener('click', () => {
-            ca.stop();
-        });
-
-        document.getElementById('stepBtn').addEventListener('click', () => {
-            ca.step();
-        });
-
-        document.getElementById('resetBtn').addEventListener('click', () => {
-            ca.stop();
-            const seedType = document.getElementById('seedType').value;
-            ca.initializeGrid(seedType);
-        });
-
-        document.getElementById('randomBtn').addEventListener('click', () => {
-            ca.stop();
-            ca.initializeGrid('random');
-        });
-
-        document.getElementById('seedType').addEventListener('change', (e) => {
-            ca.stop();
-            ca.initializeGrid(e.target.value);
-        });
-    </script>
+      });
+
+      randomButton.addEventListener('click', () => {
+        const choice = presetValues[Math.floor(Math.random() * presetValues.length)];
+        presetSelect.value = choice;
+        ruleInput.value = choice;
+        presetSelect.dispatchEvent(new Event('change'));
+        controlsForm.dispatchEvent(new Event('submit'));
+      });
+
+      controlsForm.addEventListener('submit', (event) => {
+        event.preventDefault();
+        const rows = Math.max(20, Math.min(400, parseInt(rowsInput.value, 10) || 200));
+        rowsInput.value = rows;
+        const ruleNumber = currentRuleNumber();
+        ruleInput.value = ruleNumber;
+        const generations = evolve(ruleNumber, rows, seedSelect.value);
+        drawGenerations(generations);
+        updateLookup(ruleNumber);
+      });
+
+      // initial render
+      presetSelect.dispatchEvent(new Event('change'));
+      controlsForm.dispatchEvent(new Event('submit'));
+    })();
+  </script>
 </body>
-</html>
\ No newline at end of file
+</html>
diff --git a/demos/chapter3/turing-machine-demo.html b/demos/chapter3/turing-machine-demo.html
index a3cb58a482fe0a454e3bcca5bd49e4214c1c4afb..0d915d23a15c0ebb806bed3ca21e049a25ee3787 100644
--- a/demos/chapter3/turing-machine-demo.html
+++ b/demos/chapter3/turing-machine-demo.html
@@ -1,934 +1,381 @@
 <!DOCTYPE html>
 <html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Turing Machine Demo - NKS Explorer</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%);
-            color: #e0e0e0;
-            min-height: 100vh;
-            padding: 20px;
-        }
-
-        .container {
-            max-width: 1400px;
-            margin: 0 auto;
-        }
-
-        .header {
-            text-align: center;
-            margin-bottom: 30px;
-            padding: 20px;
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .header h1 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            font-size: 2.5em;
-            font-weight: 700;
-        }
-
-        .header p {
-            color: #b8b8b8;
-            font-size: 1.1em;
-            line-height: 1.6;
-        }
-
-        .controls {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
-            gap: 20px;
-            margin-bottom: 30px;
-        }
-
-        .control-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .control-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-            font-size: 1.2em;
-        }
-
-        .control-group {
-            margin-bottom: 15px;
-        }
-
-        label {
-            display: block;
-            color: #d0d0d0;
-            margin-bottom: 5px;
-            font-weight: 500;
-        }
-
-        select, input[type="range"], input[type="text"], button {
-            width: 100%;
-            padding: 10px;
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            background: rgba(0, 0, 0, 0.3);
-            color: #e0e0e0;
-            font-size: 14px;
-        }
-
-        button {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.2), rgba(255, 215, 0, 0.3));
-            cursor: pointer;
-            transition: all 0.3s ease;
-            margin: 5px 0;
-        }
-
-        button:hover {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.3), rgba(255, 215, 0, 0.4));
-            transform: translateY(-2px);
-            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.2);
-        }
-
-        .canvas-container {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            text-align: center;
-            margin-bottom: 20px;
-        }
-
-        #tmCanvas {
-            border: 2px solid rgba(255, 215, 0, 0.3);
-            border-radius: 10px;
-            background: #000;
-            max-width: 100%;
-        }
-
-        .state-display {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-bottom: 15px;
-            display: flex;
-            flex-wrap: wrap;
-            justify-content: center;
-            gap: 10px;
-        }
-
-        .state-indicator {
-            display: flex;
-            align-items: center;
-            gap: 10px;
-            padding: 8px 12px;
-            background: rgba(255, 215, 0, 0.1);
-            border-radius: 8px;
-            font-family: 'Courier New', monospace;
-            font-size: 14px;
-        }
-
-        .state-dot {
-            width: 12px;
-            height: 12px;
-            border-radius: 50%;
-        }
-
-        .rule-table {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-bottom: 15px;
-            overflow-x: auto;
-        }
-
-        .rule-table h4 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            text-align: center;
-        }
-
-        .rule-grid {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
-            gap: 10px;
-        }
-
-        .rule-entry {
-            background: rgba(255, 215, 0, 0.1);
-            border-radius: 5px;
-            padding: 8px;
-            font-family: 'Courier New', monospace;
-            font-size: 12px;
-            text-align: center;
-        }
-
-        .rule-condition {
-            color: #ffd700;
-            font-weight: bold;
-            margin-bottom: 3px;
-        }
-
-        .rule-action {
-            color: #d0d0d0;
-        }
-
-        .machine-indicators {
-            display: flex;
-            justify-content: center;
-            align-items: center;
-            gap: 20px;
-            margin: 15px 0;
-            flex-wrap: wrap;
-        }
-
-        .indicator {
-            display: flex;
-            align-items: center;
-            gap: 5px;
-            font-size: 14px;
-        }
-
-        .indicator-dot {
-            width: 12px;
-            height: 12px;
-            border-radius: 50%;
-        }
-
-        .custom-rule-editor {
-            display: none;
-            background: rgba(0, 0, 0, 0.2);
-            border-radius: 10px;
-            padding: 15px;
-            margin-top: 15px;
-        }
-
-        .custom-rule-editor textarea {
-            width: 100%;
-            height: 100px;
-            background: rgba(0, 0, 0, 0.5);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 5px;
-            color: #e0e0e0;
-            padding: 10px;
-            font-family: 'Courier New', monospace;
-            font-size: 12px;
-            resize: vertical;
-        }
-
-        .info-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .info-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-        }
-
-        .info-panel p {
-            color: #d0d0d0;
-            line-height: 1.6;
-            margin-bottom: 10px;
-        }
-
-        .stats {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
-            gap: 15px;
-            margin-top: 15px;
-        }
-
-        .stat-item {
-            text-align: center;
-            padding: 10px;
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 8px;
-        }
-
-        .stat-value {
-            font-size: 1.5em;
-            font-weight: bold;
-            color: #ffd700;
-        }
-
-        .stat-label {
-            font-size: 0.9em;
-            color: #b8b8b8;
-        }
-
-        @media (max-width: 768px) {
-            .controls {
-                grid-template-columns: 1fr;
-            }
-            
-            .header h1 {
-                font-size: 2em;
-            }
-            
-            .rule-grid {
-                grid-template-columns: 1fr;
-            }
-            
-            .machine-indicators {
-                flex-direction: column;
-                gap: 10px;
-            }
-        }
-    </style>
+  <meta charset="utf-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <title>NKS · Turing Machines</title>
+  <style>
+    :root {
+      color-scheme: light;
+      font-family: "Helvetica Neue", Arial, system-ui, sans-serif;
+    }
+    body {
+      margin: 24px;
+      background: #fdfdfb;
+      color: #1f1b14;
+      max-width: 960px;
+    }
+    h1 { font-size: 1.9rem; margin-bottom: 0.4rem; }
+    p.lead { font-size: 1.05rem; line-height: 1.55; margin-bottom: 1.2rem; }
+    form {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(230px, 1fr));
+      gap: 1rem;
+      background: #fff;
+      padding: 1rem;
+      border: 1px solid #d8d2c6;
+      border-radius: 8px;
+      box-shadow: 0 4px 12px rgba(31,27,20,0.05);
+      margin-bottom: 1.5rem;
+    }
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 0.35rem;
+      font-size: 0.9rem;
+      color: #5d574a;
+    }
+    select,
+    input[type="number"],
+    input[type="text"],
+    button {
+      font: inherit;
+      padding: 0.45rem 0.55rem;
+      border-radius: 6px;
+      border: 1px solid #c6bfab;
+      background: #fffef9;
+      color: inherit;
+    }
+    select:focus,
+    input:focus {
+      outline: 2px solid #a18f62;
+      outline-offset: 1px;
+    }
+    button {
+      cursor: pointer;
+      background: #d7c698;
+      border-color: #c9b379;
+      color: #2f291e;
+      transition: background 0.15s ease;
+    }
+    button:hover { background: #e7d7a7; }
+    button.secondary {
+      background: #f3efe3;
+      border-color: #cfc6b4;
+    }
+    .output {
+      background: #ffffff;
+      border: 1px solid #d8d2c6;
+      border-radius: 8px;
+      padding: 1rem 1.25rem;
+      box-shadow: 0 4px 12px rgba(31,27,20,0.04);
+      margin-bottom: 1.2rem;
+    }
+    table { width: 100%; border-collapse: collapse; font-size: 0.9rem; }
+    th, td { border: 1px solid #e7e0d0; padding: 0.35rem 0.5rem; }
+    th { background: #f4efe2; font-weight: 600; text-align: left; }
+    td.code { font-family: 'IBM Plex Mono', 'SFMono-Regular', ui-monospace, monospace; word-break: break-word; }
+    .note { font-size: 0.85rem; color: #655f52; margin-top: 0.8rem; }
+    @media (max-width: 600px) { body { margin: 16px; } form { grid-template-columns: 1fr; } }
+  </style>
 </head>
 <body>
-    <div class="container">
-        <div class="header">
-            <h1>Turing Machine Demo</h1>
-            <p>Explore Wolfram's Turing machines from "A New Kind of Science"<br>
-               Universal computation with simple rules: head states, tape symbols, and transition rules</p>
-        </div>
-
-        <div class="controls">
-            <div class="control-panel">
-                <h3>Turing Machine Selection</h3>
-                <div class="control-group">
-                    <label for="machinePreset">Predefined Machines:</label>
-                    <select id="machinePreset">
-                        <option value="simple2state">Simple 2-State (Page 78)</option>
-                        <option value="wolfram3024">Wolfram #3024 (Page 79)</option>
-                        <option value="wolfram982">Wolfram #982 (Page 79)</option>
-                        <option value="wolfram925">Wolfram #925 (Page 79)</option>
-                        <option value="famous23">Famous 2-State 3-Symbol</option>
-                        <option value="universal25">Universal 2-State 5-Symbol</option>
-                        <option value="busy3">Busy Beaver 3-State</option>
-                        <option value="custom">Custom Machine</option>
-                    </select>
-                </div>
-                
-                <div class="custom-rule-editor" id="customRuleEditor">
-                    <label for="customRules">Custom Rules (JSON format):</label>
-                    <textarea id="customRules" placeholder='Example:
-{
-  "1,0": [2, 1, "R"],
-  "1,1": [2, 0, "L"],
-  "2,0": [1, 1, "L"],
-  "2,1": [1, 0, "R"]
-}'></textarea>
-                    <button id="applyCustom">Apply Custom Rules</button>
-                </div>
-            </div>
-
-            <div class="control-panel">
-                <h3>Simulation Control</h3>
-                <div class="control-group">
-                    <label for="speed">Animation Speed:</label>
-                    <input type="range" id="speed" min="50" max="2000" value="500">
-                    <span id="speedValue">500ms</span>
-                </div>
-                <button id="startBtn">Start Simulation</button>
-                <button id="stopBtn">Stop Simulation</button>
-                <button id="stepBtn">Single Step</button>
-                <button id="resetBtn">Reset Machine</button>
-            </div>
-
-            <div class="control-panel">
-                <h3>Initial Configuration</h3>
-                <div class="control-group">
-                    <label for="initialTape">Initial Tape:</label>
-                    <input type="text" id="initialTape" value="000000000000" placeholder="e.g., 001100110">
-                </div>
-                <div class="control-group">
-                    <label for="headPosition">Head Start Position:</label>
-                    <input type="range" id="headPosition" min="0" max="50" value="6">
-                    <span id="headPosValue">6</span>
-                </div>
-                <div class="control-group">
-                    <label for="initialState">Initial State:</label>
-                    <select id="initialState">
-                        <option value="1">State 1</option>
-                        <option value="2">State 2</option>
-                        <option value="3">State 3</option>
-                    </select>
-                </div>
-            </div>
-        </div>
-
-        <div class="canvas-container">
-            <h3 style="color: #ffd700; margin-bottom: 15px;">Turing Machine Visualization</h3>
-            
-            <div class="state-display" id="stateDisplay">
-                <div class="state-indicator">
-                    <span>Current State:</span>
-                    <div class="state-dot" id="currentStateDot" style="background: #ff6b6b;"></div>
-                    <span id="currentStateText">1</span>
-                </div>
-                <div class="state-indicator">
-                    <span>Head Position:</span>
-                    <span id="headPositionText">6</span>
-                </div>
-                <div class="state-indicator">
-                    <span>Current Symbol:</span>
-                    <span id="currentSymbolText">0</span>
-                </div>
-            </div>
-
-            <div class="machine-indicators">
-                <div class="indicator">
-                    <div class="indicator-dot" style="background: #ff6b6b;"></div>
-                    <span>Tape Head</span>
-                </div>
-                <div class="indicator">
-                    <div class="indicator-dot" style="background: #ffffff;"></div>
-                    <span>Symbol 0</span>
-                </div>
-                <div class="indicator">
-                    <div class="indicator-dot" style="background: #4ecdc4;"></div>
-                    <span>Symbol 1</span>
-                </div>
-                <div class="indicator">
-                    <div class="indicator-dot" style="background: #45b7d1;"></div>
-                    <span>Symbol 2</span>
-                </div>
-                <div class="indicator">
-                    <div class="indicator-dot" style="background: #96ceb4;"></div>
-                    <span>Symbol 3</span>
-                </div>
-            </div>
-
-            <canvas id="tmCanvas" width="1200" height="500"></canvas>
-
-            <div class="rule-table" id="ruleTable">
-                <h4>Transition Rules</h4>
-                <div class="rule-grid" id="ruleGrid"></div>
-            </div>
-        </div>
-
-        <div class="info-panel">
-            <h3>About Turing Machines</h3>
-            <p>
-                Turing machines, extensively studied by Stephen Wolfram in "A New Kind of Science," are fundamental 
-                models of computation consisting of a <strong>tape</strong> of cells, a <strong>head</strong> that 
-                can read and write symbols, and a finite set of <strong>states</strong>. The machine follows 
-                <strong>transition rules</strong> that determine what symbol to write, which direction to move, 
-                and what new state to enter based on the current state and symbol.
-            </p>
-            <p>
-                Wolfram demonstrated that even very simple Turing machines can exhibit complex behavior and achieve 
-                <strong>universal computation</strong>. His famous <strong>2-state 3-symbol machine</strong> was 
-                proven universal in 2007, making it the smallest known universal Turing machine. This supports his 
-                <strong>Principle of Computational Equivalence</strong> - that complex computation is ubiquitous 
-                in simple systems.
-            </p>
-
-            <div class="stats">
-                <div class="stat-item">
-                    <div class="stat-value" id="currentSteps">0</div>
-                    <div class="stat-label">Steps</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="currentState">1</div>
-                    <div class="stat-label">State</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="headPos">6</div>
-                    <div class="stat-label">Head Position</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="tapeSize">12</div>
-                    <div class="stat-label">Tape Size</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="onesOnTape">0</div>
-                    <div class="stat-label">Ones on Tape</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="nonZeroSymbols">0</div>
-                    <div class="stat-label">Non-Zero Symbols</div>
-                </div>
-            </div>
-        </div>
+  <h1>Turing Machines</h1>
+  <p class="lead">The official Chapter 3 Turing-machine demo from <em>A New Kind of Science</em> reproduced in plain HTML.
+    Choose one of Wolfram's machines or enter your own rule table to trace the evolution step by step.</p>
+
+  <form id="controls" autocomplete="off">
+    <label>Preset machine
+      <select id="preset-select">
+        <option value="simple2state">2-state 2-symbol (NKS p.78)</option>
+        <option value="wolfram3024">Machine #3024 (NKS p.79)</option>
+        <option value="wolfram982">Machine #982 (NKS p.79)</option>
+        <option value="wolfram925">Machine #925 (NKS p.79)</option>
+        <option value="famous23">2-state 3-symbol (universal, proved 2007)</option>
+        <option value="universal25">2-state 5-symbol universal (NKS p.704)</option>
+        <option value="busy3">Busy Beaver (3-state, 2-symbol)</option>
+        <option value="custom">Custom rule table…</option>
+      </select>
+    </label>
+    <label>Initial tape (digits or symbols)
+      <input type="text" id="tape-input" value="000000000000" spellcheck="false">
+    </label>
+    <label>Head position (0-indexed)
+      <input type="number" id="head-input" min="0" value="6">
+    </label>
+    <label>Maximum steps
+      <input type="number" id="steps-input" min="1" max="2000" value="150">
+    </label>
+    <label id="custom-rules-wrapper" style="display:none;">
+      Custom rule table (JSON, keys "state,symbol")
+      <textarea id="custom-rules-input" spellcheck="false" style="min-height:140px;"></textarea>
+    </label>
+    <div style="display:flex; gap:0.5rem; align-items:center;">
+      <button type="submit">Run machine</button>
+      <button type="button" id="clear-button" class="secondary">Clear output</button>
     </div>
-
-    <script>
-        class TuringMachine {
-            constructor(canvasId) {
-                this.canvas = document.getElementById(canvasId);
-                this.ctx = this.canvas.getContext('2d');
-                this.tape = [];
-                this.headPosition = 0;
-                this.currentState = 1;
-                this.rules = {};
-                this.steps = 0;
-                this.isRunning = false;
-                this.animationId = null;
-                this.history = [];
-                this.maxHistory = 100;
-                
-                this.colors = {
-                    0: '#ffffff',  // White
-                    1: '#4ecdc4',  // Cyan
-                    2: '#45b7d1',  // Blue
-                    3: '#96ceb4',  // Light green
-                    4: '#ffd93d'   // Yellow
-                };
-                
-                this.stateColors = {
-                    1: '#ff6b6b',  // Red
-                    2: '#4ecdc4',  // Cyan
-                    3: '#45b7d1',  // Blue
-                    4: '#96ceb4',  // Green
-                    5: '#ffd93d'   // Yellow
-                };
-                
-                this.cellWidth = 40;
-                this.cellHeight = 30;
-                this.initializeMachine();
-            }
-
-            initializeMachine() {
-                // Default simple 2-state machine from NKS page 78
-                this.rules = {
-                    "1,0": [2, 1, "R"],  // State 1, Symbol 0 -> State 2, Write 1, Move Right
-                    "1,1": [2, 0, "L"],  // State 1, Symbol 1 -> State 2, Write 0, Move Left
-                    "2,0": [1, 1, "L"],  // State 2, Symbol 0 -> State 1, Write 1, Move Left
-                    "2,1": [1, 1, "R"]   // State 2, Symbol 1 -> State 1, Write 1, Move Right
-                };
-                
-                this.setTape("000000000000");
-                this.headPosition = 6;
-                this.currentState = 1;
-                this.steps = 0;
-                this.history = [];
-                this.updateRuleDisplay();
-                this.updateStats();
-                this.draw();
-            }
-
-            setMachine(preset) {
-                switch (preset) {
-                    case 'simple2state':
-                        this.rules = {
-                            "1,0": [2, 1, "R"],
-                            "1,1": [2, 0, "L"], 
-                            "2,0": [1, 1, "L"],
-                            "2,1": [1, 1, "R"]
-                        };
-                        break;
-                    case 'wolfram3024':
-                        // Wolfram machine #3024 from page 79
-                        this.rules = {
-                            "1,0": [3, 1, "L"],
-                            "1,1": [2, 0, "R"],
-                            "2,0": [1, 1, "R"],
-                            "2,1": [3, 1, "R"],
-                            "3,0": [2, 1, "R"],
-                            "3,1": [1, 0, "L"]
-                        };
-                        break;
-                    case 'wolfram982':
-                        // Wolfram machine #982 from page 79
-                        this.rules = {
-                            "1,0": [2, 1, "R"],
-                            "1,1": [3, 0, "R"],
-                            "2,0": [3, 1, "L"],
-                            "2,1": [2, 0, "R"],
-                            "3,0": [1, 1, "L"],
-                            "3,1": [1, 0, "L"]
-                        };
-                        break;
-                    case 'wolfram925':
-                        // Wolfram machine #925 from page 79
-                        this.rules = {
-                            "1,0": [2, 1, "R"],
-                            "1,1": [3, 0, "L"],
-                            "2,0": [3, 1, "L"],
-                            "2,1": [2, 0, "R"],
-                            "3,0": [1, 1, "L"],
-                            "3,1": [1, 0, "R"]
-                        };
-                        break;
-                    case 'famous23':
-                        // Famous 2-state 3-symbol machine (Wolfram #596440)
-                        this.rules = {
-                            "1,0": [2, 1, "R"],
-                            "1,1": [2, 2, "L"],
-                            "1,2": [1, 1, "L"],
-                            "2,0": [1, 2, "L"],
-                            "2,1": [2, 2, "R"],
-                            "2,2": [1, 0, "R"]
-                        };
-                        break;
-                    case 'universal25':
-                        // Universal 2-state 5-symbol machine
-                        this.rules = {
-                            "1,0": [2, 1, "R"],
-                            "1,1": [1, 2, "L"],
-                            "1,2": [1, 3, "L"],
-                            "1,3": [1, 4, "R"],
-                            "1,4": [2, 0, "R"],
-                            "2,0": [1, 0, "L"],
-                            "2,1": [2, 1, "R"],
-                            "2,2": [2, 2, "R"],
-                            "2,3": [2, 3, "R"],
-                            "2,4": [1, 1, "L"]
-                        };
-                        break;
-                    case 'busy3':
-                        // Busy Beaver 3-state machine
-                        this.rules = {
-                            "1,0": [2, 1, "R"],
-                            "1,1": [3, 1, "L"],
-                            "2,0": [1, 1, "L"],
-                            "2,1": [2, 1, "R"],
-                            "3,0": [2, 1, "L"],
-                            "3,1": [1, 1, "R"]
-                        };
-                        break;
-                }
-                
-                this.updateRuleDisplay();
-                this.updateStats();
-                this.draw();
-            }
-
-            setCustomRules(rulesText) {
-                try {
-                    const parsed = JSON.parse(rulesText);
-                    this.rules = parsed;
-                    this.updateRuleDisplay();
-                    this.updateStats();
-                    this.draw();
-                    return true;
-                } catch (e) {
-                    alert('Invalid JSON format for rules');
-                    return false;
-                }
-            }
-
-            setTape(tapeString) {
-                this.tape = tapeString.split('').map(char => {
-                    const num = parseInt(char);
-                    return isNaN(num) ? 0 : Math.min(4, Math.max(0, num));
-                });
-                
-                // Ensure minimum tape size
-                while (this.tape.length < 20) {
-                    this.tape.push(0);
-                }
-                
-                this.headPosition = Math.min(this.headPosition, this.tape.length - 1);
-            }
-
-            expandTape() {
-                // Expand tape if head is near edges
-                if (this.headPosition < 5) {
-                    this.tape.unshift(...new Array(10).fill(0));
-                    this.headPosition += 10;
-                }
-                if (this.headPosition >= this.tape.length - 5) {
-                    this.tape.push(...new Array(10).fill(0));
-                }
-            }
-
-            step() {
-                if (this.isHalted()) return false;
-                
-                this.expandTape();
-                
-                const currentSymbol = this.tape[this.headPosition];
-                const ruleKey = `${this.currentState},${currentSymbol}`;
-                const rule = this.rules[ruleKey];
-                
-                if (!rule) {
-                    // No rule found - machine halts
-                    return false;
-                }
-                
-                const [newState, newSymbol, direction] = rule;
-                
-                // Save current state to history
-                this.history.push({
-                    tape: [...this.tape],
-                    headPosition: this.headPosition,
-                    currentState: this.currentState,
-                    step: this.steps
-                });
-                
-                if (this.history.length > this.maxHistory) {
-                    this.history.shift();
-                }
-                
-                // Apply rule
-                this.tape[this.headPosition] = newSymbol;
-                this.currentState = newState;
-                
-                // Move head
-                if (direction === "R") {
-                    this.headPosition++;
-                } else if (direction === "L") {
-                    this.headPosition--;
-                }
-                
-                // Ensure head stays within bounds
-                this.headPosition = Math.max(0, Math.min(this.headPosition, this.tape.length - 1));
-                
-                this.steps++;
-                this.updateStats();
-                this.draw();
-                
-                return true;
-            }
-
-            isHalted() {
-                const currentSymbol = this.tape[this.headPosition];
-                const ruleKey = `${this.currentState},${currentSymbol}`;
-                return !this.rules[ruleKey];
-            }
-
-            updateRuleDisplay() {
-                const ruleGrid = document.getElementById('ruleGrid');
-                ruleGrid.innerHTML = '';
-                
-                Object.entries(this.rules).forEach(([key, rule]) => {
-                    const [state, symbol] = key.split(',');
-                    const [newState, newSymbol, direction] = rule;
-                    
-                    const entry = document.createElement('div');
-                    entry.className = 'rule-entry';
-                    
-                    const condition = document.createElement('div');
-                    condition.className = 'rule-condition';
-                    condition.textContent = `State ${state}, Symbol ${symbol}`;
-                    
-                    const action = document.createElement('div');
-                    action.className = 'rule-action';
-                    const dirText = direction === "R" ? "→" : direction === "L" ? "←" : "Stay";
-                    action.textContent = `→ State ${newState}, Write ${newSymbol}, ${dirText}`;
-                    
-                    entry.appendChild(condition);
-                    entry.appendChild(action);
-                    ruleGrid.appendChild(entry);
-                });
-            }
-
-            updateStats() {
-                const onesCount = this.tape.filter(cell => cell === 1).length;
-                const nonZeroCount = this.tape.filter(cell => cell !== 0).length;
-                
-                document.getElementById('currentSteps').textContent = this.steps;
-                document.getElementById('currentState').textContent = this.currentState;
-                document.getElementById('headPos').textContent = this.headPosition;
-                document.getElementById('tapeSize').textContent = this.tape.length;
-                document.getElementById('onesOnTape').textContent = onesCount;
-                document.getElementById('nonZeroSymbols').textContent = nonZeroCount;
-                
-                document.getElementById('currentStateText').textContent = this.currentState;
-                document.getElementById('headPositionText').textContent = this.headPosition;
-                document.getElementById('currentSymbolText').textContent = this.tape[this.headPosition] || 0;
-                
-                const stateDot = document.getElementById('currentStateDot');
-                stateDot.style.background = this.stateColors[this.currentState] || '#ff6b6b';
-            }
-
-            draw() {
-                // Clear canvas
-                this.ctx.fillStyle = '#000000';
-                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
-                
-                // Calculate visible range
-                const visibleCells = Math.floor(this.canvas.width / this.cellWidth);
-                const startIndex = Math.max(0, this.headPosition - Math.floor(visibleCells / 2));
-                const endIndex = Math.min(this.tape.length, startIndex + visibleCells);
-                
-                // Draw tape cells
-                for (let i = startIndex; i < endIndex; i++) {
-                    const x = (i - startIndex) * this.cellWidth;
-                    const y = this.canvas.height / 2 - this.cellHeight / 2;
-                    
-                    // Cell background
-                    const symbol = this.tape[i] || 0;
-                    this.ctx.fillStyle = this.colors[symbol] || '#ffffff';
-                    this.ctx.fillRect(x, y, this.cellWidth, this.cellHeight);
-                    
-                    // Cell border
-                    this.ctx.strokeStyle = '#333333';
-                    this.ctx.lineWidth = 1;
-                    this.ctx.strokeRect(x, y, this.cellWidth, this.cellHeight);
-                    
-                    // Cell text
-                    this.ctx.fillStyle = symbol === 0 ? '#000000' : '#ffffff';
-                    this.ctx.font = 'bold 16px monospace';
-                    this.ctx.textAlign = 'center';
-                    this.ctx.textBaseline = 'middle';
-                    this.ctx.fillText(symbol.toString(), x + this.cellWidth / 2, y + this.cellHeight / 2);
-                    
-                    // Index labels
-                    this.ctx.fillStyle = '#666666';
-                    this.ctx.font = '10px monospace';
-                    this.ctx.fillText(i.toString(), x + this.cellWidth / 2, y + this.cellHeight + 12);
-                }
-                
-                // Draw head
-                if (this.headPosition >= startIndex && this.headPosition < endIndex) {
-                    const headX = (this.headPosition - startIndex) * this.cellWidth;
-                    const headY = this.canvas.height / 2 - this.cellHeight / 2 - 40;
-                    
-                    // Head triangle
-                    this.ctx.fillStyle = this.stateColors[this.currentState] || '#ff6b6b';
-                    this.ctx.beginPath();
-                    this.ctx.moveTo(headX + this.cellWidth / 2, headY + 30);
-                    this.ctx.lineTo(headX + this.cellWidth / 2 - 15, headY);
-                    this.ctx.lineTo(headX + this.cellWidth / 2 + 15, headY);
-                    this.ctx.closePath();
-                    this.ctx.fill();
-                    
-                    // State label
-                    this.ctx.fillStyle = '#ffffff';
-                    this.ctx.font = 'bold 12px monospace';
-                    this.ctx.textAlign = 'center';
-                    this.ctx.fillText(`S${this.currentState}`, headX + this.cellWidth / 2, headY + 15);
-                }
-                
-                // Draw history (if space allows)
-                if (this.canvas.height > 200 && this.history.length > 1) {
-                    const historyHeight = 100;
-                    const historyY = this.canvas.height - historyHeight - 10;
-                    
-                    this.ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
-                    this.ctx.fillRect(0, historyY, this.canvas.width, historyHeight);
-                    
-                    const recentHistory = this.history.slice(-20);
-                    const stepHeight = historyHeight / recentHistory.length;
-                    
-                    recentHistory.forEach((snapshot, index) => {
-                        const alpha = 0.3 + (index / recentHistory.length) * 0.7;
-                        const y = historyY + index * stepHeight;
-                        
-                        for (let i = startIndex; i < endIndex && i < snapshot.tape.length; i++) {
-                            const x = (i - startIndex) * this.cellWidth;
-                            const symbol = snapshot.tape[i] || 0;
-                            
-                            if (symbol !== 0) {
-                                this.ctx.fillStyle = this.colors[symbol] + Math.floor(alpha * 255).toString(16).padStart(2, '0');
-                                this.ctx.fillRect(x, y, this.cellWidth, stepHeight);
-                            }
-                            
-                            if (i === snapshot.headPosition) {
-                                this.ctx.fillStyle = `rgba(255, 107, 107, ${alpha})`;
-                                this.ctx.fillRect(x, y, this.cellWidth, stepHeight);
-                            }
-                        }
-                    });
-                }
-            }
-
-            start(speed = 500) {
-                if (this.isRunning) return;
-                
-                this.isRunning = true;
-                const animate = () => {
-                    if (!this.isRunning) return;
-                    
-                    const canContinue = this.step();
-                    if (!canContinue) {
-                        this.isRunning = false;
-                        alert('Machine halted - no rule found for current state/symbol combination');
-                        return;
-                    }
-                    
-                    this.animationId = setTimeout(animate, speed);
-                };
-                animate();
-            }
-
-            stop() {
-                this.isRunning = false;
-                if (this.animationId) {
-                    clearTimeout(this.animationId);
-                    this.animationId = null;
-                }
-            }
-
-            reset(tapeString = "000000000000", headPos = 6, initialState = 1) {
-                this.stop();
-                this.setTape(tapeString);
-                this.headPosition = headPos;
-                this.currentState = initialState;
-                this.steps = 0;
-                this.history = [];
-                this.updateStats();
-                this.draw();
-            }
-        }
-
-        // Initialize the Turing Machine
-        const tm = new TuringMachine('tmCanvas');
-
-        // Event listeners
-        document.getElementById('machinePreset').addEventListener('change', (e) => {
-            const preset = e.target.value;
-            const customEditor = document.getElementById('customRuleEditor');
-            
-            if (preset === 'custom') {
-                customEditor.style.display = 'block';
-            } else {
-                customEditor.style.display = 'none';
-                tm.setMachine(preset);
-            }
-        });
-
-        document.getElementById('applyCustom').addEventListener('click', () => {
-            const rulesText = document.getElementById('customRules').value;
-            tm.setCustomRules(rulesText);
-        });
-
-        document.getElementById('speed').addEventListener('input', (e) => {
-            document.getElementById('speedValue').textContent = e.target.value + 'ms';
-        });
-
-        document.getElementById('headPosition').addEventListener('input', (e) => {
-            document.getElementById('headPosValue').textContent = e.target.value;
-        });
-
-        document.getElementById('startBtn').addEventListener('click', () => {
-            const speed = parseInt(document.getElementById('speed').value);
-            tm.start(speed);
-        });
-
-        document.getElementById('stopBtn').addEventListener('click', () => {
-            tm.stop();
-        });
-
-        document.getElementById('stepBtn').addEventListener('click', () => {
-            tm.step();
-        });
-
-        document.getElementById('resetBtn').addEventListener('click', () => {
-            const tapeString = document.getElementById('initialTape').value || "000000000000";
-            const headPos = parseInt(document.getElementById('headPosition').value);
-            const initialState = parseInt(document.getElementById('initialState').value);
-            tm.reset(tapeString, headPos, initialState);
-        });
-
-        document.getElementById('initialTape').addEventListener('change', (e) => {
-            const tapeString = e.target.value || "000000000000";
-            const headPos = parseInt(document.getElementById('headPosition').value);
-            const initialState = parseInt(document.getElementById('initialState').value);
-            tm.reset(tapeString, headPos, initialState);
-        });
-    </script>
+  </form>
+
+  <div class="output" id="history-output" aria-live="polite"></div>
+  <div class="output" id="rules-output"></div>
+  <p class="note">Format for custom rules: provide JSON such as <code>{"1,0":[2,1,"R"],"1,1":[1,0,"L"], ...}</code> where each key is
+    <code>state,symbol</code> and the value is <code>[nextState, writeSymbol, "L"|"R"]</code>.</p>
+
+  <script>
+    (function() {
+      const PRESETS = {
+        simple2state: {
+          tape: '000000000000',
+          head: 6,
+          rules: {
+            '1,0': [2, '1', 'R'],
+            '1,1': [2, '0', 'L'],
+            '2,0': [1, '1', 'L'],
+            '2,1': [1, '1', 'R']
+          }
+        },
+        wolfram3024: {
+          tape: '000000000000',
+          head: 6,
+          rules: {
+            '1,0': [3, '1', 'L'],
+            '1,1': [2, '0', 'R'],
+            '2,0': [1, '1', 'R'],
+            '2,1': [3, '1', 'R'],
+            '3,0': [2, '1', 'R'],
+            '3,1': [1, '0', 'L']
+          }
+        },
+        wolfram982: {
+          tape: '000000000000',
+          head: 6,
+          rules: {
+            '1,0': [2, '1', 'R'],
+            '1,1': [3, '0', 'R'],
+            '2,0': [3, '1', 'L'],
+            '2,1': [2, '0', 'R'],
+            '3,0': [1, '1', 'L'],
+            '3,1': [1, '0', 'L']
+          }
+        },
+        wolfram925: {
+          tape: '000000000000',
+          head: 6,
+          rules: {
+            '1,0': [2, '1', 'R'],
+            '1,1': [3, '0', 'L'],
+            '2,0': [3, '1', 'L'],
+            '2,1': [2, '0', 'R'],
+            '3,0': [1, '1', 'L'],
+            '3,1': [1, '0', 'R']
+          }
+        },
+        famous23: {
+          tape: '000000000000',
+          head: 6,
+          rules: {
+            '1,0': [2, '1', 'R'],
+            '1,1': [2, '2', 'L'],
+            '1,2': [1, '1', 'L'],
+            '2,0': [1, '2', 'L'],
+            '2,1': [2, '2', 'R'],
+            '2,2': [1, '0', 'R']
+          }
+        },
+        universal25: {
+          tape: '000000000000',
+          head: 6,
+          rules: {
+            '1,0': [2, '1', 'R'],
+            '1,1': [1, '2', 'L'],
+            '1,2': [1, '3', 'L'],
+            '1,3': [1, '4', 'R'],
+            '1,4': [2, '0', 'R'],
+            '2,0': [1, '0', 'L'],
+            '2,1': [2, '1', 'R'],
+            '2,2': [2, '2', 'R'],
+            '2,3': [2, '3', 'R'],
+            '2,4': [1, '1', 'L']
+          }
+        },
+        busy3: {
+          tape: '000000000000',
+          head: 6,
+          rules: {
+            '1,0': [2, '1', 'R'],
+            '1,1': [3, '1', 'L'],
+            '2,0': [1, '1', 'L'],
+            '2,1': [2, '1', 'R'],
+            '3,0': [2, '1', 'L'],
+            '3,1': [1, '1', 'R']
+          }
+        }
+      };
+
+      const presetSelect = document.getElementById('preset-select');
+      const tapeInput = document.getElementById('tape-input');
+      const headInput = document.getElementById('head-input');
+      const stepsInput = document.getElementById('steps-input');
+      const customRulesWrapper = document.getElementById('custom-rules-wrapper');
+      const customRulesInput = document.getElementById('custom-rules-input');
+      const historyOutput = document.getElementById('history-output');
+      const rulesOutput = document.getElementById('rules-output');
+      const controls = document.getElementById('controls');
+      const clearButton = document.getElementById('clear-button');
+
+      function parseCustomRules(text) {
+        try {
+          const parsed = JSON.parse(text);
+          const cleaned = {};
+          for (const key of Object.keys(parsed)) {
+            const value = parsed[key];
+            if (!Array.isArray(value) || value.length !== 3) continue;
+            const [nextState, writeSymbol, move] = value;
+            cleaned[key] = [Number(nextState), String(writeSymbol), String(move).toUpperCase() === 'L' ? 'L' : 'R'];
+          }
+          return cleaned;
+        } catch (err) {
+          return null;
+        }
+      }
+
+      function describeTape(tapeMap, head) {
+        let min = head;
+        let max = head;
+        for (const position of tapeMap.keys()) {
+          if (position < min) min = position;
+          if (position > max) max = position;
+        }
+        const window = [];
+        for (let pos = min; pos <= max; pos++) {
+          const symbol = tapeMap.has(pos) ? tapeMap.get(pos) : '0';
+          if (pos === head) {
+            window.push(`[${symbol}]`);
+          } else {
+            window.push(` ${symbol} `);
+          }
+        }
+        return window.join('').trim();
+      }
+
+      function runMachine(rules, tapeString, headPosition, maxSteps) {
+        const tape = new Map();
+        for (let i = 0; i < tapeString.length; i++) {
+          tape.set(i, tapeString[i]);
+        }
+        let state = 1;
+        let head = headPosition;
+        const history = [];
+        for (let step = 0; step <= maxSteps; step++) {
+          const symbol = tape.has(head) ? tape.get(head) : '0';
+          history.push({
+            step,
+            state,
+            head,
+            symbol,
+            tape: new Map(tape)
+          });
+          const rule = rules[`${state},${symbol}`];
+          if (!rule) {
+            break;
+          }
+          const [nextState, writeSymbol, move] = rule;
+          tape.set(head, writeSymbol);
+          state = Number(nextState);
+          head += move === 'L' ? -1 : 1;
+        }
+        return history;
+      }
+
+      function renderHistory(history) {
+        if (!history.length) {
+          historyOutput.innerHTML = '<p>No steps recorded.</p>';
+          return;
+        }
+        const table = document.createElement('table');
+        table.innerHTML = '<thead><tr><th>Step</th><th>State</th><th>Head</th><th>Symbol</th><th>Tape window</th></tr></thead>';
+        const tbody = document.createElement('tbody');
+        for (const row of history) {
+          const tr = document.createElement('tr');
+          const cells = [row.step, row.state, row.head, row.symbol, describeTape(row.tape, row.head)];
+          cells.forEach((value, idx) => {
+            const td = document.createElement('td');
+            if (idx >= 3) td.className = 'code';
+            td.textContent = value;
+            tr.appendChild(td);
+          });
+          tbody.appendChild(tr);
+        }
+        table.appendChild(tbody);
+        historyOutput.innerHTML = '';
+        historyOutput.appendChild(table);
+      }
+
+      function renderRules(rules) {
+        const table = document.createElement('table');
+        table.innerHTML = '<thead><tr><th>State</th><th>Symbol</th><th>Write</th><th>Move</th><th>Next state</th></tr></thead>';
+        const tbody = document.createElement('tbody');
+        for (const key of Object.keys(rules).sort()) {
+          const [state, symbol] = key.split(',');
+          const [nextState, writeSymbol, move] = rules[key];
+          const tr = document.createElement('tr');
+          tr.innerHTML = `<td>${state}</td><td class="code">${symbol}</td><td class="code">${writeSymbol}</td><td>${move}</td><td>${nextState}</td>`;
+          tbody.appendChild(tr);
+        }
+        table.appendChild(tbody);
+        rulesOutput.innerHTML = '';
+        rulesOutput.appendChild(table);
+      }
+
+      presetSelect.addEventListener('change', () => {
+        const preset = presetSelect.value;
+        const isCustom = preset === 'custom';
+        customRulesWrapper.style.display = isCustom ? 'block' : 'none';
+        if (isCustom) {
+          rulesOutput.innerHTML = '';
+          if (!customRulesInput.value.trim()) {
+            customRulesInput.value = '{\n  "1,0": [2, "1", "R"],\n  "1,1": [1, "0", "L"]\n}';
+          }
+          return;
+        }
+        const data = PRESETS[preset];
+        tapeInput.value = data.tape;
+        headInput.value = data.head;
+        renderRules(data.rules);
+      });
+
+      clearButton.addEventListener('click', () => {
+        historyOutput.innerHTML = '';
+      });
+
+      controls.addEventListener('submit', (event) => {
+        event.preventDefault();
+        const preset = presetSelect.value;
+        const maxSteps = Math.max(1, Math.min(2000, parseInt(stepsInput.value, 10) || 1));
+        stepsInput.value = maxSteps;
+        const tapeString = tapeInput.value || '';
+        const headPosition = Math.max(0, parseInt(headInput.value, 10) || 0);
+        headInput.value = headPosition;
+        let rules;
+        if (preset === 'custom') {
+          rules = parseCustomRules(customRulesInput.value);
+          if (!rules || !Object.keys(rules).length) {
+            alert('Provide rules in JSON format when using the custom option.');
+            return;
+          }
+        } else {
+          rules = PRESETS[preset].rules;
+        }
+        renderRules(rules);
+        const history = runMachine(rules, tapeString, headPosition, maxSteps);
+        renderHistory(history);
+      });
+
+      // initialise defaults
+      presetSelect.dispatchEvent(new Event('change'));
+      renderRules(PRESETS.simple2state.rules);
+      controls.dispatchEvent(new Event('submit'));
+   })();
+  </script>
 </body>
-</html>
\ No newline at end of file
+</html>
