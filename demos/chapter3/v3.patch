diff --git a/demos/chapter3/mobile-automata-demo.html b/demos/chapter3/mobile-automata-demo.html
index 03c9e0183d690cc1146a64d95f5dc6126351e56e..fff384deae6096c48a056f69732a23f2abb4fce5 100644
--- a/demos/chapter3/mobile-automata-demo.html
+++ b/demos/chapter3/mobile-automata-demo.html
@@ -1,1055 +1,559 @@
 <!DOCTYPE html>
-<html lang="zh-CN">
-
+<html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>移动自动机探索器 - 交互式移动细胞实验</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            line-height: 1.6;
-            color: #e0e0e0;
-            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
-            min-height: 100vh;
-            padding: 0;
-        }
-
-        .container {
-            width: 100vw;
-            min-height: 100vh;
-            margin: 0;
-            background: rgba(26, 26, 26, 0.8);
-            backdrop-filter: blur(10px);
-            overflow: hidden;
-        }
-
-        .header {
-            background: linear-gradient(135deg, #ffd700, #ffb300);
-            color: #1a1a1a;
-            padding: 2rem;
-            text-align: center;
-        }
-
-        .header h1 {
-            font-size: 2.5rem;
-            font-weight: 700;
-            margin-bottom: 0.5rem;
-        }
-
-        .header p {
-            font-size: 1.1rem;
-            opacity: 0.8;
-        }
-
-        .main-content {
-            display: grid;
-            grid-template-columns: 400px 1fr;
-            gap: 0;
-            min-height: calc(100vh - 120px);
-        }
-
-        .controls-panel {
-            background: rgba(40, 40, 40, 0.9);
-            padding: 2rem;
-            border-right: 1px solid rgba(255, 215, 0, 0.2);
-            max-height: calc(100vh - 200px);
-            overflow-y: auto;
-        }
-
-        .canvas-area {
-            padding: 1.5rem;
-            display: flex;
-            flex-direction: column;
-            align-items: center;
-            background: rgba(20, 20, 20, 0.5);
-            overflow: auto;
-        }
-
-        .section-title {
-            color: #ffd700;
-            font-size: 1.3rem;
-            font-weight: 600;
-            margin: 1.5rem 0 1rem 0;
-            padding-bottom: 0.5rem;
-            border-bottom: 2px solid rgba(255, 215, 0, 0.3);
-        }
-
-        .section-title:first-of-type {
-            margin-top: 0;
-        }
-
-        /* Rule Definition Grid */
-        .rule-grid {
-            display: grid;
-            grid-template-columns: repeat(2, 1fr);
-            gap: 8px;
-            margin: 1rem 0;
-        }
-
-        .rule-cell {
-            background: rgba(255, 255, 255, 0.1);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            padding: 12px;
-            text-align: center;
-            transition: all 0.3s ease;
-        }
-
-        .rule-cell:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .rule-condition {
-            font-family: 'Courier New', monospace;
-            font-size: 0.9rem;
-            margin-bottom: 8px;
-            color: rgba(255, 255, 255, 0.8);
-        }
-
-        .rule-actions {
-            display: flex;
-            justify-content: center;
-            gap: 4px;
-            flex-wrap: wrap;
-        }
-
-        .rule-action {
-            background: rgba(255, 215, 0, 0.2);
-            border: 1px solid rgba(255, 215, 0, 0.5);
-            border-radius: 4px;
-            padding: 4px 8px;
-            font-size: 0.8rem;
-            font-family: 'Courier New', monospace;
-            cursor: pointer;
-            transition: all 0.3s ease;
-            color: #ffd700;
-        }
-
-        .rule-action:hover {
-            background: rgba(255, 215, 0, 0.3);
-            transform: scale(1.05);
-        }
-
-        .rule-action.active {
-            background: #ffd700;
-            color: #1a1a1a;
-        }
-
-        /* Preset Rules */
-        .preset-rules {
-            display: grid;
-            grid-template-columns: repeat(2, 1fr);
-            gap: 8px;
-            margin: 1rem 0;
-        }
-
-        .preset-rule {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            padding: 10px;
-            text-align: center;
-            cursor: pointer;
-            transition: all 0.3s ease;
-            font-size: 0.9rem;
-        }
-
-        .preset-rule:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .preset-rule.active {
-            background: rgba(255, 215, 0, 0.2);
-            border-color: #ffd700;
-        }
-
-        .preset-name {
-            font-weight: bold;
-            color: #ffd700;
-            font-size: 1rem;
-        }
-
-        .preset-description {
-            color: rgba(255, 255, 255, 0.7);
-            font-size: 0.8rem;
-            margin-top: 4px;
-        }
-
-        /* Control Buttons and Sliders */
-        .control-group {
-            margin: 1rem 0;
-        }
-
-        .control-label {
-            display: block;
-            color: rgba(255, 215, 0, 0.8);
-            font-size: 0.9rem;
-            font-weight: 500;
-            margin-bottom: 8px;
-        }
-
-        .control-row {
-            display: flex;
-            gap: 8px;
-            align-items: center;
-            margin: 8px 0;
-        }
-
-        .btn {
-            padding: 8px 16px;
-            border: 1px solid rgba(255, 215, 0, 0.4);
-            border-radius: 6px;
-            background: transparent;
-            color: rgba(255, 215, 0, 0.8);
-            cursor: pointer;
-            font-size: 0.9rem;
-            transition: all 0.3s ease;
-            flex: 1;
-        }
-
-        .btn:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .btn.primary {
-            background: rgba(255, 215, 0, 0.2);
-            color: #ffd700;
-            border-color: #ffd700;
-        }
-
-        .btn.primary:hover {
-            background: rgba(255, 215, 0, 0.3);
-        }
-
-        .slider {
-            flex: 1;
-            -webkit-appearance: none;
-            height: 6px;
-            border-radius: 3px;
-            background: rgba(255, 255, 255, 0.2);
-            outline: none;
-        }
-
-        .slider::-webkit-slider-thumb {
-            -webkit-appearance: none;
-            width: 18px;
-            height: 18px;
-            border-radius: 50%;
-            background: #ffd700;
-            cursor: pointer;
-        }
-
-        .slider-value {
-            color: rgba(255, 215, 0, 0.8);
-            font-weight: 500;
-            min-width: 40px;
-            text-align: center;
-        }
-
-        /* Canvas Styling */
-        #mobile-canvas {
-            border: 2px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            background: #000;
-            margin: 1rem 0;
-            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
-        }
-
-        .canvas-info {
-            display: flex;
-            justify-content: space-between;
-            align-items: center;
-            margin: 1rem 0;
-            padding: 12px 16px;
-            background: rgba(255, 215, 0, 0.1);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            font-size: 0.9rem;
-        }
-
-        .info-item {
-            display: flex;
-            flex-direction: column;
-            align-items: center;
-            gap: 4px;
-        }
-
-        .info-label {
-            color: rgba(255, 215, 0, 0.8);
-            font-size: 0.8rem;
-        }
-
-        .info-value {
-            color: #ffd700;
-            font-weight: bold;
-        }
-
-        /* Rule Analysis */
-        .rule-analysis {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            border-radius: 6px;
-            padding: 12px;
-            margin: 1rem 0;
-            font-size: 0.9rem;
-        }
-
-        .analysis-title {
-            color: #ffd700;
-            font-weight: 600;
-            margin-bottom: 8px;
-        }
-
-        .analysis-text {
-            color: rgba(255, 255, 255, 0.8);
-            line-height: 1.5;
-        }
-
-        /* Initial Pattern Selector */
-        .pattern-selector {
-            display: grid;
-            grid-template-columns: repeat(2, 1fr);
-            gap: 8px;
-            margin: 1rem 0;
-        }
-
-        .pattern-option {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            padding: 8px;
-            text-align: center;
-            cursor: pointer;
-            transition: all 0.3s ease;
-            font-size: 0.85rem;
-        }
-
-        .pattern-option:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .pattern-option.active {
-            background: rgba(255, 215, 0, 0.2);
-            border-color: #ffd700;
-        }
-
-        /* Responsive Design */
-        @media (max-width: 1200px) {
-            .main-content {
-                grid-template-columns: 350px 1fr;
-            }
-        }
-
-        @media (max-width: 1024px) {
-            .main-content {
-                grid-template-columns: 1fr;
-                min-height: auto;
-            }
-
-            .controls-panel {
-                max-height: none;
-                border-right: none;
-                border-bottom: 1px solid rgba(255, 215, 0, 0.2);
-                padding: 1.5rem;
-            }
-
-            .canvas-area {
-                padding: 1rem;
-            }
-
-            .preset-rules {
-                grid-template-columns: repeat(3, 1fr);
-            }
-        }
-
-        @media (max-width: 768px) {
-            .container {
-                margin: 0;
-                border-radius: 0;
-            }
-
-            .header {
-                padding: 1.5rem;
-            }
-
-            .header h1 {
-                font-size: 2rem;
-            }
-
-            .controls-panel,
-            .canvas-area {
-                padding: 1rem;
-            }
-
-            .rule-grid {
-                grid-template-columns: 1fr;
-            }
-
-            .preset-rules {
-                grid-template-columns: repeat(2, 1fr);
-            }
-
-            .canvas-info {
-                flex-direction: column;
-                gap: 8px;
-            }
-
-            #mobile-canvas {
-                max-width: 100%;
-                height: auto;
-            }
-        }
-
-        /* Loading Animation */
-        @keyframes pulse {
-            0%, 100% {
-                opacity: 0.7;
-            }
-            50% {
-                opacity: 1;
-            }
-        }
-
-        .generating {
-            animation: pulse 1.5s infinite;
-        }
-    </style>
+  <meta charset="utf-8" />
+  <meta name="viewport" content="width=device-width, initial-scale=1" />
+  <title>Mobile Automaton Explorer</title>
+  <style>
+    :root {
+      color-scheme: light dark;
+      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
+    }
+
+    body {
+      margin: 0;
+      padding: 24px;
+      background: #f4f5f7;
+      color: #1f1f1f;
+    }
+
+    header {
+      max-width: 900px;
+      margin: 0 auto 24px auto;
+    }
+
+    h1 {
+      font-size: 1.9rem;
+      margin: 0 0 6px 0;
+      font-weight: 600;
+    }
+
+    header p {
+      margin: 4px 0 0 0;
+      max-width: 65ch;
+      line-height: 1.55;
+      color: #4a4f55;
+    }
+
+    main {
+      max-width: 1080px;
+      margin: 0 auto;
+      display: grid;
+      grid-template-columns: 320px 1fr;
+      gap: 18px;
+    }
+
+    @media (max-width: 940px) {
+      main {
+        grid-template-columns: 1fr;
+      }
+    }
+
+    .panel {
+      background: #fff;
+      border: 1px solid #d4d7dd;
+      border-radius: 8px;
+      padding: 16px;
+      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
+    }
+
+    .panel h2 {
+      margin: 0 0 12px 0;
+      font-size: 1.1rem;
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    .controls form {
+      display: grid;
+      gap: 12px;
+    }
+
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 6px;
+      font-size: 0.9rem;
+    }
+
+    select,
+    input[type="number"],
+    input[type="range"] {
+      padding: 6px 8px;
+      border-radius: 6px;
+      border: 1px solid #c3c7ce;
+      font-size: 0.95rem;
+      font-family: inherit;
+      background: #fff;
+      color: inherit;
+    }
+
+    table {
+      width: 100%;
+      border-collapse: collapse;
+      font-size: 0.9rem;
+      margin-top: 8px;
+    }
+
+    table th,
+    table td {
+      border: 1px solid #d4d7dd;
+      padding: 6px;
+      text-align: center;
+    }
+
+    table th {
+      background: #eef3fd;
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    button {
+      padding: 7px 12px;
+      border-radius: 6px;
+      border: 1px solid #0b57d0;
+      background: #0b57d0;
+      color: #fff;
+      font-weight: 600;
+      cursor: pointer;
+      transition: background 0.2s ease;
+    }
+
+    button.secondary {
+      background: #fff;
+      color: #0b57d0;
+    }
+
+    button:disabled {
+      opacity: 0.55;
+      cursor: default;
+    }
+
+    .button-row {
+      display: flex;
+      flex-wrap: wrap;
+      gap: 8px;
+      margin-top: 6px;
+    }
+
+    .slider-row {
+      display: flex;
+      align-items: center;
+      gap: 12px;
+    }
+
+    .slider-row span {
+      font-size: 0.85rem;
+      color: #5f6368;
+      min-width: 56px;
+    }
+
+    canvas {
+      width: 100%;
+      height: auto;
+      border: 1px solid #d4d7dd;
+      border-radius: 4px;
+      background: #000;
+      image-rendering: pixelated;
+      display: block;
+    }
+
+    .status {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
+      gap: 8px;
+      margin-top: 12px;
+      font-size: 0.9rem;
+      color: #3c4043;
+    }
+
+    .status dt {
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    .status dd {
+      margin: 0;
+    }
+
+    .notice {
+      margin-top: 12px;
+      font-size: 0.85rem;
+      line-height: 1.4;
+      color: #5f6368;
+    }
+  </style>
 </head>
-
-<!-- Google tag (gtag.js) -->
-<script async src="https://www.googletagmanager.com/gtag/js?id=G-QR1KHESCTK"></script>
-<script>
-    window.dataLayer = window.dataLayer || [];
-    function gtag() { dataLayer.push(arguments); }
-    gtag('js', new Date());
-
-    gtag('config', 'G-QR1KHESCTK');
-</script>
-
 <body>
-    <div class="container">
-        <div class="header">
-            <h1>移动自动机探索器</h1>
-            <p>探索Wolfram的移动自动机系统，观察单个活跃细胞的移动和更新规律</p>
+  <header>
+    <h1>Mobile Automaton Explorer</h1>
+    <p>
+      This page re-creates the Chapter&nbsp;3 mobile automaton demonstration.
+      A single active cell moves along a one-dimensional tape, rewriting the
+      cell it visits and then stepping left, right, or staying put according to
+      the rule you specify.
+    </p>
+  </header>
+
+  <main>
+    <section class="panel controls">
+      <h2>Rule &amp; Controls</h2>
+      <form>
+        <label>
+          Preset rule
+          <select id="preset">
+            <option value="simple">Simple shifter</option>
+            <option value="oscillating">Oscillating pair</option>
+            <option value="sweeping">Sweeping cleaner</option>
+            <option value="complex">Complex trail</option>
+            <option value="splitting">Branching walkers</option>
+            <option value="tag">Tag-like</option>
+            <option value="custom">Custom…</option>
+          </select>
+        </label>
+
+        <table>
+          <thead>
+            <tr>
+              <th>Current cell</th>
+              <th>Write</th>
+              <th>Move</th>
+            </tr>
+          </thead>
+          <tbody>
+            <tr>
+              <td>0 (white)</td>
+              <td>
+                <select id="write0">
+                  <option value="0">0</option>
+                  <option value="1">1</option>
+                </select>
+              </td>
+              <td>
+                <select id="move0">
+                  <option value="-1">← left</option>
+                  <option value="0">• stay</option>
+                  <option value="1">→ right</option>
+                </select>
+              </td>
+            </tr>
+            <tr>
+              <td>1 (black)</td>
+              <td>
+                <select id="write1">
+                  <option value="0">0</option>
+                  <option value="1">1</option>
+                </select>
+              </td>
+              <td>
+                <select id="move1">
+                  <option value="-1">← left</option>
+                  <option value="0">• stay</option>
+                  <option value="1">→ right</option>
+                </select>
+              </td>
+            </tr>
+          </tbody>
+        </table>
+
+        <label>
+          Initial pattern
+          <select id="seed">
+            <option value="single">Single active cell</option>
+            <option value="three">Three clustered 1s</option>
+            <option value="random">Random tape</option>
+            <option value="edges">Two active edges</option>
+          </select>
+        </label>
+
+        <label class="slider-row">
+          <span>Speed</span>
+          <input type="range" id="speed" min="80" max="600" step="20" value="200" />
+          <span id="speedLabel">200 ms</span>
+        </label>
+
+        <div class="button-row">
+          <button type="button" id="runBtn">Run</button>
+          <button type="button" id="stepBtn" class="secondary">Step</button>
+          <button type="button" id="resetBtn" class="secondary">Reset</button>
         </div>
+      </form>
 
-        <div class="main-content">
-            <div class="controls-panel">
-                <div class="section-title">定义规则</div>
-                <p style="font-size: 0.9rem; color: rgba(255, 255, 255, 0.7); margin-bottom: 1rem;">
-                    设置移动自动机的状态转移规则：
-                </p>
-
-                <div class="rule-grid">
-                    <div class="rule-cell">
-                        <div class="rule-condition">读取0时</div>
-                        <div class="rule-actions">
-                            <div class="rule-action" data-condition="0" data-action="move" data-value="-1">←</div>
-                            <div class="rule-action" data-condition="0" data-action="move" data-value="0">停</div>
-                            <div class="rule-action active" data-condition="0" data-action="move" data-value="1">→</div>
-                            <div class="rule-action active" data-condition="0" data-action="write" data-value="1">写1</div>
-                            <div class="rule-action" data-condition="0" data-action="write" data-value="0">写0</div>
-                        </div>
-                    </div>
-                    <div class="rule-cell">
-                        <div class="rule-condition">读取1时</div>
-                        <div class="rule-actions">
-                            <div class="rule-action active" data-condition="1" data-action="move" data-value="-1">←</div>
-                            <div class="rule-action" data-condition="1" data-action="move" data-value="0">停</div>
-                            <div class="rule-action" data-condition="1" data-action="move" data-value="1">→</div>
-                            <div class="rule-action active" data-condition="1" data-action="write" data-value="0">写0</div>
-                            <div class="rule-action" data-condition="1" data-action="write" data-value="1">写1</div>
-                        </div>
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <div class="control-row">
-                        <span style="color: rgba(255, 215, 0, 0.8); font-size: 0.9rem;">当前规则: </span>
-                        <span id="current-rule" style="color: #ffd700; font-weight: bold; font-size: 1.1rem;">简单</span>
-                    </div>
-                </div>
-
-                <div class="section-title">预设规则</div>
-                <div class="preset-rules">
-                    <div class="preset-rule active" data-rule="simple">
-                        <div class="preset-name">简单移动</div>
-                        <div class="preset-description">基础左右移动</div>
-                    </div>
-                    <div class="preset-rule" data-rule="oscillating">
-                        <div class="preset-name">振荡运动</div>
-                        <div class="preset-description">周期性摆动</div>
-                    </div>
-                    <div class="preset-rule" data-rule="sweeping">
-                        <div class="preset-name">扫描模式</div>
-                        <div class="preset-description">逐渐扩展</div>
-                    </div>
-                    <div class="preset-rule" data-rule="complex">
-                        <div class="preset-name">复杂行为</div>
-                        <div class="preset-description">不可预测</div>
-                    </div>
-                    <div class="preset-rule" data-rule="splitting">
-                        <div class="preset-name">细胞分裂</div>
-                        <div class="preset-description">多活跃细胞</div>
-                    </div>
-                    <div class="preset-rule" data-rule="tag">
-                        <div class="preset-name">标签系统</div>
-                        <div class="preset-description">序列处理</div>
-                    </div>
-                </div>
-
-                <div class="section-title">初始配置</div>
-                <div class="pattern-selector">
-                    <div class="pattern-option active" data-pattern="single">
-                        <div style="color: #ffd700; font-weight: bold;">单细胞</div>
-                        <div style="font-size: 0.8rem; color: rgba(255,255,255,0.7);">中心单个活跃</div>
-                    </div>
-                    <div class="pattern-option" data-pattern="three">
-                        <div style="color: #ffd700; font-weight: bold;">三细胞</div>
-                        <div style="font-size: 0.8rem; color: rgba(255,255,255,0.7);">三个随机细胞</div>
-                    </div>
-                    <div class="pattern-option" data-pattern="random">
-                        <div style="color: #ffd700; font-weight: bold;">随机模式</div>
-                        <div style="font-size: 0.8rem; color: rgba(255,255,255,0.7);">随机分布</div>
-                    </div>
-                    <div class="pattern-option" data-pattern="edges">
-                        <div style="color: #ffd700; font-weight: bold;">边缘激活</div>
-                        <div style="font-size: 0.8rem; color: rgba(255,255,255,0.7);">两端活跃</div>
-                    </div>
-                </div>
-
-                <div class="section-title">控制参数</div>
-
-                <div class="control-group">
-                    <label class="control-label">带状长度</label>
-                    <div class="control-row">
-                        <input type="range" class="slider" id="tape-size" min="50" max="200" value="100">
-                        <span class="slider-value" id="tape-size-value">100</span>
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <label class="control-label">演化步数</label>
-                    <div class="control-row">
-                        <input type="range" class="slider" id="max-steps" min="50" max="300" value="150">
-                        <span class="slider-value" id="max-steps-value">150</span>
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <label class="control-label">演化速度</label>
-                    <div class="control-row">
-                        <input type="range" class="slider" id="speed" min="1" max="10" value="5">
-                        <span class="slider-value" id="speed-value">5</span>
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <div class="control-row">
-                        <button class="btn primary" id="start-btn">开始演化</button>
-                        <button class="btn" id="stop-btn">停止</button>
-                    </div>
-                    <div class="control-row">
-                        <button class="btn" id="reset-btn">重置</button>
-                        <button class="btn" id="step-btn">单步</button>
-                    </div>
-                </div>
-
-                <div class="rule-analysis" id="rule-analysis">
-                    <div class="analysis-title">规则分析</div>
-                    <div class="analysis-text" id="analysis-text">
-                        简单移动：活跃细胞在空白区域向右移动并写入1，在已填充区域向左移动并写入0。这创造了基本的来回移动模式。
-                    </div>
-                </div>
-            </div>
-
-            <div class="canvas-area">
-                <canvas id="mobile-canvas" width="800" height="600"></canvas>
-
-                <div class="canvas-info">
-                    <div class="info-item">
-                        <span class="info-label">当前步数</span>
-                        <span class="info-value" id="current-step">0</span>
-                    </div>
-                    <div class="info-item">
-                        <span class="info-label">活跃细胞</span>
-                        <span class="info-value" id="active-cells">1</span>
-                    </div>
-                    <div class="info-item">
-                        <span class="info-label">头部位置</span>
-                        <span class="info-value" id="head-position">50</span>
-                    </div>
-                    <div class="info-item">
-                        <span class="info-label">状态</span>
-                        <span class="info-value" id="evolution-status">就绪</span>
-                    </div>
-                </div>
-            </div>
+      <dl class="status">
+        <div>
+          <dt>Step</dt>
+          <dd id="stepCount">0</dd>
         </div>
-    </div>
-
-    <script>
-        class MobileAutomatonExplorer {
-            constructor() {
-                /* --- cache frequently used DOM nodes --- */
-                this.canvas = document.getElementById('mobile-canvas');
-                this.ctx = this.canvas.getContext('2d');
-                this.ruleActions = Array.from(document.querySelectorAll('.rule-action'));
-                this.presetEls = Array.from(document.querySelectorAll('.preset-rule'));
-                this.patternEls = Array.from(document.querySelectorAll('.pattern-option'));
-
-                /* --- runtime state --- */
-                this.tapeSize = 100;
-                this.maxSteps = 150;
-                this.currentStep = 0;
-                this.speedLevel = 5;
-                this.speed = this.calculateDelay(this.speedLevel);
-                this.isRunning = false;
-                this.animationId = null;
-
-                /* mobile automaton state */
-                this.tape = new Array(this.tapeSize).fill(0);
-                this.activeCells = [{ position: Math.floor(this.tapeSize / 2), direction: 1 }];
-                this.history = [];
-                this.maxHistory = 150;
-
-                /* rules: [move_delta, write_value] for states 0 and 1 */
-                this.rules = {
-                    0: [1, 1],  // If current cell is 0: move right, write 1
-                    1: [-1, 0]  // If current cell is 1: move left, write 0
-                };
-
-                this.currentRuleName = "简单";
-                this.currentPattern = "single";
-
-                this.init();
-            }
-
-            /* ---------- helpers ---------- */
-
-            clamp(n, min, max) {
-                return Math.min(Math.max(n, min), max);
-            }
-
-            calculateDelay(level) {
-                return Math.max(50, 550 - level * 50);
-            }
-
-            /* ---------- initialisation ---------- */
-
-            init() {
-                this.setupCanvas();
-                this.setupEventListeners();
-                this.updateRuleUI();
-                this.updateRuleDisplay();
-                this.resetSystem();
-                this.render();
-            }
-
-            setupCanvas() {
-                this.cellWidth = Math.min(this.canvas.width / this.tapeSize, 6);
-                this.cellHeight = Math.min(this.canvas.height / this.maxHistory, 4);
-                this.ctx.imageSmoothingEnabled = false;
-            }
-
-            /* ---------- UI / Events ---------- */
-
-            setupEventListeners() {
-                // rule actions
-                this.ruleActions.forEach(action => action.addEventListener('click', e => {
-                    this.toggleRuleAction(e.currentTarget);
-                }));
-
-                // preset rules
-                this.presetEls.forEach(preset => preset.addEventListener('click', e => {
-                    this.loadPresetRule(e.currentTarget);
-                }));
-
-                // pattern options
-                this.patternEls.forEach(pattern => pattern.addEventListener('click', e => {
-                    this.selectPattern(e.currentTarget);
-                }));
-
-                // main control buttons
-                document.getElementById('start-btn').addEventListener('click', () => this.start());
-                document.getElementById('stop-btn').addEventListener('click', () => this.stop());
-                document.getElementById('reset-btn').addEventListener('click', () => this.reset());
-                document.getElementById('step-btn').addEventListener('click', () => this.step());
-
-                // sliders
-                document.getElementById('tape-size')
-                    .addEventListener('input', e => this.setTapeSize(+e.target.value));
-                document.getElementById('max-steps')
-                    .addEventListener('input', e => this.setMaxSteps(+e.target.value));
-                document.getElementById('speed')
-                    .addEventListener('input', e => this.setSpeed(+e.target.value));
-            }
-
-            toggleRuleAction(el) {
-                const condition = parseInt(el.dataset.condition);
-                const action = el.dataset.action;
-                const value = parseInt(el.dataset.value);
-
-                // Remove active from other actions of the same type and condition
-                this.ruleActions.forEach(other => {
-                    if (parseInt(other.dataset.condition) === condition && 
-                        other.dataset.action === action && 
-                        other !== el) {
-                        other.classList.remove('active');
-                    }
-                });
-
-                // Toggle this action
-                el.classList.toggle('active');
-
-                this.updateRulesFromUI();
-            }
-
-            updateRulesFromUI() {
-                // Build rules from UI state
-                const newRules = { 0: [0, 0], 1: [0, 0] };
-
-                for (let condition of [0, 1]) {
-                    // Find active move action
-                    const activeMoveAction = this.ruleActions.find(el => 
-                        parseInt(el.dataset.condition) === condition &&
-                        el.dataset.action === 'move' &&
-                        el.classList.contains('active')
-                    );
-                    if (activeMoveAction) {
-                        newRules[condition][0] = parseInt(activeMoveAction.dataset.value);
-                    }
-
-                    // Find active write action
-                    const activeWriteAction = this.ruleActions.find(el => 
-                        parseInt(el.dataset.condition) === condition &&
-                        el.dataset.action === 'write' &&
-                        el.classList.contains('active')
-                    );
-                    if (activeWriteAction) {
-                        newRules[condition][1] = parseInt(activeWriteAction.dataset.value);
-                    }
-                }
-
-                this.rules = newRules;
-                this.currentRuleName = "自定义";
-                this.updateRuleDisplay();
-                this.updateRuleAnalysis();
-                this.updatePresetActiveState(null);
-            }
-
-            /* ---------- rule setters ---------- */
-
-            loadPresetRule(el) {
-                this.setRule(el.dataset.rule);
-            }
-
-            selectPattern(el) {
-                this.patternEls.forEach(p => p.classList.remove('active'));
-                el.classList.add('active');
-                this.currentPattern = el.dataset.pattern;
-                this.resetSystem();
-            }
-
-            setRule(ruleName) {
-                switch (ruleName) {
-                    case 'simple':
-                        this.rules = { 0: [1, 1], 1: [-1, 0] };
-                        this.currentRuleName = "简单";
-                        break;
-                    case 'oscillating':
-                        this.rules = { 0: [1, 1], 1: [-1, 1] };
-                        this.currentRuleName = "振荡";
-                        break;
-                    case 'sweeping':
-                        this.rules = { 0: [1, 0], 1: [-1, 1] };
-                        this.currentRuleName = "扫描";
-                        break;
-                    case 'complex':
-                        this.rules = { 0: [1, 1], 1: [1, 0] };
-                        this.currentRuleName = "复杂";
-                        break;
-                    case 'splitting':
-                        this.rules = { 0: [1, 1], 1: [-1, 0] };
-                        this.currentRuleName = "分裂";
-                        this.allowSplitting = true;
-                        break;
-                    case 'tag':
-                        this.rules = { 0: [1, 1], 1: [0, 0] };
-                        this.currentRuleName = "标签";
-                        break;
-                }
-
-                this.updateRuleUI();
-                this.updateRuleDisplay();
-                this.updateRuleAnalysis();
-                this.updatePresetActiveState(ruleName);
-            }
-
-            /* ---------- rule-related UI helpers ---------- */
-
-            updateRuleUI() {
-                // Update rule action states based on current rules
-                this.ruleActions.forEach(action => {
-                    const condition = parseInt(action.dataset.condition);
-                    const actionType = action.dataset.action;
-                    const value = parseInt(action.dataset.value);
-
-                    let shouldBeActive = false;
-                    if (actionType === 'move') {
-                        shouldBeActive = this.rules[condition][0] === value;
-                    } else if (actionType === 'write') {
-                        shouldBeActive = this.rules[condition][1] === value;
-                    }
-
-                    action.classList.toggle('active', shouldBeActive);
-                });
-            }
-
-            updateRuleDisplay() {
-                document.getElementById('current-rule').textContent = this.currentRuleName;
-            }
-
-            updateRuleAnalysis() {
-                const analyses = {
-                    "简单": "简单移动：活跃细胞在空白区域向右移动并写入1，在已填充区域向左移动并写入0。这创造了基本的来回移动模式。",
-                    "振荡": "振荡运动：更复杂的周期性运动模式，活跃细胞在不同状态下表现出不同的移动和写入行为。",
-                    "扫描": "扫描模式：活跃细胞进行渐进式的前后扫描运动，逐渐覆盖更大的区域。",
-                    "复杂": "复杂行为：产生不可预测的移动模式，展现出类似于混沌系统的特征。",
-                    "分裂": "细胞分裂：在特定条件下，活跃细胞可能分裂成多个独立的移动单元。",
-                    "标签": "标签系统：模拟标签系统的行为，通过符号操作实现计算过程。"
-                };
-
-                const text = analyses[this.currentRuleName] || `${this.currentRuleName}规则：观察其产生的移动模式和演化特征。`;
-                document.getElementById('analysis-text').textContent = text;
-            }
-
-            updatePresetActiveState(activeRule) {
-                this.presetEls.forEach(preset => {
-                    preset.classList.toggle('active', preset.dataset.rule === activeRule);
-                });
-            }
-
-            /* ---------- user adjustable params ---------- */
-
-            setTapeSize(size) {
-                this.tapeSize = size;
-                document.getElementById('tape-size-value').textContent = size;
-                this.setupCanvas();
-                this.resetSystem();
-            }
-
-            setMaxSteps(steps) {
-                this.maxSteps = steps;
-                document.getElementById('max-steps-value').textContent = steps;
-                this.setupCanvas();
-                this.resetSystem();
-            }
-
-            setSpeed(level) {
-                this.speedLevel = level;
-                this.speed = this.calculateDelay(level);
-                document.getElementById('speed-value').textContent = level;
-            }
-
-            /* ---------- simulation core ---------- */
-
-            resetSystem() {
-                this.currentStep = 0;
-                this.tape = new Array(this.tapeSize).fill(0);
-                this.activeCells = [];
-                this.history = [];
-                this.allowSplitting = false;
-
-                // Initialize based on selected pattern
-                this.initializePattern();
-                this.saveHistory();
-                this.updateInfo();
-                this.render();
-            }
-
-            initializePattern() {
-                const centerX = Math.floor(this.tapeSize / 2);
-
-                switch (this.currentPattern) {
-                    case 'single':
-                        this.activeCells = [{ position: centerX, direction: 1 }];
-                        break;
-                    case 'three':
-                        this.activeCells = [{ position: centerX, direction: 1 }];
-                        this.tape[centerX - 1] = Math.floor(Math.random() * 2);
-                        this.tape[centerX + 1] = Math.floor(Math.random() * 2);
-                        break;
-                    case 'random':
-                        this.activeCells = [{ position: centerX, direction: 1 }];
-                        for (let x = 0; x < this.tapeSize; x++) {
-                            if (Math.random() < 0.1) {
-                                this.tape[x] = 1;
-                            }
-                        }
-                        break;
-                    case 'edges':
-                        this.activeCells = [
-                            { position: 10, direction: 1 },
-                            { position: this.tapeSize - 10, direction: -1 }
-                        ];
-                        break;
-                }
-            }
-
-            step() {
-                if (this.currentStep >= this.maxSteps) {
-                    this.stop();
-                    return false;
-                }
-
-                const newActiveCells = [];
-
-                for (const activeCell of this.activeCells) {
-                    let { position, direction } = activeCell;
-
-                    // Wrap position
-                    position = ((position % this.tapeSize) + this.tapeSize) % this.tapeSize;
-
-                    // Get current cell value
-                    const currentValue = this.tape[position];
-
-                    // Apply rule
-                    const [moveDelta, writeValue] = this.rules[currentValue];
-
-                    // Write to current position
-                    this.tape[position] = writeValue;
-
-                    // Calculate new position
-                    const newPosition = ((position + moveDelta) % this.tapeSize + this.tapeSize) % this.tapeSize;
-
-                    // Add to new active cells
-                    newActiveCells.push({
-                        position: newPosition,
-                        direction: moveDelta
-                    });
-
-                    // Splitting behavior (for certain rules)
-                    if (this.allowSplitting && Math.random() < 0.05 && this.activeCells.length < 3) {
-                        newActiveCells.push({
-                            position: ((position - moveDelta) % this.tapeSize + this.tapeSize) % this.tapeSize,
-                            direction: -moveDelta
-                        });
-                    }
-                }
-
-                this.activeCells = newActiveCells;
-                this.currentStep++;
-
-                this.saveHistory();
-                this.updateInfo();
-                this.render();
-
-                return true;
-            }
-
-            saveHistory() {
-                const snapshot = {
-                    tape: [...this.tape],
-                    activeCells: this.activeCells.map(cell => ({ ...cell }))
-                };
-
-                this.history.push(snapshot);
-
-                if (this.history.length > this.maxHistory) {
-                    this.history.shift();
-                }
-            }
-
-            start() {
-                if (this.isRunning) return;
-                this.isRunning = true;
-                document.getElementById('evolution-status').textContent = '运行中';
-                document.getElementById('start-btn').classList.add('generating');
-
-                const evolve = () => {
-                    if (!this.isRunning) return;
-                    const canContinue = this.step();
-                    if (!canContinue) {
-                        this.stop();
-                        return;
-                    }
-                    this.animationId = setTimeout(evolve, this.speed);
-                };
-                evolve();
-            }
-
-            stop() {
-                this.isRunning = false;
-                if (this.animationId) {
-                    clearTimeout(this.animationId);
-                    this.animationId = null;
-                }
-                document.getElementById('evolution-status').textContent = '已停止';
-                document.getElementById('start-btn').classList.remove('generating');
-            }
-
-            reset() {
-                this.stop();
-                this.resetSystem();
-                document.getElementById('evolution-status').textContent = '就绪';
-            }
-
-            render() {
-                // Clear canvas
-                this.ctx.fillStyle = '#000';
-                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
-
-                // Draw history
-                for (let t = 0; t < this.history.length; t++) {
-                    const snapshot = this.history[t];
-                    const y = t * this.cellHeight;
-                    const alpha = Math.max(0.3, 1 - (this.history.length - t - 1) * 0.02);
-
-                    // Draw tape
-                    for (let x = 0; x < this.tapeSize; x++) {
-                        const value = snapshot.tape[x];
-                        if (value === 1) {
-                            this.ctx.fillStyle = `rgba(78, 205, 196, ${alpha})`;
-                            this.ctx.fillRect(x * this.cellWidth, y, this.cellWidth, this.cellHeight);
-                        }
-                    }
-
-                    // Draw active cells
-                    for (const activeCell of snapshot.activeCells) {
-                        this.ctx.fillStyle = `rgba(255, 215, 0, ${alpha})`;
-                        this.ctx.fillRect(
-                            activeCell.position * this.cellWidth,
-                            y,
-                            this.cellWidth,
-                            this.cellHeight
-                        );
-                    }
-                }
-            }
-
-            updateInfo() {
-                document.getElementById('current-step').textContent = this.currentStep;
-                document.getElementById('active-cells').textContent = this.activeCells.length;
-                const headPos = this.activeCells.length > 0 ? this.activeCells[0].position : 'N/A';
-                document.getElementById('head-position').textContent = headPos;
-            }
-        }
-
-        /* ---------- bootstrap ---------- */
-        document.addEventListener('DOMContentLoaded', () => new MobileAutomatonExplorer());
-    </script>
+        <div>
+          <dt>Active cells</dt>
+          <dd id="activeCount">1</dd>
+        </div>
+        <div>
+          <dt>Rule summary</dt>
+          <dd id="ruleSummary">0→(write 1, →), 1→(write 0, ←)</dd>
+        </div>
+      </dl>
+
+      <p class="notice">
+        Cells are drawn over time from top to bottom. Orange highlights show the
+        positions of the active cell(s) at each step.
+      </p>
+    </section>
+
+    <section class="panel">
+      <h2>Tape History</h2>
+      <canvas id="mobileCanvas" width="121" height="160" aria-label="Mobile automaton evolution"></canvas>
+    </section>
+  </main>
+
+  <script>
+    const TAPE_LENGTH = 121;
+    const MAX_STEPS = 160;
+
+    const presetSelect = document.getElementById('preset');
+    const write0 = document.getElementById('write0');
+    const write1 = document.getElementById('write1');
+    const move0 = document.getElementById('move0');
+    const move1 = document.getElementById('move1');
+    const seedSelect = document.getElementById('seed');
+    const speedInput = document.getElementById('speed');
+    const speedLabel = document.getElementById('speedLabel');
+    const runBtn = document.getElementById('runBtn');
+    const stepBtn = document.getElementById('stepBtn');
+    const resetBtn = document.getElementById('resetBtn');
+    const stepCountLabel = document.getElementById('stepCount');
+    const activeCountLabel = document.getElementById('activeCount');
+    const ruleSummary = document.getElementById('ruleSummary');
+
+    const canvas = document.getElementById('mobileCanvas');
+    const ctx = canvas.getContext('2d');
+
+    let timer = null;
+    let rule = {
+      0: { write: 1, move: 1 },
+      1: { write: 0, move: -1 }
+    };
+    let allowBranching = false;
+    let tape = new Array(TAPE_LENGTH).fill(0);
+    let activeCells = [{ position: Math.floor(TAPE_LENGTH / 2) }];
+    let stepNumber = 0;
+
+    function wrapPosition(x) {
+      const m = x % TAPE_LENGTH;
+      return m < 0 ? m + TAPE_LENGTH : m;
+    }
+
+    function describeRule() {
+      const parts = [0, 1].map(value => {
+        const { write, move } = rule[value];
+        const arrow = move < 0 ? '←' : move > 0 ? '→' : '•';
+        return `${value}→(write ${write}, ${arrow})`;
+      });
+      ruleSummary.textContent = parts.join(', ');
+    }
+
+    function syncInputsFromRule() {
+      write0.value = String(rule[0].write);
+      move0.value = String(rule[0].move);
+      write1.value = String(rule[1].write);
+      move1.value = String(rule[1].move);
+      describeRule();
+    }
+
+    function syncRuleFromInputs() {
+      rule = {
+        0: { write: Number(write0.value), move: Number(move0.value) },
+        1: { write: Number(write1.value), move: Number(move1.value) }
+      };
+      describeRule();
+      presetSelect.value = 'custom';
+    }
+
+    function applyPreset(name) {
+      allowBranching = false;
+      switch (name) {
+        case 'simple':
+          rule = { 0: { write: 1, move: 1 }, 1: { write: 0, move: -1 } };
+          break;
+        case 'oscillating':
+          rule = { 0: { write: 1, move: 1 }, 1: { write: 1, move: -1 } };
+          break;
+        case 'sweeping':
+          rule = { 0: { write: 0, move: 1 }, 1: { write: 1, move: -1 } };
+          break;
+        case 'complex':
+          rule = { 0: { write: 1, move: 1 }, 1: { write: 0, move: 1 } };
+          break;
+        case 'splitting':
+          rule = { 0: { write: 1, move: 1 }, 1: { write: 0, move: -1 } };
+          allowBranching = true;
+          break;
+        case 'tag':
+          rule = { 0: { write: 1, move: 1 }, 1: { write: 0, move: 0 } };
+          break;
+      }
+      syncInputsFromRule();
+    }
+
+    function resetTape(mode) {
+      tape = new Array(TAPE_LENGTH).fill(0);
+      allowBranching = allowBranching && presetSelect.value === 'splitting';
+      switch (mode) {
+        case 'single':
+          tape[Math.floor(TAPE_LENGTH / 2)] = 1;
+          activeCells = [{ position: Math.floor(TAPE_LENGTH / 2) }];
+          break;
+        case 'three':
+          const start = Math.floor(TAPE_LENGTH / 2) - 1;
+          for (let i = 0; i < 3; i++) {
+            tape[start + i] = Math.random() < 0.5 ? 1 : 0;
+          }
+          activeCells = [{ position: start + 1 }];
+          break;
+        case 'random':
+          for (let i = 0; i < TAPE_LENGTH; i++) {
+            tape[i] = Math.random() < 0.4 ? 1 : 0;
+          }
+          activeCells = [{ position: Math.floor(TAPE_LENGTH / 2) }];
+          break;
+        case 'edges':
+          tape[10] = 1;
+          tape[TAPE_LENGTH - 11] = 1;
+          activeCells = [
+            { position: 10 },
+            { position: TAPE_LENGTH - 11 }
+          ];
+          break;
+      }
+      stepNumber = 0;
+      stop();
+      clearCanvas();
+      drawSnapshot(0, tape, activeCells.map(cell => cell.position));
+      updateStatus();
+    }
+
+    function clearCanvas() {
+      ctx.fillStyle = '#000000';
+      ctx.fillRect(0, 0, canvas.width, canvas.height);
+    }
+
+    function drawSnapshot(row, tapeState, actives) {
+      for (let x = 0; x < TAPE_LENGTH; x++) {
+        const value = tapeState[x];
+        ctx.fillStyle = value === 0 ? '#ffffff' : '#000000';
+        ctx.fillRect(x, row, 1, 1);
+      }
+      ctx.fillStyle = 'rgba(255, 153, 0, 0.8)';
+      actives.forEach(pos => {
+        ctx.fillRect(pos, row, 1, 1);
+      });
+    }
+
+    function stepOnce() {
+      if (stepNumber >= MAX_STEPS - 1) {
+        stop();
+        return;
+      }
+
+      const newActives = [];
+      const visited = [];
+
+      for (const cell of activeCells) {
+        const pos = wrapPosition(cell.position);
+        const current = tape[pos];
+        const instruction = rule[current];
+        tape[pos] = instruction.write;
+        const nextPos = wrapPosition(pos + instruction.move);
+        newActives.push({ position: nextPos });
+        visited.push(nextPos);
+
+        if (allowBranching && instruction.move !== 0) {
+          const opposite = wrapPosition(pos - instruction.move);
+          newActives.push({ position: opposite });
+          visited.push(opposite);
+        }
+      }
+
+      activeCells = newActives;
+      stepNumber += 1;
+      drawSnapshot(stepNumber, tape, visited);
+      updateStatus();
+    }
+
+    function updateStatus() {
+      stepCountLabel.textContent = stepNumber;
+      activeCountLabel.textContent = activeCells.length;
+    }
+
+    function run() {
+      if (timer) return;
+      const delay = Number(speedInput.value);
+      timer = setInterval(() => {
+        stepOnce();
+      }, delay);
+      runBtn.textContent = 'Stop';
+    }
+
+    function stop() {
+      if (timer) {
+        clearInterval(timer);
+        timer = null;
+      }
+      runBtn.textContent = 'Run';
+    }
+
+    presetSelect.addEventListener('change', () => {
+      if (presetSelect.value === 'custom') {
+        syncRuleFromInputs();
+      } else {
+        applyPreset(presetSelect.value);
+      }
+      resetTape(seedSelect.value);
+    });
+
+    [write0, write1, move0, move1].forEach(select => {
+      select.addEventListener('change', () => {
+        syncRuleFromInputs();
+        resetTape(seedSelect.value);
+      });
+    });
+
+    seedSelect.addEventListener('change', () => {
+      resetTape(seedSelect.value);
+    });
+
+    speedInput.addEventListener('input', () => {
+      speedLabel.textContent = `${speedInput.value} ms`;
+      if (timer) {
+        stop();
+        run();
+      }
+    });
+
+    runBtn.addEventListener('click', () => {
+      if (timer) {
+        stop();
+      } else {
+        run();
+      }
+    });
+
+    stepBtn.addEventListener('click', () => {
+      stop();
+      stepOnce();
+    });
+
+    resetBtn.addEventListener('click', () => {
+      resetTape(seedSelect.value);
+    });
+
+    canvas.width = TAPE_LENGTH;
+    canvas.height = MAX_STEPS;
+
+    applyPreset('simple');
+    syncInputsFromRule();
+    resetTape('single');
+    describeRule();
+  </script>
 </body>
-
-</html>
\ No newline at end of file
+</html>
diff --git a/demos/chapter3/register-machine-demo.html b/demos/chapter3/register-machine-demo.html
index 797e7db4b66aad8ee9fd3a22c7399f8167c6d28f..d0c5bb9a62cd79eb0416bd1a75ac3fe7374c1a1e 100644
--- a/demos/chapter3/register-machine-demo.html
+++ b/demos/chapter3/register-machine-demo.html
@@ -1,904 +1,512 @@
 <!DOCTYPE html>
-<html lang="zh-CN">
-
+<html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>寄存器机器演示 - 交互式计算模型实验</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            line-height: 1.6;
-            color: #e0e0e0;
-            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
-            min-height: 100vh;
-            padding: 0;
-        }
-
-        .container {
-            width: 100vw;
-            min-height: 100vh;
-            margin: 0;
-            background: rgba(26, 26, 26, 0.8);
-            backdrop-filter: blur(10px);
-            overflow: hidden;
-        }
-
-        .header {
-            background: linear-gradient(135deg, #ffd700, #ffb300);
-            color: #1a1a1a;
-            padding: 2rem;
-            text-align: center;
-        }
-
-        .header h1 {
-            font-size: 2.5rem;
-            font-weight: 700;
-            margin-bottom: 0.5rem;
-        }
-
-        .header p {
-            font-size: 1.1rem;
-            opacity: 0.8;
-        }
-
-        .main-content {
-            display: grid;
-            grid-template-columns: 400px 1fr;
-            gap: 0;
-            min-height: calc(100vh - 120px);
-        }
-
-        .controls-panel {
-            background: rgba(40, 40, 40, 0.9);
-            padding: 2rem;
-            border-right: 1px solid rgba(255, 215, 0, 0.2);
-            max-height: calc(100vh - 200px);
-            overflow-y: auto;
-        }
-
-        .machines-area {
-            padding: 1.5rem;
-            display: flex;
-            flex-direction: column;
-            background: rgba(20, 20, 20, 0.5);
-            overflow: auto;
-        }
-
-        .section-title {
-            color: #ffd700;
-            font-size: 1.3rem;
-            font-weight: 600;
-            margin: 1.5rem 0 1rem 0;
-            padding-bottom: 0.5rem;
-            border-bottom: 2px solid rgba(255, 215, 0, 0.3);
-        }
-
-        .section-title:first-of-type {
-            margin-top: 0;
-        }
-
-        /* Program Selection */
-        .program-grid {
-            display: grid;
-            grid-template-columns: 1fr;
-            gap: 8px;
-            margin: 1rem 0;
-        }
-
-        .program-option {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            padding: 10px;
-            cursor: pointer;
-            transition: all 0.3s ease;
-            font-size: 0.9rem;
-        }
-
-        .program-option:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .program-option.active {
-            background: rgba(255, 215, 0, 0.2);
-            border-color: #ffd700;
-        }
-
-        .program-name {
-            font-weight: bold;
-            color: #ffd700;
-            font-size: 1rem;
-            margin-bottom: 4px;
-        }
-
-        .program-description {
-            color: rgba(255, 255, 255, 0.7);
-            font-size: 0.8rem;
-        }
-
-        /* Control Buttons */
-        .control-group {
-            margin: 1rem 0;
-        }
-
-        .control-row {
-            display: flex;
-            gap: 8px;
-            align-items: center;
-            margin: 8px 0;
-        }
-
-        .btn {
-            padding: 8px 16px;
-            border: 1px solid rgba(255, 215, 0, 0.4);
-            border-radius: 6px;
-            background: transparent;
-            color: rgba(255, 215, 0, 0.8);
-            cursor: pointer;
-            font-size: 0.9rem;
-            transition: all 0.3s ease;
-            flex: 1;
-        }
-
-        .btn:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .btn.primary {
-            background: rgba(255, 215, 0, 0.2);
-            color: #ffd700;
-            border-color: #ffd700;
-        }
-
-        .btn.primary:hover {
-            background: rgba(255, 215, 0, 0.3);
-        }
-
-        .btn:disabled {
-            opacity: 0.5;
-            cursor: not-allowed;
-        }
-
-        /* Machine Display */
-        .machine-container {
-            display: flex;
-            flex-direction: column;
-            gap: 2rem;
-        }
-
-        .machine-panel {
-            background: rgba(255, 255, 255, 0.03);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            border-radius: 10px;
-            padding: 1.5rem;
-        }
-
-        .machine-title {
-            color: #ffd700;
-            font-size: 1.3rem;
-            font-weight: 600;
-            margin-bottom: 1rem;
-            text-align: center;
-            padding-bottom: 0.5rem;
-            border-bottom: 1px solid rgba(255, 215, 0, 0.3);
-        }
-
-        /* Registers Display */
-        .registers-container {
-            display: flex;
-            justify-content: center;
-            gap: 1rem;
-            margin: 1rem 0;
-        }
-
-        .register {
-            background: rgba(0, 0, 0, 0.4);
-            border: 2px solid rgba(255, 215, 0, 0.5);
-            border-radius: 8px;
-            padding: 1rem;
-            text-align: center;
-            min-width: 80px;
-            transition: all 0.3s ease;
-        }
-
-        .register.highlight {
-            border-color: #ffd700;
-            background: rgba(255, 215, 0, 0.1);
-            transform: scale(1.05);
-        }
-
-        .register-label {
-            font-size: 0.8rem;
-            color: rgba(255, 215, 0, 0.8);
-            margin-bottom: 5px;
-            font-weight: 500;
-        }
-
-        .register-value {
-            font-size: 1.5rem;
-            font-weight: bold;
-            color: #ffd700;
-            font-family: 'JetBrains Mono', monospace;
-        }
-
-        /* Program Display */
-        .program-display {
-            background: rgba(0, 0, 0, 0.4);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            padding: 1rem;
-            margin: 1rem 0;
-            font-family: 'JetBrains Mono', monospace;
-            font-size: 0.9rem;
-            max-height: 300px;
-            overflow-y: auto;
-        }
-
-        .instruction {
-            display: flex;
-            padding: 4px 8px;
-            border-radius: 4px;
-            margin: 2px 0;
-            border-left: 3px solid transparent;
-            transition: all 0.3s ease;
-        }
-
-        .instruction.current {
-            border-left-color: #ffd700;
-            background: rgba(255, 215, 0, 0.1);
-        }
-
-        .instruction-num {
-            color: rgba(255, 255, 255, 0.5);
-            min-width: 30px;
-            font-weight: 500;
-        }
-
-        .instruction-text {
-            flex: 1;
-            margin-left: 10px;
-            color: rgba(255, 255, 255, 0.8);
-        }
-
-        /* Status Display */
-        .machine-status {
-            display: flex;
-            justify-content: space-between;
-            align-items: center;
-            margin: 1rem 0;
-            padding: 12px 16px;
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            font-size: 0.9rem;
-            background: rgba(255, 255, 255, 0.02);
-        }
-
-        .status-item {
-            display: flex;
-            flex-direction: column;
-            align-items: center;
-            gap: 4px;
-        }
-
-        .status-label {
-            color: rgba(255, 215, 0, 0.8);
-            font-size: 0.8rem;
-        }
-
-        .status-value {
-            color: #ffd700;
-            font-weight: bold;
-        }
-
-        .status-value.running {
-            color: #90EE90;
-        }
-
-        .status-value.halted {
-            color: #FFB6C1;
-        }
-
-        /* Speed Control */
-        .slider {
-            flex: 1;
-            -webkit-appearance: none;
-            height: 6px;
-            border-radius: 3px;
-            background: rgba(255, 255, 255, 0.2);
-            outline: none;
-        }
-
-        .slider::-webkit-slider-thumb {
-            -webkit-appearance: none;
-            width: 18px;
-            height: 18px;
-            border-radius: 50%;
-            background: #ffd700;
-            cursor: pointer;
-        }
-
-        .slider-value {
-            color: rgba(255, 215, 0, 0.8);
-            font-weight: 500;
-            min-width: 40px;
-            text-align: center;
-        }
-
-        /* Analysis Panel */
-        .analysis-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            border-radius: 6px;
-            padding: 12px;
-            margin: 1rem 0;
-            font-size: 0.9rem;
-        }
-
-        .analysis-title {
-            color: #ffd700;
-            font-weight: 600;
-            margin-bottom: 8px;
-        }
-
-        .analysis-text {
-            color: rgba(255, 255, 255, 0.8);
-            line-height: 1.5;
-        }
-
-        /* Responsive Design */
-        @media (max-width: 1200px) {
-            .main-content {
-                grid-template-columns: 350px 1fr;
-            }
-        }
-
-        @media (max-width: 1024px) {
-            .main-content {
-                grid-template-columns: 1fr;
-                min-height: auto;
-            }
-
-            .controls-panel {
-                max-height: none;
-                border-right: none;
-                border-bottom: 1px solid rgba(255, 215, 0, 0.2);
-                padding: 1.5rem;
-            }
-
-            .machines-area {
-                padding: 1rem;
-            }
-        }
-
-        @media (max-width: 768px) {
-            .header {
-                padding: 1.5rem;
-            }
-
-            .header h1 {
-                font-size: 2rem;
-            }
-
-            .controls-panel,
-            .machines-area {
-                padding: 1rem;
-            }
-
-            .registers-container {
-                flex-wrap: wrap;
-                gap: 0.5rem;
-            }
-
-            .register {
-                min-width: 60px;
-                padding: 0.8rem;
-            }
-
-            .machine-container {
-                gap: 1rem;
-            }
-        }
-
-        /* Loading Animation */
-        @keyframes pulse {
-            0%, 100% {
-                opacity: 0.7;
-            }
-            50% {
-                opacity: 1;
-            }
-        }
-
-        .generating {
-            animation: pulse 1.5s infinite;
-        }
-
-        /* Custom Scrollbars */
-        .program-display::-webkit-scrollbar,
-        .controls-panel::-webkit-scrollbar {
-            width: 6px;
-        }
-
-        .program-display::-webkit-scrollbar-track,
-        .controls-panel::-webkit-scrollbar-track {
-            background: rgba(255, 255, 255, 0.1);
-        }
-
-        .program-display::-webkit-scrollbar-thumb,
-        .controls-panel::-webkit-scrollbar-thumb {
-            background: rgba(255, 215, 0, 0.3);
-            border-radius: 3px;
-        }
-
-        .program-display::-webkit-scrollbar-thumb:hover,
-        .controls-panel::-webkit-scrollbar-thumb:hover {
-            background: rgba(255, 215, 0, 0.5);
-        }
-    </style>
+  <meta charset="utf-8" />
+  <meta name="viewport" content="width=device-width, initial-scale=1" />
+  <title>Register Machine Demonstration</title>
+  <style>
+    :root {
+      color-scheme: light dark;
+      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
+    }
+
+    body {
+      margin: 0;
+      padding: 24px;
+      background: #f4f5f7;
+      color: #202124;
+    }
+
+    header {
+      max-width: 900px;
+      margin: 0 auto 24px auto;
+    }
+
+    h1 {
+      font-size: 1.9rem;
+      margin: 0 0 6px 0;
+      font-weight: 600;
+    }
+
+    header p {
+      margin: 4px 0 0 0;
+      max-width: 70ch;
+      line-height: 1.55;
+      color: #4a4f55;
+    }
+
+    main {
+      max-width: 1100px;
+      margin: 0 auto;
+      display: grid;
+      grid-template-columns: 360px 1fr;
+      gap: 20px;
+    }
+
+    @media (max-width: 960px) {
+      main {
+        grid-template-columns: 1fr;
+      }
+    }
+
+    .panel {
+      background: #fff;
+      border: 1px solid #d4d7dd;
+      border-radius: 8px;
+      padding: 16px;
+      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
+    }
+
+    .panel h2 {
+      margin: 0 0 12px 0;
+      font-size: 1.1rem;
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    .controls form {
+      display: grid;
+      gap: 12px;
+    }
+
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 6px;
+      font-size: 0.9rem;
+    }
+
+    select,
+    input[type="number"],
+    textarea {
+      padding: 6px 8px;
+      border-radius: 6px;
+      border: 1px solid #c3c7ce;
+      font-size: 0.95rem;
+      font-family: inherit;
+      background: #fff;
+      color: inherit;
+    }
+
+    textarea {
+      min-height: 180px;
+      resize: vertical;
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+    }
+
+    button {
+      padding: 7px 12px;
+      border-radius: 6px;
+      border: 1px solid #0b57d0;
+      background: #0b57d0;
+      color: #fff;
+      font-weight: 600;
+      cursor: pointer;
+      transition: background 0.2s ease;
+    }
+
+    button.secondary {
+      background: #fff;
+      color: #0b57d0;
+    }
+
+    button:disabled {
+      opacity: 0.55;
+      cursor: default;
+    }
+
+    .button-row {
+      display: flex;
+      flex-wrap: wrap;
+      gap: 8px;
+    }
+
+    table.registers {
+      width: 100%;
+      border-collapse: collapse;
+      margin-top: 10px;
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+      font-size: 0.95rem;
+    }
+
+    table.registers th,
+    table.registers td {
+      border: 1px solid #d4d7dd;
+      padding: 6px;
+      text-align: center;
+    }
+
+    table.registers th {
+      background: #eef3fd;
+      color: #0b57d0;
+      font-weight: 600;
+    }
+
+    .status {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
+      gap: 8px;
+      margin-top: 12px;
+      font-size: 0.9rem;
+      color: #3c4043;
+    }
+
+    .status dt {
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    .status dd {
+      margin: 0;
+    }
+
+    .log {
+      border: 1px solid #d4d7dd;
+      border-radius: 8px;
+      background: #fafafa;
+      padding: 12px;
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+      font-size: 0.9rem;
+      max-height: 520px;
+      overflow-y: auto;
+    }
+
+    .log p {
+      margin: 4px 0;
+    }
+
+    .notice {
+      font-size: 0.85rem;
+      color: #5f6368;
+      line-height: 1.4;
+      margin-top: 12px;
+    }
+  </style>
 </head>
-
-<!-- Google tag (gtag.js) -->
-<script async src="https://www.googletagmanager.com/gtag/js?id=G-QR1KHESCTK"></script>
-<script>
-    window.dataLayer = window.dataLayer || [];
-    function gtag() { dataLayer.push(arguments); }
-    gtag('js', new Date());
-    gtag('config', 'G-QR1KHESCTK');
-</script>
-
 <body>
-    <div class="container">
-        <div class="header">
-            <h1>寄存器机器演示</h1>
-            <p>交互式探索计算的基本模型，理解简单指令如何产生复杂计算</p>
+  <header>
+    <h1>Register Machine Demonstration</h1>
+    <p>
+      Register machines use just two instructions—increment and conditional
+      decrement—to illustrate how simple hardware-like models can perform
+      complex computation. Edit the program below or load a preset inspired by
+      the systems in Chapter&nbsp;3.
+    </p>
+  </header>
+
+  <main>
+    <section class="panel controls">
+      <h2>Program</h2>
+      <form>
+        <label>
+          Preset
+          <select id="preset">
+            <option value="transfer">Transfer R1 into R2 and halt</option>
+            <option value="copy">Copy R1 to R2 (preserve R1)</option>
+            <option value="loop">Non-halting increment loop</option>
+            <option value="custom">Custom…</option>
+          </select>
+        </label>
+
+        <label>
+          Instructions (syntax: <code>1: DEC 1 -> 2,3</code> or <code>2: INC 2 -> 1</code>)
+          <textarea id="program"></textarea>
+        </label>
+
+        <label>
+          Registers (comma separated values for R1…Rn)
+          <input type="text" id="registers" value="3,0,0" />
+        </label>
+
+        <label>
+          Maximum steps
+          <input type="number" id="maxSteps" min="1" max="5000" value="400" />
+        </label>
+
+        <div class="button-row">
+          <button type="button" id="runBtn">Run</button>
+          <button type="button" id="stepBtn" class="secondary">Step</button>
+          <button type="button" id="resetBtn" class="secondary">Reset</button>
         </div>
-
-        <div class="main-content">
-            <div class="controls-panel">
-                <div class="section-title">程序选择</div>
-                <p style="font-size: 0.9rem; color: rgba(255, 255, 255, 0.7); margin-bottom: 1rem;">
-                    选择不同的程序来探索寄存器机器的计算能力：
-                </p>
-
-                <div class="program-grid" id="program-grid">
-                    <div class="program-option active" data-program="increment">
-                        <div class="program-name">简单递增</div>
-                        <div class="program-description">将R0寄存器递增3次</div>
-                    </div>
-                    <div class="program-option" data-program="add">
-                        <div class="program-name">加法运算</div>
-                        <div class="program-description">计算R0 + R1，结果存入R0</div>
-                    </div>
-                    <div class="program-option" data-program="multiply">
-                        <div class="program-name">乘法运算</div>
-                        <div class="program-description">计算R1 × R2，结果存入R0</div>
-                    </div>
-                    <div class="program-option" data-program="fibonacci">
-                        <div class="program-name">斐波那契数列</div>
-                        <div class="program-description">生成斐波那契数列</div>
-                    </div>
-                    <div class="program-option" data-program="subtract">
-                        <div class="program-name">减法运算</div>
-                        <div class="program-description">计算R0 - R1，结果存入R0</div>
-                    </div>
-                    <div class="program-option" data-program="gcd">
-                        <div class="program-name">最大公约数</div>
-                        <div class="program-description">计算R0和R1的最大公约数</div>
-                    </div>
-                </div>
-
-                <div class="section-title">执行控制</div>
-
-                <div class="control-group">
-                    <div class="control-row">
-                        <button class="btn primary" id="step-btn">单步执行</button>
-                        <button class="btn primary" id="run-btn">连续运行</button>
-                    </div>
-                    <div class="control-row">
-                        <button class="btn" id="stop-btn" disabled>停止</button>
-                        <button class="btn" id="reset-btn">重置</button>
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <label style="color: rgba(255, 215, 0, 0.8); font-size: 0.9rem; margin-bottom: 8px; display: block;">执行速度</label>
-                    <div class="control-row">
-                        <input type="range" class="slider" id="speed-slider" min="1" max="10" value="5">
-                        <span class="slider-value" id="speed-value">5</span>
-                    </div>
-                </div>
-
-                <div class="analysis-panel">
-                    <div class="analysis-title">关于寄存器机器</div>
-                    <div class="analysis-text" id="analysis-text">
-                        寄存器机器是Wolfram在《一种新科学》中讨论的基本计算模型。它们由有限个寄存器（存储非负整数）和简单指令组成，却能实现图灵完备的计算。
-                    </div>
-                </div>
-            </div>
-
-            <div class="machines-area">
-                <div class="machine-container">
-                    <div class="machine-panel">
-                        <div class="machine-title">寄存器机器</div>
-
-                        <div class="registers-container" id="registers-container">
-                            <div class="register" id="register-0">
-                                <div class="register-label">R0</div>
-                                <div class="register-value">0</div>
-                            </div>
-                            <div class="register" id="register-1">
-                                <div class="register-label">R1</div>
-                                <div class="register-value">0</div>
-                            </div>
-                            <div class="register" id="register-2">
-                                <div class="register-label">R2</div>
-                                <div class="register-value">0</div>
-                            </div>
-                        </div>
-
-                        <div class="program-display" id="program-display">
-                            <!-- Program instructions will be displayed here -->
-                        </div>
-
-                        <div class="machine-status">
-                            <div class="status-item">
-                                <span class="status-label">程序计数器</span>
-                                <span class="status-value" id="pc-value">1</span>
-                            </div>
-                            <div class="status-item">
-                                <span class="status-label">执行步数</span>
-                                <span class="status-value" id="steps-value">0</span>
-                            </div>
-                            <div class="status-item">
-                                <span class="status-label">状态</span>
-                                <span class="status-value" id="status-value">就绪</span>
-                            </div>
-                            <div class="status-item">
-                                <span class="status-label">当前指令</span>
-                                <span class="status-value" id="current-instruction">-</span>
-                            </div>
-                        </div>
-                    </div>
-                </div>
-            </div>
+      </form>
+    </section>
+
+    <section class="panel">
+      <h2>Execution</h2>
+      <dl class="status">
+        <div>
+          <dt>Step</dt>
+          <dd id="stepLabel">0</dd>
         </div>
-    </div>
-
-    <script>
-        // Register Machine Implementation
-        class RegisterMachine {
-            constructor() {
-                this.registers = [0, 0, 0];
-                this.program = [];
-                this.pc = 0; // program counter
-                this.running = false;
-                this.intervalId = null;
-                this.stepCount = 0;
-                this.maxSteps = 10000;
-                this.speed = 200; // milliseconds
-                this.highlightedRegister = -1;
-                
-                this.programs = {
-                    increment: {
-                        program: ['INC R0', 'INC R0', 'INC R0', 'HALT'],
-                        initial: [0, 0, 0],
-                        description: '将R0寄存器递增3次，演示最基本的寄存器操作。'
-                    },
-                    add: {
-                        program: ['DEC R1 5', 'INC R0', 'DEC R1 5', 'INC R0', 'HALT'],
-                        initial: [0, 3, 0],
-                        description: '通过循环将R1的值加到R0上，实现加法运算。每次将R1减1的同时将R0加1。'
-                    },
-                    multiply: {
-                        program: [
-                            'DEC R1 8',
-                            'DEC R2 6', 
-                            'INC R0',
-                            'DEC R2 6',
-                            'INC R2',
-                            'DEC R1 8',
-                            'INC R1',
-                            'HALT'
-                        ],
-                        initial: [0, 2, 3],
-                        description: '通过嵌套循环实现乘法运算，将R1×R2的结果存储在R0中。'
-                    },
-                    fibonacci: {
-                        program: [
-                            'DEC R2 11',
-                            'INC R0',
-                            'DEC R1 8',
-                            'INC R0',
-                            'INC R1',
-                            'INC R1',
-                            'DEC R0 11',
-                            'DEC R1 11',
-                            'DEC R0 4',
-                            'DEC R2 11',
-                            'HALT'
-                        ],
-                        initial: [1, 1, 5],
-                        description: '生成斐波那契数列，展示寄存器机器处理递归模式的能力。'
-                    },
-                    subtract: {
-                        program: ['DEC R1 5', 'DEC R0 5', 'DEC R1 5', 'DEC R0 5', 'HALT'],
-                        initial: [8, 3, 0],
-                        description: '实现减法运算，同时递减R0和R1直到R1为0，结果为R0-R1。'
-                    },
-                    gcd: {
-                        program: [
-                            'DEC R0 5',
-                            'DEC R1 9',
-                            'DEC R0 5',
-                            'INC R1',
-                            'DEC R0 9',
-                            'DEC R1 9',
-                            'DEC R1 9',
-                            'INC R0',
-                            'DEC R1 9',
-                            'HALT'
-                        ],
-                        initial: [12, 8, 0],
-                        description: '使用欧几里得算法计算两个数的最大公约数，展示复杂算法的实现。'
-                    }
-                };
-
-                this.init();
-            }
-
-            init() {
-                this.setupEventListeners();
-                this.loadProgram('increment');
-                this.updateDisplay();
-            }
-
-            setupEventListeners() {
-                // Program selection
-                document.querySelectorAll('.program-option').forEach(option => {
-                    option.addEventListener('click', (e) => {
-                        this.selectProgram(e.currentTarget);
-                    });
-                });
-
-                // Control buttons
-                document.getElementById('step-btn').addEventListener('click', () => this.step());
-                document.getElementById('run-btn').addEventListener('click', () => this.run());
-                document.getElementById('stop-btn').addEventListener('click', () => this.stop());
-                document.getElementById('reset-btn').addEventListener('click', () => this.reset());
-
-                // Speed control
-                document.getElementById('speed-slider').addEventListener('input', (e) => {
-                    this.setSpeed(parseInt(e.target.value));
-                });
-            }
-
-            selectProgram(element) {
-                // Update UI
-                document.querySelectorAll('.program-option').forEach(el => {
-                    el.classList.remove('active');
-                });
-                element.classList.add('active');
-
-                // Load program
-                const programName = element.dataset.program;
-                this.loadProgram(programName);
-                this.updateAnalysis(programName);
-            }
-
-            loadProgram(programName) {
-                const programData = this.programs[programName];
-                this.program = [...programData.program];
-                this.registers = [...programData.initial];
-                this.pc = 0;
-                this.stepCount = 0;
-                this.running = false;
-                this.highlightedRegister = -1;
-                this.updateDisplay();
-            }
-
-            step() {
-                if (this.pc >= this.program.length) {
-                    this.halt();
-                    return false;
-                }
-
-                if (this.stepCount >= this.maxSteps) {
-                    this.halt();
-                    return false;
-                }
-
-                const instruction = this.program[this.pc];
-                this.executeInstruction(instruction);
-                this.stepCount++;
-                this.updateDisplay();
-                return true;
-            }
-
-            executeInstruction(instruction) {
-                const parts = instruction.split(' ');
-                const cmd = parts[0];
-                
-                // Reset register highlighting
-                this.highlightedRegister = -1;
-
-                switch (cmd) {
-                    case 'INC':
-                        const incReg = parseInt(parts[1].substring(1));
-                        this.registers[incReg]++;
-                        this.highlightedRegister = incReg;
-                        this.pc++;
-                        break;
-
-                    case 'DEC':
-                        const decReg = parseInt(parts[1].substring(1));
-                        const jumpTarget = parseInt(parts[2]) - 1; // Convert to 0-based
-                        this.highlightedRegister = decReg;
-                        if (this.registers[decReg] > 0) {
-                            this.registers[decReg]--;
-                            this.pc++;
-                        } else {
-                            this.pc = jumpTarget;
-                        }
-                        break;
-
-                    case 'HALT':
-                        this.halt();
-                        return;
-                }
-            }
-
-            run() {
-                if (this.running) return;
-                
-                this.running = true;
-                document.getElementById('run-btn').disabled = true;
-                document.getElementById('stop-btn').disabled = false;
-                document.getElementById('run-btn').classList.add('generating');
-                
-                const executeStep = () => {
-                    if (!this.running) return;
-                    
-                    if (!this.step()) {
-                        this.stop();
-                        return;
-                    }
-                    
-                    this.intervalId = setTimeout(executeStep, this.speed);
-                };
-                
-                executeStep();
-            }
-
-            stop() {
-                this.running = false;
-                if (this.intervalId) {
-                    clearTimeout(this.intervalId);
-                    this.intervalId = null;
-                }
-                document.getElementById('run-btn').disabled = false;
-                document.getElementById('stop-btn').disabled = true;
-                document.getElementById('run-btn').classList.remove('generating');
-                this.updateDisplay();
-            }
-
-            halt() {
-                this.running = false;
-                if (this.intervalId) {
-                    clearTimeout(this.intervalId);
-                    this.intervalId = null;
-                }
-                document.getElementById('run-btn').disabled = false;
-                document.getElementById('stop-btn').disabled = true;
-                document.getElementById('run-btn').classList.remove('generating');
-                this.updateDisplay();
-            }
-
-            reset() {
-                this.stop();
-                // Get current program name
-                const activeProgram = document.querySelector('.program-option.active');
-                if (activeProgram) {
-                    this.loadProgram(activeProgram.dataset.program);
-                }
-            }
-
-            setSpeed(level) {
-                this.speed = Math.max(50, 550 - level * 50); // 500ms to 50ms
-                document.getElementById('speed-value').textContent = level;
-            }
-
-            updateDisplay() {
-                this.updateRegisters();
-                this.updateProgram();
-                this.updateStatus();
-            }
-
-            updateRegisters() {
-                for (let i = 0; i < 3; i++) {
-                    const registerEl = document.getElementById(`register-${i}`);
-                    const valueEl = registerEl.querySelector('.register-value');
-                    valueEl.textContent = this.registers[i];
-                    
-                    // Highlight register if it was just modified
-                    if (i === this.highlightedRegister) {
-                        registerEl.classList.add('highlight');
-                        setTimeout(() => {
-                            registerEl.classList.remove('highlight');
-                        }, 500);
-                    }
-                }
-            }
-
-            updateProgram() {
-                const programDisplay = document.getElementById('program-display');
-                programDisplay.innerHTML = '';
-                
-                this.program.forEach((instruction, index) => {
-                    const div = document.createElement('div');
-                    div.className = 'instruction' + (index === this.pc ? ' current' : '');
-                    
-                    const numSpan = document.createElement('span');
-                    numSpan.className = 'instruction-num';
-                    numSpan.textContent = `${index + 1}:`;
-                    
-                    const textSpan = document.createElement('span');
-                    textSpan.className = 'instruction-text';
-                    textSpan.textContent = instruction;
-                    
-                    div.appendChild(numSpan);
-                    div.appendChild(textSpan);
-                    programDisplay.appendChild(div);
-                });
-            }
-
-            updateStatus() {
-                document.getElementById('pc-value').textContent = this.pc + 1;
-                document.getElementById('steps-value').textContent = this.stepCount;
-                
-                const statusEl = document.getElementById('status-value');
-                const currentInstrEl = document.getElementById('current-instruction');
-                
-                if (this.running) {
-                    statusEl.textContent = '运行中';
-                    statusEl.className = 'status-value running';
-                } else if (this.pc >= this.program.length) {
-                    statusEl.textContent = '已停止';
-                    statusEl.className = 'status-value halted';
-                } else {
-                    statusEl.textContent = '就绪';
-                    statusEl.className = 'status-value';
-                }
-                
-                if (this.pc < this.program.length) {
-                    currentInstrEl.textContent = this.program[this.pc];
-                } else {
-                    currentInstrEl.textContent = 'HALT';
-                }
-            }
-
-            updateAnalysis(programName) {
-                const analysisText = document.getElementById('analysis-text');
-                const programData = this.programs[programName];
-                if (programData && programData.description) {
-                    analysisText.textContent = programData.description;
-                }
-            }
-        }
-
-        // Initialize when DOM is loaded
-        document.addEventListener('DOMContentLoaded', () => {
-            new RegisterMachine();
-        });
-    </script>
+        <div>
+          <dt>Instruction</dt>
+          <dd id="ipLabel">—</dd>
+        </div>
+        <div>
+          <dt>Status</dt>
+          <dd id="statusLabel">ready</dd>
+        </div>
+      </dl>
+
+      <table class="registers" id="registerTable"></table>
+
+      <div class="log" id="log"></div>
+
+      <p class="notice">
+        <code>INC r -> k</code> increments register <em>r</em> and jumps to
+        instruction <em>k</em>. <code>DEC r -> k, m</code> decrements register
+        <em>r</em> if it is non-zero and jumps to <em>k</em>; otherwise it jumps
+        to <em>m</em> without changing the register. <code>HALT</code> stops.
+      </p>
+    </section>
+  </main>
+
+  <script>
+    const PRESETS = {
+      transfer: `1: DEC 1 -> 2,3\n2: INC 2 -> 1\n3: HALT`,
+      copy: `1: DEC 1 -> 2,4\n2: INC 2 -> 3\n3: INC 3 -> 1\n4: DEC 3 -> 5,6\n5: INC 1 -> 4\n6: HALT`,
+      loop: `1: INC 1 -> 2\n2: DEC 2 -> 1,3\n3: INC 3 -> 1`
+    };
+
+    const presetSelect = document.getElementById('preset');
+    const programInput = document.getElementById('program');
+    const registersInput = document.getElementById('registers');
+    const maxStepsInput = document.getElementById('maxSteps');
+    const runBtn = document.getElementById('runBtn');
+    const stepBtn = document.getElementById('stepBtn');
+    const resetBtn = document.getElementById('resetBtn');
+    const stepLabel = document.getElementById('stepLabel');
+    const ipLabel = document.getElementById('ipLabel');
+    const statusLabel = document.getElementById('statusLabel');
+    const registerTable = document.getElementById('registerTable');
+    const logContainer = document.getElementById('log');
+
+    let instructions = new Map();
+    let registers = [];
+    let instructionPointer = null;
+    let stepCount = 0;
+    let timer = null;
+
+    function loadPreset(name) {
+      if (name === 'custom') return;
+      programInput.value = PRESETS[name];
+      resetMachine();
+    }
+
+    function parseProgram(text) {
+      const lines = text.split(/\r?\n/);
+      const program = new Map();
+      let firstLabel = null;
+      for (const rawLine of lines) {
+        const line = rawLine.trim();
+        if (!line) continue;
+        const match = line.match(/^(\d+):\s*(INC|DEC|HALT)(?:\s+(\d+))?(?:\s*->\s*(\d+)(?:\s*,\s*(\d+))?)?$/i);
+        if (!match) {
+          throw new Error(`Cannot parse line: "${line}"`);
+        }
+        const label = Number(match[1]);
+        const op = match[2].toUpperCase();
+        if (firstLabel === null) firstLabel = label;
+        if (op === 'HALT') {
+          program.set(label, { type: 'HALT' });
+        } else if (op === 'INC') {
+          const reg = Number(match[3]);
+          const next = Number(match[4]);
+          if (!Number.isFinite(reg) || !Number.isFinite(next)) {
+            throw new Error(`INC requires register and next label: "${line}"`);
+          }
+          program.set(label, { type: 'INC', reg, next });
+        } else if (op === 'DEC') {
+          const reg = Number(match[3]);
+          const target1 = Number(match[4]);
+          const target2 = Number(match[5]);
+          if (!Number.isFinite(reg) || !Number.isFinite(target1) || !Number.isFinite(target2)) {
+            throw new Error(`DEC requires register and two targets: "${line}"`);
+          }
+          program.set(label, { type: 'DEC', reg, ifNonZero: target1, ifZero: target2 });
+        }
+      }
+      if (firstLabel === null) {
+        throw new Error('Program is empty');
+      }
+      return { program, start: firstLabel };
+    }
+
+    function parseRegisters(text) {
+      return text
+        .split(',')
+        .map(v => Number(v.trim()))
+        .filter(v => Number.isFinite(v));
+    }
+
+    function resetMachine() {
+      try {
+        const { program, start } = parseProgram(programInput.value);
+        instructions = program;
+        instructionPointer = start;
+        registers = parseRegisters(registersInput.value);
+        if (registers.length === 0) registers = [0, 0, 0];
+        stepCount = 0;
+        stop();
+        renderStatus('ready');
+        renderRegisters();
+        logContainer.innerHTML = '';
+      } catch (error) {
+        statusLabel.textContent = error.message;
+      }
+    }
+
+    function renderStatus(text) {
+      stepLabel.textContent = stepCount;
+      ipLabel.textContent = instructionPointer === null ? 'halt' : instructionPointer;
+      statusLabel.textContent = text;
+    }
+
+    function renderRegisters() {
+      registerTable.innerHTML = '';
+      const header = document.createElement('tr');
+      registers.forEach((_, idx) => {
+        const th = document.createElement('th');
+        th.textContent = `R${idx + 1}`;
+        header.appendChild(th);
+      });
+      registerTable.appendChild(header);
+
+      const row = document.createElement('tr');
+      registers.forEach(value => {
+        const td = document.createElement('td');
+        td.textContent = value;
+        row.appendChild(td);
+      });
+      registerTable.appendChild(row);
+    }
+
+    function appendLog(message) {
+      const entry = document.createElement('p');
+      entry.textContent = message;
+      logContainer.appendChild(entry);
+      logContainer.scrollTop = logContainer.scrollHeight;
+    }
+
+    function stepOnce() {
+      if (instructionPointer === null) {
+        renderStatus('halted');
+        stop();
+        return;
+      }
+
+      const instruction = instructions.get(instructionPointer);
+      if (!instruction) {
+        appendLog(`No instruction at label ${instructionPointer}; halting.`);
+        instructionPointer = null;
+        renderStatus('halted');
+        stop();
+        return;
+      }
+
+      if (stepCount >= Number(maxStepsInput.value)) {
+        appendLog('Step limit reached; halting.');
+        instructionPointer = null;
+        renderStatus('limit reached');
+        stop();
+        return;
+      }
+
+      stepCount += 1;
+
+      if (instruction.type === 'HALT') {
+        appendLog(`Step ${stepCount}: HALT`);
+        instructionPointer = null;
+        renderStatus('halted');
+        stop();
+        return;
+      }
+
+      if (instruction.reg < 1 || instruction.reg > registers.length) {
+        appendLog(`Invalid register R${instruction.reg}; halting.`);
+        instructionPointer = null;
+        renderStatus('error');
+        stop();
+        return;
+      }
+
+      if (instruction.type === 'INC') {
+        registers[instruction.reg - 1] += 1;
+        appendLog(`Step ${stepCount}: INC R${instruction.reg} -> ${instruction.next}`);
+        instructionPointer = instruction.next;
+      } else if (instruction.type === 'DEC') {
+        const value = registers[instruction.reg - 1];
+        if (value > 0) {
+          registers[instruction.reg - 1] = value - 1;
+          appendLog(`Step ${stepCount}: DEC R${instruction.reg} (was ${value}) -> ${instruction.ifNonZero}`);
+          instructionPointer = instruction.ifNonZero;
+        } else {
+          appendLog(`Step ${stepCount}: DEC R${instruction.reg} (zero) -> ${instruction.ifZero}`);
+          instructionPointer = instruction.ifZero;
+        }
+      }
+
+      renderRegisters();
+      renderStatus('running');
+    }
+
+    function run() {
+      if (timer) return;
+      timer = setInterval(() => {
+        stepOnce();
+      }, 200);
+      runBtn.textContent = 'Stop';
+    }
+
+    function stop() {
+      if (timer) {
+        clearInterval(timer);
+        timer = null;
+      }
+      runBtn.textContent = 'Run';
+    }
+
+    presetSelect.addEventListener('change', () => {
+      if (presetSelect.value === 'custom') {
+        resetMachine();
+      } else {
+        loadPreset(presetSelect.value);
+      }
+    });
+
+    programInput.addEventListener('input', () => {
+      presetSelect.value = 'custom';
+    });
+
+    registersInput.addEventListener('change', () => {
+      resetMachine();
+    });
+
+    maxStepsInput.addEventListener('change', () => {
+      const value = Math.max(1, Math.min(5000, Number(maxStepsInput.value)));
+      maxStepsInput.value = value;
+    });
+
+    runBtn.addEventListener('click', () => {
+      if (timer) {
+        stop();
+      } else {
+        run();
+      }
+    });
+
+    stepBtn.addEventListener('click', () => {
+      stop();
+      stepOnce();
+    });
+
+    resetBtn.addEventListener('click', () => {
+      resetMachine();
+    });
+
+    // Initial render
+    programInput.value = PRESETS.transfer;
+    resetMachine();
+  </script>
 </body>
-
-</html>
\ No newline at end of file
+</html>
diff --git a/demos/chapter3/sequential-substitution-demo.html b/demos/chapter3/sequential-substitution-demo.html
index df5dd1bc6f980347f3d2fd49962a7f41d9724463..554708ec7a8f12589488024b555f5ab93845dce3 100644
--- a/demos/chapter3/sequential-substitution-demo.html
+++ b/demos/chapter3/sequential-substitution-demo.html
@@ -1,1136 +1,548 @@
 <!DOCTYPE html>
 <html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Sequential Substitution Systems Demo - NKS Explorer</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%);
-            color: #e0e0e0;
-            min-height: 100vh;
-            padding: 20px;
-        }
-
-        .container {
-            max-width: 1400px;
-            margin: 0 auto;
-        }
-
-        .header {
-            text-align: center;
-            margin-bottom: 30px;
-            padding: 20px;
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .header h1 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            font-size: 2.5em;
-            font-weight: 700;
-        }
-
-        .header p {
-            color: #b8b8b8;
-            font-size: 1.1em;
-            line-height: 1.6;
-        }
-
-        .controls {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
-            gap: 20px;
-            margin-bottom: 30px;
-        }
-
-        .control-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .control-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-            font-size: 1.2em;
-        }
-
-        .control-group {
-            margin-bottom: 15px;
-        }
-
-        label {
-            display: block;
-            color: #d0d0d0;
-            margin-bottom: 5px;
-            font-weight: 500;
-        }
-
-        select, input[type="range"], input[type="text"], button, textarea {
-            width: 100%;
-            padding: 10px;
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            background: rgba(0, 0, 0, 0.3);
-            color: #e0e0e0;
-            font-size: 14px;
-        }
-
-        textarea {
-            resize: vertical;
-            height: 80px;
-            font-family: 'Courier New', monospace;
-        }
-
-        button {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.2), rgba(255, 215, 0, 0.3));
-            cursor: pointer;
-            transition: all 0.3s ease;
-            margin: 5px 0;
-        }
-
-        button:hover {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.3), rgba(255, 215, 0, 0.4));
-            transform: translateY(-2px);
-            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.2);
-        }
-
-        .visualization-container {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            text-align: center;
-            margin-bottom: 20px;
-        }
-
-        .execution-display {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-bottom: 15px;
-            max-height: 400px;
-            overflow-y: auto;
-        }
-
-        .step-entry {
-            display: flex;
-            align-items: center;
-            margin: 8px 0;
-            font-family: 'Courier New', monospace;
-            font-size: 14px;
-            padding: 8px;
-            border-radius: 5px;
-            background: rgba(255, 255, 255, 0.02);
-            transition: background 0.3s ease;
-        }
-
-        .step-entry.current {
-            background: rgba(255, 215, 0, 0.1);
-            border-left: 3px solid #ffd700;
-        }
-
-        .step-number {
-            color: #ffd700;
-            font-weight: bold;
-            min-width: 50px;
-            margin-right: 15px;
-        }
-
-        .step-content {
-            flex: 1;
-            display: flex;
-            flex-direction: column;
-            gap: 5px;
-        }
-
-        .string-state {
-            word-break: break-all;
-            color: #e0e0e0;
-        }
-
-        .rule-applied {
-            color: #4ecdc4;
-            font-size: 12px;
-        }
-
-        .pattern-match {
-            color: #ff6b6b;
-            font-size: 12px;
-        }
-
-        .no-match {
-            color: #888;
-            font-style: italic;
-            font-size: 12px;
-        }
-
-        .symbol {
-            display: inline-block;
-            margin: 0 1px;
-            padding: 2px 4px;
-            border-radius: 3px;
-        }
-
-        .symbol-A { background: #ff6b6b; color: white; }
-        .symbol-B { background: #4ecdc4; color: white; }
-        .symbol-C { background: #45b7d1; color: white; }
-        .symbol-0 { background: #ffffff; color: black; }
-        .symbol-1 { background: #96ceb4; color: white; }
-        .symbol-2 { background: #ffd93d; color: black; }
-        .symbol-X { background: #ff8c94; color: white; }
-        .symbol-Y { background: #a8e6cf; color: black; }
-
-        .highlighted-match {
-            background: #ff6b6b !important;
-            color: white !important;
-            animation: pulse 0.5s ease-in-out;
-        }
-
-        @keyframes pulse {
-            0% { transform: scale(1); }
-            50% { transform: scale(1.2); }
-            100% { transform: scale(1); }
-        }
-
-        .rules-display {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-bottom: 15px;
-        }
-
-        .rules-display h4 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            text-align: center;
-        }
-
-        .rule-priority-list {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
-            gap: 10px;
-        }
-
-        .rule-item {
-            background: rgba(255, 215, 0, 0.1);
-            border-radius: 5px;
-            padding: 10px;
-            font-family: 'Courier New', monospace;
-            text-align: center;
-            position: relative;
-        }
-
-        .rule-item.active {
-            background: rgba(255, 215, 0, 0.2);
-            border: 2px solid #ffd700;
-        }
-
-        .rule-priority {
-            position: absolute;
-            top: -8px;
-            left: -8px;
-            background: #ffd700;
-            color: black;
-            border-radius: 50%;
-            width: 20px;
-            height: 20px;
-            display: flex;
-            align-items: center;
-            justify-content: center;
-            font-size: 12px;
-            font-weight: bold;
-        }
-
-        .rule-arrow {
-            color: #ffd700;
-            margin: 0 10px;
-        }
-
-        .causal-network {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-top: 15px;
-            max-height: 300px;
-            overflow: auto;
-        }
-
-        .causal-network h4 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            text-align: center;
-        }
-
-        .network-node {
-            display: inline-block;
-            background: rgba(255, 215, 0, 0.2);
-            border: 2px solid #ffd700;
-            border-radius: 50%;
-            width: 40px;
-            height: 40px;
-            display: flex;
-            align-items: center;
-            justify-content: center;
-            margin: 5px;
-            font-size: 12px;
-            font-weight: bold;
-        }
-
-        .network-edge {
-            display: inline-block;
-            color: #4ecdc4;
-            margin: 0 5px;
-        }
-
-        .comparison-panel {
-            display: grid;
-            grid-template-columns: 1fr 1fr;
-            gap: 20px;
-            margin-top: 20px;
-        }
-
-        .comparison-section {
-            background: rgba(255, 255, 255, 0.03);
-            border-radius: 10px;
-            padding: 15px;
-        }
-
-        .comparison-section h4 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            text-align: center;
-        }
-
-        .custom-rules-editor {
-            display: none;
-            background: rgba(0, 0, 0, 0.2);
-            border-radius: 10px;
-            padding: 15px;
-            margin-top: 15px;
-        }
-
-        .info-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .info-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-        }
-
-        .info-panel p {
-            color: #d0d0d0;
-            line-height: 1.6;
-            margin-bottom: 10px;
-        }
-
-        .stats {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
-            gap: 15px;
-            margin-top: 15px;
-        }
-
-        .stat-item {
-            text-align: center;
-            padding: 10px;
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 8px;
-        }
-
-        .stat-value {
-            font-size: 1.5em;
-            font-weight: bold;
-            color: #ffd700;
-        }
-
-        .stat-label {
-            font-size: 0.9em;
-            color: #b8b8b8;
-        }
-
-        @media (max-width: 768px) {
-            .controls {
-                grid-template-columns: 1fr;
-            }
-            
-            .header h1 {
-                font-size: 2em;
-            }
-            
-            .rule-priority-list {
-                grid-template-columns: 1fr;
-            }
-            
-            .comparison-panel {
-                grid-template-columns: 1fr;
-            }
-        }
-    </style>
+  <meta charset="utf-8" />
+  <meta name="viewport" content="width=device-width, initial-scale=1" />
+  <title>Sequential Substitution Systems</title>
+  <style>
+    :root {
+      color-scheme: light dark;
+      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
+    }
+
+    body {
+      margin: 0;
+      padding: 24px;
+      background: #f4f5f7;
+      color: #202124;
+    }
+
+    header {
+      max-width: 900px;
+      margin: 0 auto 24px auto;
+    }
+
+    h1 {
+      font-size: 1.9rem;
+      margin: 0 0 6px 0;
+      font-weight: 600;
+    }
+
+    header p {
+      margin: 4px 0 0 0;
+      max-width: 70ch;
+      line-height: 1.55;
+      color: #4a4f55;
+    }
+
+    main {
+      max-width: 1100px;
+      margin: 0 auto;
+      display: grid;
+      grid-template-columns: 340px 1fr;
+      gap: 20px;
+    }
+
+    @media (max-width: 980px) {
+      main {
+        grid-template-columns: 1fr;
+      }
+    }
+
+    .panel {
+      background: #fff;
+      border: 1px solid #d4d7dd;
+      border-radius: 8px;
+      padding: 16px;
+      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
+    }
+
+    .panel h2 {
+      margin: 0 0 12px 0;
+      font-size: 1.1rem;
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    .controls form {
+      display: grid;
+      gap: 12px;
+    }
+
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 6px;
+      font-size: 0.9rem;
+    }
+
+    select,
+    input[type="number"],
+    input[type="text"],
+    textarea {
+      padding: 6px 8px;
+      border-radius: 6px;
+      border: 1px solid #c3c7ce;
+      font-size: 0.95rem;
+      font-family: inherit;
+      background: #fff;
+      color: inherit;
+    }
+
+    textarea {
+      min-height: 120px;
+      resize: vertical;
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+    }
+
+    button {
+      padding: 7px 12px;
+      border-radius: 6px;
+      border: 1px solid #0b57d0;
+      background: #0b57d0;
+      color: #fff;
+      font-weight: 600;
+      cursor: pointer;
+      transition: background 0.2s ease;
+    }
+
+    button.secondary {
+      background: #fff;
+      color: #0b57d0;
+    }
+
+    button:disabled {
+      opacity: 0.55;
+      cursor: default;
+    }
+
+    .button-row {
+      display: flex;
+      flex-wrap: wrap;
+      gap: 8px;
+    }
+
+    .status {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
+      gap: 8px;
+      margin-top: 10px;
+      font-size: 0.9rem;
+      color: #3c4043;
+    }
+
+    .status dt {
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    .status dd {
+      margin: 0;
+    }
+
+    .rules-display {
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+      font-size: 0.85rem;
+      background: #f0f4ff;
+      border-radius: 6px;
+      padding: 8px;
+      border: 1px solid #d0daf5;
+      margin-top: 4px;
+    }
+
+    .output {
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+      font-size: 0.9rem;
+      line-height: 1.5;
+      border: 1px solid #d4d7dd;
+      border-radius: 8px;
+      background: #fafafa;
+      padding: 12px;
+      max-height: 520px;
+      overflow-y: auto;
+    }
+
+    .generation {
+      margin-bottom: 12px;
+    }
+
+    .generation strong {
+      color: #0b57d0;
+    }
+
+    mark {
+      background: #ffe082;
+      color: inherit;
+    }
+
+    .notice {
+      font-size: 0.85rem;
+      color: #5f6368;
+      line-height: 1.4;
+      margin-top: 12px;
+    }
+  </style>
 </head>
 <body>
-    <div class="container">
-        <div class="header">
-            <h1>Sequential Substitution Systems Demo</h1>
-            <p>Explore Wolfram's sequential substitution systems from "A New Kind of Science" (Pages 88-89)<br>
-               One-at-a-time string rewriting with causal network generation and multiway analysis</p>
+  <header>
+    <h1>Sequential Substitution Systems</h1>
+    <p>
+      Instead of rewriting every symbol in parallel, a sequential substitution
+      system scans the current string, finds the first match for any rule, and
+      replaces only that occurrence. The Chapter&nbsp;3 demo highlights how
+      this simple change leads to markedly different behaviour.
+    </p>
+  </header>
+
+  <main>
+    <section class="panel controls">
+      <h2>Configuration</h2>
+      <form>
+        <label>
+          Preset system
+          <select id="preset">
+            <option value="nks88">NKS p.88 (A→AB, BA→A)</option>
+            <option value="nks89">NKS p.89 (AB→B, BA→A)</option>
+            <option value="simple">Toggle (A↔B)</option>
+            <option value="complex">Complex growth (A→BC, B→A, C→AB)</option>
+            <option value="competing">Competing rules (AA→B, BB→A, AB→AA)</option>
+            <option value="cyclic">Cyclic (A→B→C→A)</option>
+            <option value="tag">Tag-system style (000→00101, 101→0)</option>
+            <option value="custom">Custom…</option>
+          </select>
+        </label>
+
+        <label>
+          Rules (ordered, e.g. <code>AB -> B</code>)
+          <textarea id="rulesInput"></textarea>
+        </label>
+
+        <label>
+          Initial string
+          <input type="text" id="seed" value="A" />
+        </label>
+
+        <label>
+          Scan order
+          <select id="scanOrder">
+            <option value="left">Left to right</option>
+            <option value="right">Right to left</option>
+            <option value="random">Random match</option>
+          </select>
+        </label>
+
+        <label>
+          Iterations
+          <input type="number" id="iterations" min="1" max="40" value="20" />
+        </label>
+
+        <div class="button-row">
+          <button type="button" id="runBtn">Run</button>
+          <button type="button" id="stepBtn" class="secondary">Step</button>
+          <button type="button" id="resetBtn" class="secondary">Reset</button>
         </div>
+      </form>
 
-        <div class="controls">
-            <div class="control-panel">
-                <h3>System Selection</h3>
-                <div class="control-group">
-                    <label for="systemPreset">Predefined Systems:</label>
-                    <select id="systemPreset">
-                        <option value="nks88">NKS Page 88 (A→AB, BA→A)</option>
-                        <option value="nks89">NKS Page 89 (AB→B, BA→A)</option>
-                        <option value="simple">Simple (A→B, B→A)</option>
-                        <option value="complex">Complex Growth (A→BC, B→A, C→AB)</option>
-                        <option value="competing">Competing (AA→B, BB→A, AB→AA)</option>
-                        <option value="cyclic">Cyclic (A→B, B→C, C→A)</option>
-                        <option value="tag">Tag System (000→00101, 101→0)</option>
-                        <option value="custom">Custom System</option>
-                    </select>
-                </div>
-                
-                <div class="custom-rules-editor" id="customRulesEditor">
-                    <label for="customRules">Custom Rules (priority order, format: AB→C):</label>
-                    <textarea id="customRules" placeholder="A→AB&#10;BA→A&#10;B→BB"></textarea>
-                    <button id="applyCustom">Apply Custom Rules</button>
-                </div>
-            </div>
-
-            <div class="control-panel">
-                <h3>Execution Control</h3>
-                <div class="control-group">
-                    <label for="speed">Animation Speed:</label>
-                    <input type="range" id="speed" min="200" max="3000" value="1000">
-                    <span id="speedValue">1000ms</span>
-                </div>
-                <div class="control-group">
-                    <label for="maxSteps">Max Steps:</label>
-                    <input type="range" id="maxSteps" min="10" max="100" value="30">
-                    <span id="maxStepsValue">30</span>
-                </div>
-                <div class="control-group">
-                    <label for="scanMode">Scanning Mode:</label>
-                    <select id="scanMode">
-                        <option value="leftright">Left to Right</option>
-                        <option value="rightleft">Right to Left</option>
-                        <option value="random">Random Position</option>
-                    </select>
-                </div>
-                <button id="startBtn">Start Evolution</button>
-                <button id="stopBtn">Stop Evolution</button>
-                <button id="stepBtn">Single Step</button>
-                <button id="resetBtn">Reset System</button>
-            </div>
-
-            <div class="control-panel">
-                <h3>Initial Configuration</h3>
-                <div class="control-group">
-                    <label for="initialString">Starting String:</label>
-                    <input type="text" id="initialString" value="AABBA" placeholder="e.g., AAB, 000101">
-                </div>
-                <div class="control-group">
-                    <label for="viewMode">Analysis Mode:</label>
-                    <select id="viewMode">
-                        <option value="sequential">Sequential Evolution</option>
-                        <option value="comparison">Sequential vs Parallel</option>
-                        <option value="causal">Causal Network</option>
-                        <option value="multiway">Multiway System</option>
-                    </select>
-                </div>
-            </div>
+      <dl class="status">
+        <div>
+          <dt>Step</dt>
+          <dd id="stepLabel">0</dd>
         </div>
-
-        <div class="visualization-container">
-            <h3 style="color: #ffd700; margin-bottom: 15px;">Sequential Substitution Evolution</h3>
-            
-            <div class="rules-display" id="rulesDisplay">
-                <h4>Rules (Applied in Priority Order)</h4>
-                <div class="rule-priority-list" id="rulePriorityList"></div>
-            </div>
-
-            <div class="execution-display" id="executionDisplay"></div>
-            
-            <div class="comparison-panel" id="comparisonPanel" style="display: none;">
-                <div class="comparison-section">
-                    <h4>Sequential Evolution</h4>
-                    <div id="sequentialResults"></div>
-                </div>
-                <div class="comparison-section">
-                    <h4>Parallel Evolution</h4>
-                    <div id="parallelResults"></div>
-                </div>
-            </div>
-
-            <div class="causal-network" id="causalNetwork" style="display: none;">
-                <h4>Causal Network</h4>
-                <div id="networkDisplay"></div>
-            </div>
+        <div>
+          <dt>Length</dt>
+          <dd id="lengthLabel">1</dd>
         </div>
-
-        <div class="info-panel">
-            <h3>About Sequential Substitution Systems</h3>
-            <p>
-                Sequential substitution systems, explored by Stephen Wolfram in "A New Kind of Science" (pages 88-89), 
-                differ from parallel systems by applying <strong>only one rule at a time</strong>. The system scans 
-                the string from left to right, applies the first matching rule found, and then repeats. This creates 
-                fundamentally different dynamics than parallel systems.
-            </p>
-            <p>
-                These systems generate <strong>causal networks</strong> where each substitution event becomes a node, 
-                connected to events that causally influence each other. This forms the foundation for Wolfram's work on 
-                <strong>multiway systems</strong> and his theory of fundamental physics, where the universe might operate 
-                as a giant sequential substitution system.
-            </p>
-
-            <div class="stats">
-                <div class="stat-item">
-                    <div class="stat-value" id="currentStep">0</div>
-                    <div class="stat-label">Current Step</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="stringLength">5</div>
-                    <div class="stat-label">String Length</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="rulesApplied">0</div>
-                    <div class="stat-label">Rules Applied</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="activeRule">None</div>
-                    <div class="stat-label">Last Rule Used</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="causalEvents">0</div>
-                    <div class="stat-label">Causal Events</div>
-                </div>
-            </div>
+        <div>
+          <dt>Applied rule</dt>
+          <dd id="ruleLabel">—</dd>
         </div>
-    </div>
-
-    <script>
-        class SequentialSubstitutionSystem {
-            constructor() {
-                this.rules = [];
-                this.initialString = "AABBA";
-                this.currentString = this.initialString;
-                this.executionHistory = [];
-                this.causalNetwork = [];
-                this.currentStep = 0;
-                this.isRunning = false;
-                this.animationId = null;
-                this.maxSteps = 30;
-                this.scanMode = "leftright";
-                this.viewMode = "sequential";
-                
-                this.initializeSystem();
-            }
-
-            initializeSystem() {
-                // Default NKS Page 88 system
-                this.rules = [
-                    { pattern: "A", replacement: "AB", priority: 1 },
-                    { pattern: "BA", replacement: "A", priority: 2 }
-                ];
-                
-                this.reset();
-                this.updateRulesDisplay();
-            }
-
-            setSystem(preset) {
-                switch (preset) {
-                    case 'nks88':
-                        this.rules = [
-                            { pattern: "A", replacement: "AB", priority: 1 },
-                            { pattern: "BA", replacement: "A", priority: 2 }
-                        ];
-                        this.initialString = "AABBA";
-                        break;
-                    case 'nks89':
-                        this.rules = [
-                            { pattern: "AB", replacement: "B", priority: 1 },
-                            { pattern: "BA", replacement: "A", priority: 2 }
-                        ];
-                        this.initialString = "ABBA";
-                        break;
-                    case 'simple':
-                        this.rules = [
-                            { pattern: "A", replacement: "B", priority: 1 },
-                            { pattern: "B", replacement: "A", priority: 2 }
-                        ];
-                        this.initialString = "ABAB";
-                        break;
-                    case 'complex':
-                        this.rules = [
-                            { pattern: "A", replacement: "BC", priority: 1 },
-                            { pattern: "B", replacement: "A", priority: 2 },
-                            { pattern: "C", replacement: "AB", priority: 3 }
-                        ];
-                        this.initialString = "ABC";
-                        break;
-                    case 'competing':
-                        this.rules = [
-                            { pattern: "AA", replacement: "B", priority: 1 },
-                            { pattern: "BB", replacement: "A", priority: 2 },
-                            { pattern: "AB", replacement: "AA", priority: 3 }
-                        ];
-                        this.initialString = "AABB";
-                        break;
-                    case 'cyclic':
-                        this.rules = [
-                            { pattern: "A", replacement: "B", priority: 1 },
-                            { pattern: "B", replacement: "C", priority: 2 },
-                            { pattern: "C", replacement: "A", priority: 3 }
-                        ];
-                        this.initialString = "ABC";
-                        break;
-                    case 'tag':
-                        this.rules = [
-                            { pattern: "000", replacement: "00101", priority: 1 },
-                            { pattern: "101", replacement: "0", priority: 2 }
-                        ];
-                        this.initialString = "000101";
-                        break;
-                }
-                
-                this.updateRulesDisplay();
-                this.reset();
-            }
-
-            setCustomRules(rulesText) {
-                const rules = [];
-                const lines = rulesText.split('\n');
-                
-                let priority = 1;
-                for (const line of lines) {
-                    const trimmed = line.trim();
-                    if (trimmed && trimmed.includes('→')) {
-                        const [left, right] = trimmed.split('→');
-                        if (left && right) {
-                            rules.push({
-                                pattern: left.trim(),
-                                replacement: right.trim(),
-                                priority: priority++
-                            });
-                        }
-                    }
-                }
-                
-                if (rules.length > 0) {
-                    this.rules = rules;
-                    this.updateRulesDisplay();
-                    this.reset();
-                    return true;
-                }
-                return false;
-            }
-
-            reset() {
-                this.stop();
-                this.currentString = this.initialString;
-                this.executionHistory = [{
-                    step: 0,
-                    string: this.currentString,
-                    ruleApplied: null,
-                    matchPosition: -1,
-                    matchLength: 0
-                }];
-                this.causalNetwork = [];
-                this.currentStep = 0;
-                this.updateDisplay();
-                this.updateStats();
-            }
-
-            findNextMatch() {
-                // Sort rules by priority
-                const sortedRules = [...this.rules].sort((a, b) => a.priority - b.priority);
-                
-                for (const rule of sortedRules) {
-                    let position;
-                    
-                    switch (this.scanMode) {
-                        case 'leftright':
-                            position = this.currentString.indexOf(rule.pattern);
-                            break;
-                        case 'rightleft':
-                            position = this.currentString.lastIndexOf(rule.pattern);
-                            break;
-                        case 'random':
-                            const matches = [];
-                            let pos = this.currentString.indexOf(rule.pattern);
-                            while (pos !== -1) {
-                                matches.push(pos);
-                                pos = this.currentString.indexOf(rule.pattern, pos + 1);
-                            }
-                            position = matches.length > 0 ? matches[Math.floor(Math.random() * matches.length)] : -1;
-                            break;
-                    }
-                    
-                    if (position !== -1) {
-                        return {
-                            rule: rule,
-                            position: position,
-                            matchLength: rule.pattern.length
-                        };
-                    }
-                }
-                
-                return null; // No matches found
-            }
-
-            step() {
-                if (this.currentStep >= this.maxSteps) {
-                    this.stop();
-                    return false;
-                }
-
-                const match = this.findNextMatch();
-                
-                if (!match) {
-                    // No more matches - system halts
-                    this.executionHistory.push({
-                        step: this.currentStep + 1,
-                        string: this.currentString,
-                        ruleApplied: null,
-                        matchPosition: -1,
-                        matchLength: 0,
-                        halted: true
-                    });
-                    this.stop();
-                    this.updateDisplay();
-                    return false;
-                }
-                
-                // Apply the substitution
-                const newString = 
-                    this.currentString.substring(0, match.position) +
-                    match.rule.replacement +
-                    this.currentString.substring(match.position + match.matchLength);
-                
-                this.currentStep++;
-                this.currentString = newString;
-                
-                // Record execution step
-                this.executionHistory.push({
-                    step: this.currentStep,
-                    string: this.currentString,
-                    ruleApplied: match.rule,
-                    matchPosition: match.position,
-                    matchLength: match.matchLength
-                });
-                
-                // Add to causal network
-                this.causalNetwork.push({
-                    event: this.currentStep,
-                    rule: match.rule.pattern + '→' + match.rule.replacement,
-                    position: match.position,
-                    causedBy: this.currentStep - 1
-                });
-                
-                this.updateDisplay();
-                this.updateStats();
-                
-                return true;
-            }
-
-            updateRulesDisplay() {
-                const rulePriorityList = document.getElementById('rulePriorityList');
-                rulePriorityList.innerHTML = '';
-                
-                // Sort by priority for display
-                const sortedRules = [...this.rules].sort((a, b) => a.priority - b.priority);
-                
-                sortedRules.forEach((rule, index) => {
-                    const ruleItem = document.createElement('div');
-                    ruleItem.className = 'rule-item';
-                    ruleItem.id = `rule-${rule.priority}`;
-                    
-                    const priority = document.createElement('div');
-                    priority.className = 'rule-priority';
-                    priority.textContent = rule.priority;
-                    
-                    const content = document.createElement('div');
-                    content.innerHTML = `
-                        ${this.formatString(rule.pattern)}
-                        <span class="rule-arrow">→</span>
-                        ${this.formatString(rule.replacement)}
-                    `;
-                    
-                    ruleItem.appendChild(priority);
-                    ruleItem.appendChild(content);
-                    rulePriorityList.appendChild(ruleItem);
-                });
-            }
-
-            formatString(str) {
-                return str.split('').map(char => 
-                    `<span class="symbol symbol-${char}">${char}</span>`
-                ).join('');
-            }
-
-            highlightPattern(str, position, length, highlight = false) {
-                let result = '';
-                for (let i = 0; i < str.length; i++) {
-                    const char = str[i];
-                    const className = highlight && i >= position && i < position + length ? 
-                        `symbol symbol-${char} highlighted-match` : 
-                        `symbol symbol-${char}`;
-                    result += `<span class="${className}">${char}</span>`;
-                }
-                return result;
-            }
-
-            updateDisplay() {
-                switch (this.viewMode) {
-                    case 'sequential':
-                        this.updateSequentialDisplay();
-                        break;
-                    case 'comparison':
-                        this.updateComparisonDisplay();
-                        break;
-                    case 'causal':
-                        this.updateCausalDisplay();
-                        break;
-                    case 'multiway':
-                        this.updateMultiwayDisplay();
-                        break;
-                }
-            }
-
-            updateSequentialDisplay() {
-                const executionDisplay = document.getElementById('executionDisplay');
-                const comparisonPanel = document.getElementById('comparisonPanel');
-                const causalNetwork = document.getElementById('causalNetwork');
-                
-                executionDisplay.style.display = 'block';
-                comparisonPanel.style.display = 'none';
-                causalNetwork.style.display = 'none';
-                
-                // Clear active rule highlighting
-                document.querySelectorAll('.rule-item').forEach(item => {
-                    item.classList.remove('active');
-                });
-                
-                executionDisplay.innerHTML = '';
-                
-                this.executionHistory.forEach((entry, index) => {
-                    const stepEntry = document.createElement('div');
-                    stepEntry.className = 'step-entry';
-                    if (index === this.executionHistory.length - 1) {
-                        stepEntry.classList.add('current');
-                    }
-                    
-                    const stepNumber = document.createElement('div');
-                    stepNumber.className = 'step-number';
-                    stepNumber.textContent = `${entry.step}:`;
-                    
-                    const stepContent = document.createElement('div');
-                    stepContent.className = 'step-content';
-                    
-                    const stringState = document.createElement('div');
-                    stringState.className = 'string-state';
-                    
-                    if (entry.ruleApplied) {
-                        // Highlight the matched pattern in the previous string
-                        const prevEntry = this.executionHistory[index - 1];
-                        if (prevEntry) {
-                            stringState.innerHTML = this.highlightPattern(
-                                prevEntry.string, 
-                                entry.matchPosition, 
-                                entry.matchLength, 
-                                true
-                            ) + ' → ' + this.formatString(entry.string);
-                        } else {
-                            stringState.innerHTML = this.formatString(entry.string);
-                        }
-                        
-                        const ruleApplied = document.createElement('div');
-                        ruleApplied.className = 'rule-applied';
-                        ruleApplied.textContent = `Applied: ${entry.ruleApplied.pattern} → ${entry.ruleApplied.replacement} at position ${entry.matchPosition}`;
-                        stepContent.appendChild(ruleApplied);
-                        
-                        // Highlight active rule
-                        const ruleElement = document.getElementById(`rule-${entry.ruleApplied.priority}`);
-                        if (ruleElement) {
-                            ruleElement.classList.add('active');
-                        }
-                    } else if (entry.halted) {
-                        stringState.innerHTML = this.formatString(entry.string);
-                        const noMatch = document.createElement('div');
-                        noMatch.className = 'no-match';
-                        noMatch.textContent = 'System halted - no matching patterns found';
-                        stepContent.appendChild(noMatch);
-                    } else {
-                        stringState.innerHTML = this.formatString(entry.string);
-                    }
-                    
-                    stepContent.appendChild(stringState);
-                    stepEntry.appendChild(stepNumber);
-                    stepEntry.appendChild(stepContent);
-                    executionDisplay.appendChild(stepEntry);
-                });
-                
-                executionDisplay.scrollTop = executionDisplay.scrollHeight;
-            }
-
-            updateComparisonDisplay() {
-                const executionDisplay = document.getElementById('executionDisplay');
-                const comparisonPanel = document.getElementById('comparisonPanel');
-                const causalNetwork = document.getElementById('causalNetwork');
-                
-                executionDisplay.style.display = 'none';
-                comparisonPanel.style.display = 'grid';
-                causalNetwork.style.display = 'none';
-                
-                // Update sequential results
-                const sequentialResults = document.getElementById('sequentialResults');
-                sequentialResults.innerHTML = '';
-                
-                this.executionHistory.forEach(entry => {
-                    const div = document.createElement('div');
-                    div.style.fontSize = '12px';
-                    div.style.margin = '3px 0';
-                    div.innerHTML = `${entry.step}: ${this.formatString(entry.string)}`;
-                    sequentialResults.appendChild(div);
-                });
-                
-                // Simulate parallel evolution for comparison
-                const parallelResults = document.getElementById('parallelResults');
-                parallelResults.innerHTML = '';
-                
-                const parallelEvolution = this.simulateParallelEvolution();
-                parallelEvolution.forEach((entry, index) => {
-                    const div = document.createElement('div');
-                    div.style.fontSize = '12px';
-                    div.style.margin = '3px 0';
-                    div.innerHTML = `${index}: ${this.formatString(entry)}`;
-                    parallelResults.appendChild(div);
-                });
-            }
-
-            simulateParallelEvolution() {
-                const results = [this.initialString];
-                let current = this.initialString;
-                
-                for (let i = 0; i < Math.min(this.maxSteps, 15); i++) {
-                    let newString = current;
-                    let changed = false;
-                    
-                    // Apply all rules simultaneously
-                    for (const rule of this.rules) {
-                        const regex = new RegExp(rule.pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
-                        if (regex.test(newString)) {
-                            newString = newString.replace(regex, rule.replacement);
-                            changed = true;
-                        }
-                    }
-                    
-                    if (!changed) break;
-                    
-                    current = newString;
-                    results.push(current);
-                }
-                
-                return results;
-            }
-
-            updateCausalDisplay() {
-                const executionDisplay = document.getElementById('executionDisplay');
-                const comparisonPanel = document.getElementById('comparisonPanel');
-                const causalNetwork = document.getElementById('causalNetwork');
-                
-                executionDisplay.style.display = 'none';
-                comparisonPanel.style.display = 'none';
-                causalNetwork.style.display = 'block';
-                
-                const networkDisplay = document.getElementById('networkDisplay');
-                networkDisplay.innerHTML = '';
-                
-                if (this.causalNetwork.length === 0) {
-                    networkDisplay.innerHTML = '<p style="text-align: center; color: #888;">No causal events yet. Run the system to generate the causal network.</p>';
-                    return;
-                }
-                
-                this.causalNetwork.forEach((event, index) => {
-                    const eventDiv = document.createElement('div');
-                    eventDiv.style.margin = '10px 0';
-                    eventDiv.style.display = 'flex';
-                    eventDiv.style.alignItems = 'center';
-                    eventDiv.style.flexWrap = 'wrap';
-                    eventDiv.style.justifyContent = 'center';
-                    
-                    const nodeDiv = document.createElement('div');
-                    nodeDiv.className = 'network-node';
-                    nodeDiv.textContent = event.event;
-                    nodeDiv.title = `Event ${event.event}: ${event.rule} at position ${event.position}`;
-                    
-                    eventDiv.appendChild(nodeDiv);
-                    
-                    if (index < this.causalNetwork.length - 1) {
-                        const edgeDiv = document.createElement('div');
-                        edgeDiv.className = 'network-edge';
-                        edgeDiv.textContent = '→';
-                        eventDiv.appendChild(edgeDiv);
-                    }
-                    
-                    const infoDiv = document.createElement('div');
-                    infoDiv.style.fontSize = '11px';
-                    infoDiv.style.color = '#aaa';
-                    infoDiv.style.marginLeft = '10px';
-                    infoDiv.textContent = `${event.rule} @ pos ${event.position}`;
-                    eventDiv.appendChild(infoDiv);
-                    
-                    networkDisplay.appendChild(eventDiv);
-                });
-            }
-
-            updateMultiwayDisplay() {
-                // Placeholder for multiway system visualization
-                this.updateCausalDisplay();
-            }
-
-            updateStats() {
-                const lastEntry = this.executionHistory[this.executionHistory.length - 1];
-                const activeRule = lastEntry && lastEntry.ruleApplied ? 
-                    `${lastEntry.ruleApplied.pattern}→${lastEntry.ruleApplied.replacement}` : 'None';
-                
-                document.getElementById('currentStep').textContent = this.currentStep;
-                document.getElementById('stringLength').textContent = this.currentString.length;
-                document.getElementById('rulesApplied').textContent = 
-                    this.executionHistory.filter(e => e.ruleApplied).length;
-                document.getElementById('activeRule').textContent = activeRule;
-                document.getElementById('causalEvents').textContent = this.causalNetwork.length;
-            }
-
-            start(speed = 1000) {
-                if (this.isRunning) return;
-                
-                this.isRunning = true;
-                const animate = () => {
-                    if (!this.isRunning) return;
-                    
-                    const canContinue = this.step();
-                    if (!canContinue) {
-                        this.isRunning = false;
-                        return;
-                    }
-                    
-                    this.animationId = setTimeout(animate, speed);
-                };
-                animate();
-            }
-
-            stop() {
-                this.isRunning = false;
-                if (this.animationId) {
-                    clearTimeout(this.animationId);
-                    this.animationId = null;
-                }
-            }
-
-            setViewMode(mode) {
-                this.viewMode = mode;
-                this.updateDisplay();
-            }
-
-            setMaxSteps(max) {
-                this.maxSteps = max;
-            }
-
-            setScanMode(mode) {
-                this.scanMode = mode;
-            }
-
-            setInitialString(str) {
-                this.initialString = str || "AABBA";
-                this.reset();
-            }
-        }
-
-        // Initialize the sequential substitution system
-        const sss = new SequentialSubstitutionSystem();
-
-        // Event listeners
-        document.getElementById('systemPreset').addEventListener('change', (e) => {
-            const preset = e.target.value;
-            const customEditor = document.getElementById('customRulesEditor');
-            
-            if (preset === 'custom') {
-                customEditor.style.display = 'block';
-            } else {
-                customEditor.style.display = 'none';
-                sss.setSystem(preset);
-            }
-        });
-
-        document.getElementById('applyCustom').addEventListener('click', () => {
-            const rulesText = document.getElementById('customRules').value;
-            if (!sss.setCustomRules(rulesText)) {
-                alert('Invalid rule format. Use format: AB→C (one rule per line)');
-            }
-        });
-
-        document.getElementById('speed').addEventListener('input', (e) => {
-            document.getElementById('speedValue').textContent = e.target.value + 'ms';
-        });
-
-        document.getElementById('maxSteps').addEventListener('input', (e) => {
-            const value = parseInt(e.target.value);
-            document.getElementById('maxStepsValue').textContent = value;
-            sss.setMaxSteps(value);
-        });
-
-        document.getElementById('scanMode').addEventListener('change', (e) => {
-            sss.setScanMode(e.target.value);
-        });
-
-        document.getElementById('viewMode').addEventListener('change', (e) => {
-            sss.setViewMode(e.target.value);
-        });
-
-        document.getElementById('initialString').addEventListener('change', (e) => {
-            sss.setInitialString(e.target.value);
-        });
-
-        document.getElementById('startBtn').addEventListener('click', () => {
-            const speed = parseInt(document.getElementById('speed').value);
-            sss.start(speed);
-        });
-
-        document.getElementById('stopBtn').addEventListener('click', () => {
-            sss.stop();
-        });
-
-        document.getElementById('stepBtn').addEventListener('click', () => {
-            sss.step();
-        });
-
-        document.getElementById('resetBtn').addEventListener('click', () => {
-            const initialStr = document.getElementById('initialString').value;
-            sss.setInitialString(initialStr);
-        });
-    </script>
+      </dl>
+
+      <div class="rules-display" id="rulesDisplay"></div>
+
+      <p class="notice">
+        When no rule matches the current string the system halts. Random scan
+        chooses uniformly among all available matches from the ordered rule
+        list.
+      </p>
+    </section>
+
+    <section class="panel">
+      <h2>Evolution</h2>
+      <div class="output" id="output"></div>
+    </section>
+  </main>
+
+  <script>
+    const PRESETS = {
+      nks88: {
+        rules: [
+          { pattern: 'A', replacement: 'AB' },
+          { pattern: 'BA', replacement: 'A' }
+        ],
+        seed: 'AABBA'
+      },
+      nks89: {
+        rules: [
+          { pattern: 'AB', replacement: 'B' },
+          { pattern: 'BA', replacement: 'A' }
+        ],
+        seed: 'ABBA'
+      },
+      simple: {
+        rules: [
+          { pattern: 'A', replacement: 'B' },
+          { pattern: 'B', replacement: 'A' }
+        ],
+        seed: 'ABAB'
+      },
+      complex: {
+        rules: [
+          { pattern: 'A', replacement: 'BC' },
+          { pattern: 'B', replacement: 'A' },
+          { pattern: 'C', replacement: 'AB' }
+        ],
+        seed: 'ABC'
+      },
+      competing: {
+        rules: [
+          { pattern: 'AA', replacement: 'B' },
+          { pattern: 'BB', replacement: 'A' },
+          { pattern: 'AB', replacement: 'AA' }
+        ],
+        seed: 'AABB'
+      },
+      cyclic: {
+        rules: [
+          { pattern: 'A', replacement: 'B' },
+          { pattern: 'B', replacement: 'C' },
+          { pattern: 'C', replacement: 'A' }
+        ],
+        seed: 'ABC'
+      },
+      tag: {
+        rules: [
+          { pattern: '000', replacement: '00101' },
+          { pattern: '101', replacement: '0' }
+        ],
+        seed: '000101'
+      }
+    };
+
+    const presetSelect = document.getElementById('preset');
+    const rulesInput = document.getElementById('rulesInput');
+    const seedInput = document.getElementById('seed');
+    const scanOrderSelect = document.getElementById('scanOrder');
+    const iterationsInput = document.getElementById('iterations');
+    const runBtn = document.getElementById('runBtn');
+    const stepBtn = document.getElementById('stepBtn');
+    const resetBtn = document.getElementById('resetBtn');
+    const stepLabel = document.getElementById('stepLabel');
+    const lengthLabel = document.getElementById('lengthLabel');
+    const ruleLabel = document.getElementById('ruleLabel');
+    const rulesDisplay = document.getElementById('rulesDisplay');
+    const output = document.getElementById('output');
+
+    let rules = [];
+    let history = [];
+    let timer = null;
+
+    function formatRules(list) {
+      if (!list.length) return 'No rules defined';
+      return list.map(r => `${r.pattern} → ${r.replacement}`).join('\n');
+    }
+
+    function parseRules(text) {
+      const parsed = [];
+      const lines = text.split(/\r?\n/);
+      for (const line of lines) {
+        const trimmed = line.trim();
+        if (!trimmed) continue;
+        const arrow = trimmed.includes('->') ? '->' : trimmed.includes('→') ? '→' : null;
+        if (!arrow) continue;
+        const [lhsRaw, rhsRaw] = trimmed.split(arrow);
+        if (!lhsRaw || rhsRaw === undefined) continue;
+        const lhs = lhsRaw.trim();
+        const rhs = rhsRaw.trim();
+        if (!lhs) continue;
+        parsed.push({ pattern: lhs, replacement: rhs });
+      }
+      return parsed;
+    }
+
+    function applyPreset(name) {
+      if (name === 'custom') {
+        return;
+      }
+      const preset = PRESETS[name];
+      rules = preset.rules.map(rule => ({ ...rule }));
+      rulesInput.value = formatRules(rules);
+      seedInput.value = preset.seed;
+      rebuild();
+    }
+
+    function rebuild() {
+      history = [{
+        string: seedInput.value,
+        applied: null,
+        index: -1,
+        length: 0
+      }];
+      renderStatus();
+      renderRules();
+      renderOutput();
+    }
+
+    function renderStatus() {
+      const current = history[history.length - 1];
+      stepLabel.textContent = history.length - 1;
+      lengthLabel.textContent = current.string.length;
+      ruleLabel.textContent = current.applied || '—';
+    }
+
+    function renderRules() {
+      rulesDisplay.textContent = formatRules(rules);
+    }
+
+    function highlight(string, index, length) {
+      if (index < 0) return string;
+      return (
+        string.slice(0, index) +
+        '<mark>' + string.slice(index, index + length) + '</mark>' +
+        string.slice(index + length)
+      );
+    }
+
+    function renderOutput() {
+      const fragments = history.map((entry, i) => {
+        const label = `<strong>n=${i}</strong>`;
+        const detail = entry.applied ? ` (${entry.applied} @ ${entry.index})` : '';
+        return `<div class="generation">${label} ${highlight(entry.string, entry.index, entry.length)}${detail}</div>`;
+      });
+      output.innerHTML = fragments.join('\n');
+      output.scrollTop = output.scrollHeight;
+    }
+
+    function findMatch(string) {
+      const order = scanOrderSelect.value;
+      for (let rIndex = 0; rIndex < rules.length; rIndex++) {
+        const { pattern } = rules[rIndex];
+        if (!pattern) continue;
+        if (order === 'left') {
+          const idx = string.indexOf(pattern);
+          if (idx !== -1) return { rule: rules[rIndex], index: idx };
+        } else if (order === 'right') {
+          const idx = string.lastIndexOf(pattern);
+          if (idx !== -1) return { rule: rules[rIndex], index: idx };
+        } else {
+          const positions = [];
+          let pos = string.indexOf(pattern);
+          while (pos !== -1) {
+            positions.push(pos);
+            pos = string.indexOf(pattern, pos + 1);
+          }
+          if (positions.length) {
+            const idx = positions[Math.floor(Math.random() * positions.length)];
+            return { rule: rules[rIndex], index: idx };
+          }
+        }
+      }
+      return null;
+    }
+
+    function stepOnce() {
+      const limit = Number(iterationsInput.value);
+      if (history.length - 1 >= limit) {
+        stop();
+        return;
+      }
+      const current = history[history.length - 1];
+      const match = findMatch(current.string);
+      if (!match) {
+        ruleLabel.textContent = 'halt (no match)';
+        stop();
+        return;
+      }
+      const { rule, index } = match;
+      const before = current.string.slice(0, index);
+      const after = current.string.slice(index + rule.pattern.length);
+      const nextString = before + rule.replacement + after;
+      history.push({
+        string: nextString,
+        applied: `${rule.pattern}→${rule.replacement}`,
+        index,
+        length: rule.replacement.length
+      });
+      renderStatus();
+      renderOutput();
+      if (history.length - 1 >= limit) {
+        stop();
+      }
+    }
+
+    function run() {
+      if (timer) return;
+      timer = setInterval(() => {
+        stepOnce();
+      }, 250);
+      runBtn.textContent = 'Stop';
+    }
+
+    function stop() {
+      if (timer) {
+        clearInterval(timer);
+        timer = null;
+      }
+      runBtn.textContent = 'Run';
+    }
+
+    presetSelect.addEventListener('change', () => {
+      if (presetSelect.value === 'custom') {
+        rules = parseRules(rulesInput.value);
+        rebuild();
+      } else {
+        applyPreset(presetSelect.value);
+      }
+    });
+
+    rulesInput.addEventListener('input', () => {
+      rules = parseRules(rulesInput.value);
+      renderRules();
+      rebuild();
+      presetSelect.value = 'custom';
+    });
+
+    seedInput.addEventListener('change', rebuild);
+
+    iterationsInput.addEventListener('change', () => {
+      const value = Math.max(1, Math.min(40, Number(iterationsInput.value)));
+      iterationsInput.value = value;
+    });
+
+    runBtn.addEventListener('click', () => {
+      if (timer) {
+        stop();
+      } else {
+        run();
+      }
+    });
+
+    stepBtn.addEventListener('click', () => {
+      stop();
+      stepOnce();
+    });
+
+    resetBtn.addEventListener('click', () => {
+      stop();
+      rebuild();
+    });
+
+    scanOrderSelect.addEventListener('change', () => {
+      rebuild();
+    });
+
+    // Initial render
+    applyPreset('nks88');
+  </script>
 </body>
-</html>
\ No newline at end of file
+</html>
diff --git a/demos/chapter3/substitution-system-demo.html b/demos/chapter3/substitution-system-demo.html
index 2bfd382c2635853eb3b166644aa162f7161f8431..ae7e55b5f663fa3c9a49385afe8610ab7858c414 100644
--- a/demos/chapter3/substitution-system-demo.html
+++ b/demos/chapter3/substitution-system-demo.html
@@ -1,837 +1,460 @@
 <!DOCTYPE html>
 <html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Substitution Systems Demo - NKS Explorer</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%);
-            color: #e0e0e0;
-            min-height: 100vh;
-            padding: 20px;
-        }
-
-        .container {
-            max-width: 1400px;
-            margin: 0 auto;
-        }
-
-        .header {
-            text-align: center;
-            margin-bottom: 30px;
-            padding: 20px;
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .header h1 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            font-size: 2.5em;
-            font-weight: 700;
-        }
-
-        .header p {
-            color: #b8b8b8;
-            font-size: 1.1em;
-            line-height: 1.6;
-        }
-
-        .controls {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
-            gap: 20px;
-            margin-bottom: 30px;
-        }
-
-        .control-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .control-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-            font-size: 1.2em;
-        }
-
-        .control-group {
-            margin-bottom: 15px;
-        }
-
-        label {
-            display: block;
-            color: #d0d0d0;
-            margin-bottom: 5px;
-            font-weight: 500;
-        }
-
-        select, input[type="range"], input[type="text"], button, textarea {
-            width: 100%;
-            padding: 10px;
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            background: rgba(0, 0, 0, 0.3);
-            color: #e0e0e0;
-            font-size: 14px;
-        }
-
-        textarea {
-            resize: vertical;
-            height: 60px;
-            font-family: 'Courier New', monospace;
-        }
-
-        button {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.2), rgba(255, 215, 0, 0.3));
-            cursor: pointer;
-            transition: all 0.3s ease;
-            margin: 5px 0;
-        }
-
-        button:hover {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.3), rgba(255, 215, 0, 0.4));
-            transform: translateY(-2px);
-            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.2);
-        }
-
-        .visualization-container {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            text-align: center;
-            margin-bottom: 20px;
-        }
-
-        .string-display {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-bottom: 15px;
-            max-height: 400px;
-            overflow-y: auto;
-        }
-
-        .generation {
-            display: flex;
-            align-items: center;
-            margin: 8px 0;
-            font-family: 'Courier New', monospace;
-            font-size: 14px;
-            padding: 5px;
-            border-radius: 5px;
-            background: rgba(255, 255, 255, 0.02);
-        }
-
-        .generation-number {
-            color: #ffd700;
-            font-weight: bold;
-            min-width: 40px;
-            margin-right: 10px;
-        }
-
-        .string-content {
-            flex: 1;
-            word-break: break-all;
-            color: #e0e0e0;
-        }
-
-        .symbol {
-            display: inline-block;
-            margin: 0 1px;
-            padding: 2px 4px;
-            border-radius: 3px;
-        }
-
-        .symbol-A { background: #ff6b6b; color: white; }
-        .symbol-B { background: #4ecdc4; color: white; }
-        .symbol-0 { background: #ffffff; color: black; }
-        .symbol-1 { background: #45b7d1; color: white; }
-        .symbol-X { background: #96ceb4; color: white; }
-        .symbol-Y { background: #ffd93d; color: black; }
-        .symbol-L { background: #ff8c94; color: white; }
-        .symbol-R { background: #a8e6cf; color: black; }
-
-        .rules-display {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-bottom: 15px;
-        }
-
-        .rules-display h4 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            text-align: center;
-        }
-
-        .rule-list {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
-            gap: 10px;
-        }
-
-        .rule-item {
-            background: rgba(255, 215, 0, 0.1);
-            border-radius: 5px;
-            padding: 8px;
-            font-family: 'Courier New', monospace;
-            text-align: center;
-        }
-
-        .rule-arrow {
-            color: #ffd700;
-            margin: 0 10px;
-        }
-
-        .tree-visualization {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-top: 15px;
-            max-height: 300px;
-            overflow: auto;
-        }
-
-        .tree-node {
-            margin: 2px 0;
-            font-family: 'Courier New', monospace;
-            font-size: 12px;
-        }
-
-        .custom-rules-editor {
-            display: none;
-            background: rgba(0, 0, 0, 0.2);
-            border-radius: 10px;
-            padding: 15px;
-            margin-top: 15px;
-        }
-
-        .info-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .info-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-        }
-
-        .info-panel p {
-            color: #d0d0d0;
-            line-height: 1.6;
-            margin-bottom: 10px;
-        }
-
-        .stats {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
-            gap: 15px;
-            margin-top: 15px;
-        }
-
-        .stat-item {
-            text-align: center;
-            padding: 10px;
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 8px;
-        }
-
-        .stat-value {
-            font-size: 1.5em;
-            font-weight: bold;
-            color: #ffd700;
-        }
-
-        .stat-label {
-            font-size: 0.9em;
-            color: #b8b8b8;
-        }
-
-        .growth-chart {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-top: 15px;
-            height: 200px;
-        }
-
-        @media (max-width: 768px) {
-            .controls {
-                grid-template-columns: 1fr;
-            }
-            
-            .header h1 {
-                font-size: 2em;
-            }
-            
-            .rule-list {
-                grid-template-columns: 1fr;
-            }
-        }
-    </style>
+  <meta charset="utf-8" />
+  <meta name="viewport" content="width=device-width, initial-scale=1" />
+  <title>Substitution Systems</title>
+  <style>
+    :root {
+      color-scheme: light dark;
+      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
+    }
+
+    body {
+      margin: 0;
+      padding: 24px;
+      background: #f5f5f7;
+      color: #202124;
+    }
+
+    header {
+      max-width: 900px;
+      margin: 0 auto 24px auto;
+    }
+
+    h1 {
+      font-size: 1.9rem;
+      margin: 0 0 6px 0;
+      font-weight: 600;
+    }
+
+    header p {
+      margin: 4px 0 0 0;
+      max-width: 70ch;
+      line-height: 1.55;
+      color: #4a4f55;
+    }
+
+    main {
+      max-width: 1080px;
+      margin: 0 auto;
+      display: grid;
+      grid-template-columns: 320px 1fr;
+      gap: 18px;
+    }
+
+    @media (max-width: 940px) {
+      main {
+        grid-template-columns: 1fr;
+      }
+    }
+
+    .panel {
+      background: #fff;
+      border: 1px solid #d4d7dd;
+      border-radius: 8px;
+      padding: 16px;
+      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
+    }
+
+    .panel h2 {
+      margin: 0 0 12px 0;
+      font-size: 1.1rem;
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    .controls form {
+      display: grid;
+      gap: 12px;
+    }
+
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 6px;
+      font-size: 0.9rem;
+    }
+
+    select,
+    input[type="number"],
+    input[type="text"],
+    textarea {
+      padding: 6px 8px;
+      border-radius: 6px;
+      border: 1px solid #c3c7ce;
+      font-size: 0.95rem;
+      font-family: inherit;
+      background: #fff;
+      color: inherit;
+    }
+
+    textarea {
+      min-height: 120px;
+      resize: vertical;
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+    }
+
+    button {
+      padding: 7px 12px;
+      border-radius: 6px;
+      border: 1px solid #0b57d0;
+      background: #0b57d0;
+      color: #fff;
+      font-weight: 600;
+      cursor: pointer;
+      transition: background 0.2s ease;
+    }
+
+    button.secondary {
+      background: #fff;
+      color: #0b57d0;
+    }
+
+    button:disabled {
+      opacity: 0.55;
+      cursor: default;
+    }
+
+    .button-row {
+      display: flex;
+      flex-wrap: wrap;
+      gap: 8px;
+    }
+
+    .status {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
+      gap: 8px;
+      margin-top: 10px;
+      font-size: 0.9rem;
+      color: #3c4043;
+    }
+
+    .status dt {
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    .status dd {
+      margin: 0;
+    }
+
+    .rules-display {
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+      font-size: 0.85rem;
+      background: #f0f4ff;
+      border-radius: 6px;
+      padding: 8px;
+      border: 1px solid #d0daf5;
+      margin-top: 4px;
+    }
+
+    .output {
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+      font-size: 0.9rem;
+      line-height: 1.5;
+      white-space: pre-wrap;
+      border: 1px solid #d4d7dd;
+      border-radius: 8px;
+      padding: 12px;
+      background: #fafafa;
+      max-height: 520px;
+      overflow-y: auto;
+    }
+
+    .generation {
+      margin-bottom: 12px;
+    }
+
+    .generation strong {
+      color: #0b57d0;
+    }
+
+    .notice {
+      font-size: 0.85rem;
+      color: #5f6368;
+      line-height: 1.4;
+      margin-top: 12px;
+    }
+  </style>
 </head>
 <body>
-    <div class="container">
-        <div class="header">
-            <h1>Substitution Systems Demo</h1>
-            <p>Explore Wolfram's substitution systems from "A New Kind of Science"<br>
-               String rewriting systems that generate complex patterns through simple rules</p>
+  <header>
+    <h1>Substitution Systems</h1>
+    <p>
+      Parallel substitution replaces every symbol in a string simultaneously.
+      The demonstrations on page&nbsp;82 of <em>A New Kind of Science</em>
+      explore how repeated substitutions generate nested, random, or geometric
+      structure. Select a preset or define custom replacement rules to see the
+      evolution.
+    </p>
+  </header>
+
+  <main>
+    <section class="panel controls">
+      <h2>Configuration</h2>
+      <form>
+        <label>
+          Preset system
+          <select id="preset">
+            <option value="fibonacci">Fibonacci (A→AB, B→A)</option>
+            <option value="binary">Binary growth (0→01, 1→10)</option>
+            <option value="thue">Thue–Morse (0→01, 1→10)</option>
+            <option value="cantor">Cantor set (A→ABA, B→BBB)</option>
+            <option value="dragon">Dragon curve (X→X+YF+, Y→-FX-Y)</option>
+            <option value="koch">Koch snowflake (F→F-F++F-F)</option>
+            <option value="sierpinski">Sierpinski triangle (A→B-A-B, B→A+B+A)</option>
+            <option value="lsystem">Plant L-system (X→F-[[X]+X]+F[+FX]-X)</option>
+            <option value="custom">Custom…</option>
+          </select>
+        </label>
+
+        <label>
+          Rules (one per line, e.g. <code>A -> AB</code>)
+          <textarea id="rulesInput"></textarea>
+        </label>
+
+        <label>
+          Initial string
+          <input type="text" id="seed" value="A" />
+        </label>
+
+        <label>
+          Iterations
+          <input type="number" id="iterations" min="1" max="15" value="8" />
+        </label>
+
+        <div class="button-row">
+          <button type="button" id="runBtn">Run</button>
+          <button type="button" id="stepBtn" class="secondary">Step</button>
+          <button type="button" id="resetBtn" class="secondary">Reset</button>
         </div>
+      </form>
 
-        <div class="controls">
-            <div class="control-panel">
-                <h3>System Selection</h3>
-                <div class="control-group">
-                    <label for="systemPreset">Predefined Systems:</label>
-                    <select id="systemPreset">
-                        <option value="fibonacci">Fibonacci System (A→AB, B→A)</option>
-                        <option value="binary">Binary Growth (0→01, 1→10)</option>
-                        <option value="thue">Thue-Morse (0→01, 1→10)</option>
-                        <option value="cantor">Cantor Set (A→ABA, B→BBB)</option>
-                        <option value="dragon">Dragon Curve (X→X+YF+, Y→-FX-Y)</option>
-                        <option value="koch">Koch Snowflake (F→F-F++F-F)</option>
-                        <option value="sierpinski">Sierpinski (A→B-A-B, B→A+B+A)</option>
-                        <option value="lsystem">L-System Plant (X→F-[[X]+X]+F[+FX]-X)</option>
-                        <option value="custom">Custom System</option>
-                    </select>
-                </div>
-                
-                <div class="custom-rules-editor" id="customRulesEditor">
-                    <label for="customRules">Custom Rules (one per line, format: A→BC):</label>
-                    <textarea id="customRules" placeholder="A→AB&#10;B→A"></textarea>
-                    <button id="applyCustom">Apply Custom Rules</button>
-                </div>
-            </div>
-
-            <div class="control-panel">
-                <h3>Evolution Control</h3>
-                <div class="control-group">
-                    <label for="speed">Animation Speed:</label>
-                    <input type="range" id="speed" min="100" max="2000" value="800">
-                    <span id="speedValue">800ms</span>
-                </div>
-                <div class="control-group">
-                    <label for="maxGenerations">Max Generations:</label>
-                    <input type="range" id="maxGenerations" min="5" max="20" value="12">
-                    <span id="maxGenValue">12</span>
-                </div>
-                <button id="startBtn">Start Evolution</button>
-                <button id="stopBtn">Stop Evolution</button>
-                <button id="stepBtn">Single Step</button>
-                <button id="resetBtn">Reset System</button>
-            </div>
-
-            <div class="control-panel">
-                <h3>Initial Configuration</h3>
-                <div class="control-group">
-                    <label for="initialString">Starting String:</label>
-                    <input type="text" id="initialString" value="A" placeholder="e.g., A, 0, AB">
-                </div>
-                <div class="control-group">
-                    <label for="viewMode">Visualization Mode:</label>
-                    <select id="viewMode">
-                        <option value="string">String Sequence</option>
-                        <option value="tree">Tree Structure</option>
-                        <option value="growth">Growth Chart</option>
-                    </select>
-                </div>
-            </div>
+      <dl class="status">
+        <div>
+          <dt>Generation</dt>
+          <dd id="generationLabel">0</dd>
         </div>
-
-        <div class="visualization-container">
-            <h3 style="color: #ffd700; margin-bottom: 15px;">Substitution System Evolution</h3>
-            
-            <div class="rules-display" id="rulesDisplay">
-                <h4>Current Rules</h4>
-                <div class="rule-list" id="ruleList"></div>
-            </div>
-
-            <div class="string-display" id="stringDisplay"></div>
-            
-            <div class="tree-visualization" id="treeVisualization" style="display: none;"></div>
-            
-            <canvas id="growthChart" width="800" height="200" style="display: none; max-width: 100%;"></canvas>
+        <div>
+          <dt>Length</dt>
+          <dd id="lengthLabel">1</dd>
         </div>
-
-        <div class="info-panel">
-            <h3>About Substitution Systems</h3>
-            <p>
-                Substitution systems, extensively studied by Stephen Wolfram in "A New Kind of Science," are 
-                computational systems that operate by repeatedly applying <strong>string rewriting rules</strong>. 
-                Starting from an initial string (axiom), each symbol is simultaneously replaced according to 
-                predefined rules, generating increasingly complex patterns.
-            </p>
-            <p>
-                These systems are closely related to <strong>L-systems</strong> (Lindenmayer systems) and demonstrate 
-                how simple rules can generate <strong>fractal patterns</strong>, biological growth models, and 
-                complex mathematical sequences like the Fibonacci sequence. Wolfram showed that even 
-                <strong>neighbor-independent</strong> substitution rules can produce sophisticated emergent behaviors.
-            </p>
-
-            <div class="stats">
-                <div class="stat-item">
-                    <div class="stat-value" id="currentGeneration">0</div>
-                    <div class="stat-label">Generation</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="stringLength">1</div>
-                    <div class="stat-label">String Length</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="growthRate">1.0</div>
-                    <div class="stat-label">Growth Rate</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="uniqueSymbols">1</div>
-                    <div class="stat-label">Unique Symbols</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="totalSymbols">1</div>
-                    <div class="stat-label">Total Symbols</div>
-                </div>
-            </div>
+        <div>
+          <dt>Alphabet</dt>
+          <dd id="alphabetLabel">{A}</dd>
         </div>
-    </div>
-
-    <script>
-        class SubstitutionSystem {
-            constructor() {
-                this.rules = {};
-                this.initialString = "A";
-                this.generations = [];
-                this.currentGeneration = 0;
-                this.isRunning = false;
-                this.animationId = null;
-                this.maxGenerations = 12;
-                this.viewMode = "string";
-                
-                this.initializeSystem();
-            }
-
-            initializeSystem() {
-                // Default Fibonacci system (NKS page 82)
-                this.rules = {
-                    "A": "AB",
-                    "B": "A"
-                };
-                
-                this.reset();
-                this.updateRulesDisplay();
-            }
-
-            setSystem(preset) {
-                switch (preset) {
-                    case 'fibonacci':
-                        this.rules = { "A": "AB", "B": "A" };
-                        this.initialString = "A";
-                        break;
-                    case 'binary':
-                        this.rules = { "0": "01", "1": "10" };
-                        this.initialString = "0";
-                        break;
-                    case 'thue':
-                        this.rules = { "0": "01", "1": "10" };
-                        this.initialString = "0";
-                        break;
-                    case 'cantor':
-                        this.rules = { "A": "ABA", "B": "BBB" };
-                        this.initialString = "A";
-                        break;
-                    case 'dragon':
-                        this.rules = { "X": "X+YF+", "Y": "-FX-Y", "F": "F", "+": "+", "-": "-" };
-                        this.initialString = "FX";
-                        break;
-                    case 'koch':
-                        this.rules = { "F": "F-F++F-F", "-": "-", "+": "+" };
-                        this.initialString = "F";
-                        break;
-                    case 'sierpinski':
-                        this.rules = { "A": "B-A-B", "B": "A+B+A", "-": "-", "+": "+" };
-                        this.initialString = "A";
-                        break;
-                    case 'lsystem':
-                        this.rules = { 
-                            "X": "F-[[X]+X]+F[+FX]-X",
-                            "F": "FF",
-                            "+": "+", "-": "-", "[": "[", "]": "]"
-                        };
-                        this.initialString = "X";
-                        break;
-                }
-                
-                this.updateRulesDisplay();
-                this.reset();
-            }
-
-            setCustomRules(rulesText) {
-                const rules = {};
-                const lines = rulesText.split('\n');
-                
-                for (const line of lines) {
-                    const trimmed = line.trim();
-                    if (trimmed && trimmed.includes('→')) {
-                        const [left, right] = trimmed.split('→');
-                        if (left && right) {
-                            rules[left.trim()] = right.trim();
-                        }
-                    }
-                }
-                
-                if (Object.keys(rules).length > 0) {
-                    this.rules = rules;
-                    this.updateRulesDisplay();
-                    this.reset();
-                    return true;
-                }
-                return false;
-            }
-
-            reset() {
-                this.stop();
-                this.generations = [this.initialString];
-                this.currentGeneration = 0;
-                this.updateDisplay();
-                this.updateStats();
-            }
-
-            step() {
-                if (this.currentGeneration >= this.maxGenerations - 1) {
-                    this.stop();
-                    return false;
-                }
-
-                const currentString = this.generations[this.currentGeneration];
-                let newString = "";
-                
-                // Apply substitution rules
-                for (const char of currentString) {
-                    if (this.rules[char]) {
-                        newString += this.rules[char];
-                    } else {
-                        newString += char; // No rule, keep original
-                    }
-                }
-                
-                this.currentGeneration++;
-                this.generations[this.currentGeneration] = newString;
-                
-                this.updateDisplay();
-                this.updateStats();
-                
-                return true;
-            }
-
-            updateRulesDisplay() {
-                const ruleList = document.getElementById('ruleList');
-                ruleList.innerHTML = '';
-                
-                Object.entries(this.rules).forEach(([key, value]) => {
-                    const ruleItem = document.createElement('div');
-                    ruleItem.className = 'rule-item';
-                    ruleItem.innerHTML = `
-                        <span class="symbol symbol-${key}">${key}</span>
-                        <span class="rule-arrow">→</span>
-                        ${this.formatString(value, true)}
-                    `;
-                    ruleList.appendChild(ruleItem);
-                });
-            }
-
-            formatString(str, isRule = false) {
-                return str.split('').map(char => 
-                    `<span class="symbol symbol-${char}">${char}</span>`
-                ).join('');
-            }
-
-            updateDisplay() {
-                switch (this.viewMode) {
-                    case 'string':
-                        this.updateStringDisplay();
-                        break;
-                    case 'tree':
-                        this.updateTreeDisplay();
-                        break;
-                    case 'growth':
-                        this.updateGrowthChart();
-                        break;
-                }
-            }
-
-            updateStringDisplay() {
-                const stringDisplay = document.getElementById('stringDisplay');
-                const treeVisualization = document.getElementById('treeVisualization');
-                const growthChart = document.getElementById('growthChart');
-                
-                stringDisplay.style.display = 'block';
-                treeVisualization.style.display = 'none';
-                growthChart.style.display = 'none';
-                
-                stringDisplay.innerHTML = '';
-                
-                for (let i = 0; i <= this.currentGeneration; i++) {
-                    const generation = document.createElement('div');
-                    generation.className = 'generation';
-                    
-                    const genNumber = document.createElement('div');
-                    genNumber.className = 'generation-number';
-                    genNumber.textContent = i + ':';
-                    
-                    const stringContent = document.createElement('div');
-                    stringContent.className = 'string-content';
-                    
-                    const str = this.generations[i];
-                    if (str.length > 200) {
-                        stringContent.innerHTML = this.formatString(str.substring(0, 200)) + 
-                            `<span style="color: #888;"> ... (${str.length - 200} more characters)</span>`;
-                    } else {
-                        stringContent.innerHTML = this.formatString(str);
-                    }
-                    
-                    generation.appendChild(genNumber);
-                    generation.appendChild(stringContent);
-                    stringDisplay.appendChild(generation);
-                }
-                
-                stringDisplay.scrollTop = stringDisplay.scrollHeight;
-            }
-
-            updateTreeDisplay() {
-                const stringDisplay = document.getElementById('stringDisplay');
-                const treeVisualization = document.getElementById('treeVisualization');
-                const growthChart = document.getElementById('growthChart');
-                
-                stringDisplay.style.display = 'none';
-                treeVisualization.style.display = 'block';
-                growthChart.style.display = 'none';
-                
-                treeVisualization.innerHTML = '';
-                
-                for (let i = 0; i <= this.currentGeneration; i++) {
-                    const treeNode = document.createElement('div');
-                    treeNode.className = 'tree-node';
-                    treeNode.style.paddingLeft = (i * 20) + 'px';
-                    treeNode.style.color = `hsl(${(i * 30) % 360}, 70%, 70%)`;
-                    
-                    const str = this.generations[i];
-                    const prefix = '│ '.repeat(i) + '├─ ';
-                    
-                    if (str.length > 100) {
-                        treeNode.textContent = prefix + str.substring(0, 100) + `... (${str.length} total)`;
-                    } else {
-                        treeNode.textContent = prefix + str;
-                    }
-                    
-                    treeVisualization.appendChild(treeNode);
-                }
-                
-                treeVisualization.scrollTop = treeVisualization.scrollHeight;
-            }
-
-            updateGrowthChart() {
-                const stringDisplay = document.getElementById('stringDisplay');
-                const treeVisualization = document.getElementById('treeVisualization');
-                const growthChart = document.getElementById('growthChart');
-                
-                stringDisplay.style.display = 'none';
-                treeVisualization.style.display = 'none';
-                growthChart.style.display = 'block';
-                
-                const canvas = growthChart;
-                const ctx = canvas.getContext('2d');
-                
-                ctx.fillStyle = '#000000';
-                ctx.fillRect(0, 0, canvas.width, canvas.height);
-                
-                if (this.generations.length < 2) return;
-                
-                const lengths = this.generations.slice(0, this.currentGeneration + 1).map(str => str.length);
-                const maxLength = Math.max(...lengths);
-                const maxGen = lengths.length - 1;
-                
-                // Draw grid
-                ctx.strokeStyle = '#333333';
-                ctx.lineWidth = 1;
-                for (let i = 0; i <= 10; i++) {
-                    const y = (canvas.height * i) / 10;
-                    ctx.beginPath();
-                    ctx.moveTo(0, y);
-                    ctx.lineTo(canvas.width, y);
-                    ctx.stroke();
-                }
-                
-                for (let i = 0; i <= maxGen; i++) {
-                    const x = (canvas.width * i) / maxGen;
-                    ctx.beginPath();
-                    ctx.moveTo(x, 0);
-                    ctx.lineTo(x, canvas.height);
-                    ctx.stroke();
-                }
-                
-                // Draw growth curve
-                ctx.strokeStyle = '#ffd700';
-                ctx.lineWidth = 2;
-                ctx.beginPath();
-                
-                for (let i = 0; i < lengths.length; i++) {
-                    const x = (canvas.width * i) / maxGen;
-                    const y = canvas.height - (canvas.height * lengths[i]) / maxLength;
-                    
-                    if (i === 0) {
-                        ctx.moveTo(x, y);
-                    } else {
-                        ctx.lineTo(x, y);
-                    }
-                    
-                    // Draw points
-                    ctx.fillStyle = '#ff6b6b';
-                    ctx.fillRect(x - 2, y - 2, 4, 4);
-                }
-                
-                ctx.stroke();
-                
-                // Draw labels
-                ctx.fillStyle = '#e0e0e0';
-                ctx.font = '12px monospace';
-                ctx.fillText(`Max Length: ${maxLength}`, 10, 20);
-                ctx.fillText(`Generation: ${this.currentGeneration}`, 10, 35);
-            }
-
-            updateStats() {
-                const currentString = this.generations[this.currentGeneration] || "";
-                const uniqueSymbols = new Set(currentString).size;
-                
-                let growthRate = 1.0;
-                if (this.currentGeneration > 0) {
-                    const prevLength = this.generations[this.currentGeneration - 1].length;
-                    const currLength = currentString.length;
-                    growthRate = prevLength > 0 ? (currLength / prevLength) : 1.0;
-                }
-                
-                document.getElementById('currentGeneration').textContent = this.currentGeneration;
-                document.getElementById('stringLength').textContent = currentString.length;
-                document.getElementById('growthRate').textContent = growthRate.toFixed(2);
-                document.getElementById('uniqueSymbols').textContent = uniqueSymbols;
-                document.getElementById('totalSymbols').textContent = currentString.length;
-            }
-
-            start(speed = 800) {
-                if (this.isRunning) return;
-                
-                this.isRunning = true;
-                const animate = () => {
-                    if (!this.isRunning) return;
-                    
-                    const canContinue = this.step();
-                    if (!canContinue) {
-                        this.isRunning = false;
-                        return;
-                    }
-                    
-                    this.animationId = setTimeout(animate, speed);
-                };
-                animate();
-            }
-
-            stop() {
-                this.isRunning = false;
-                if (this.animationId) {
-                    clearTimeout(this.animationId);
-                    this.animationId = null;
-                }
-            }
-
-            setViewMode(mode) {
-                this.viewMode = mode;
-                this.updateDisplay();
-            }
-
-            setMaxGenerations(max) {
-                this.maxGenerations = max;
-            }
-
-            setInitialString(str) {
-                this.initialString = str || "A";
-                this.reset();
-            }
-        }
-
-        // Initialize the substitution system
-        const ss = new SubstitutionSystem();
-
-        // Event listeners
-        document.getElementById('systemPreset').addEventListener('change', (e) => {
-            const preset = e.target.value;
-            const customEditor = document.getElementById('customRulesEditor');
-            
-            if (preset === 'custom') {
-                customEditor.style.display = 'block';
-            } else {
-                customEditor.style.display = 'none';
-                ss.setSystem(preset);
-            }
-        });
-
-        document.getElementById('applyCustom').addEventListener('click', () => {
-            const rulesText = document.getElementById('customRules').value;
-            if (!ss.setCustomRules(rulesText)) {
-                alert('Invalid rule format. Use format: A→BC (one rule per line)');
-            }
-        });
-
-        document.getElementById('speed').addEventListener('input', (e) => {
-            document.getElementById('speedValue').textContent = e.target.value + 'ms';
-        });
-
-        document.getElementById('maxGenerations').addEventListener('input', (e) => {
-            const value = parseInt(e.target.value);
-            document.getElementById('maxGenValue').textContent = value;
-            ss.setMaxGenerations(value);
-        });
-
-        document.getElementById('viewMode').addEventListener('change', (e) => {
-            ss.setViewMode(e.target.value);
-        });
-
-        document.getElementById('initialString').addEventListener('change', (e) => {
-            ss.setInitialString(e.target.value);
-        });
-
-        document.getElementById('startBtn').addEventListener('click', () => {
-            const speed = parseInt(document.getElementById('speed').value);
-            ss.start(speed);
-        });
-
-        document.getElementById('stopBtn').addEventListener('click', () => {
-            ss.stop();
-        });
-
-        document.getElementById('stepBtn').addEventListener('click', () => {
-            ss.step();
-        });
-
-        document.getElementById('resetBtn').addEventListener('click', () => {
-            const initialStr = document.getElementById('initialString').value;
-            ss.setInitialString(initialStr);
-        });
-    </script>
+      </dl>
+
+      <div class="rules-display" id="rulesDisplay"></div>
+
+      <p class="notice">
+        In a parallel substitution system every symbol is replaced at once. The
+        output area lists each generation from top to bottom.
+      </p>
+    </section>
+
+    <section class="panel">
+      <h2>Evolution</h2>
+      <div class="output" id="output"></div>
+    </section>
+  </main>
+
+  <script>
+    const PRESETS = {
+      fibonacci: {
+        rules: { A: 'AB', B: 'A' },
+        seed: 'A'
+      },
+      binary: {
+        rules: { '0': '01', '1': '10' },
+        seed: '0'
+      },
+      thue: {
+        rules: { '0': '01', '1': '10' },
+        seed: '0'
+      },
+      cantor: {
+        rules: { A: 'ABA', B: 'BBB' },
+        seed: 'A'
+      },
+      dragon: {
+        rules: { X: 'X+YF+', Y: '-FX-Y', F: 'F', '+': '+', '-': '-' },
+        seed: 'FX'
+      },
+      koch: {
+        rules: { F: 'F-F++F-F', '+': '+', '-': '-' },
+        seed: 'F'
+      },
+      sierpinski: {
+        rules: { A: 'B-A-B', B: 'A+B+A', '+': '+', '-': '-' },
+        seed: 'A'
+      },
+      lsystem: {
+        rules: { X: 'F-[[X]+X]+F[+FX]-X', F: 'FF', '+': '+', '-': '-', '[': '[', ']': ']' },
+        seed: 'X'
+      }
+    };
+
+    const presetSelect = document.getElementById('preset');
+    const rulesInput = document.getElementById('rulesInput');
+    const seedInput = document.getElementById('seed');
+    const iterationsInput = document.getElementById('iterations');
+    const runBtn = document.getElementById('runBtn');
+    const stepBtn = document.getElementById('stepBtn');
+    const resetBtn = document.getElementById('resetBtn');
+    const generationLabel = document.getElementById('generationLabel');
+    const lengthLabel = document.getElementById('lengthLabel');
+    const alphabetLabel = document.getElementById('alphabetLabel');
+    const rulesDisplay = document.getElementById('rulesDisplay');
+    const output = document.getElementById('output');
+
+    let rules = {};
+    let history = [];
+    let timer = null;
+
+    function formatRules(rulesObj) {
+      return Object.entries(rulesObj)
+        .map(([lhs, rhs]) => `${lhs} → ${rhs}`)
+        .join('\n');
+    }
+
+    function parseRules(text) {
+      const map = {};
+      const lines = text.split(/\r?\n/);
+      for (const line of lines) {
+        const trimmed = line.trim();
+        if (!trimmed) continue;
+        const arrow = trimmed.includes('->') ? '->' : trimmed.includes('→') ? '→' : null;
+        if (!arrow) continue;
+        const [lhsRaw, rhsRaw] = trimmed.split(arrow);
+        if (!lhsRaw || rhsRaw === undefined) continue;
+        const lhs = lhsRaw.trim();
+        const rhs = rhsRaw.trim();
+        if (lhs.length === 0) continue;
+        map[lhs] = rhs;
+      }
+      return map;
+    }
+
+    function applyPreset(name) {
+      if (name === 'custom') {
+        return;
+      }
+      const preset = PRESETS[name];
+      rules = { ...preset.rules };
+      rulesInput.value = formatRules(rules);
+      seedInput.value = preset.seed;
+      rebuild();
+    }
+
+    function rebuild() {
+      history = [seedInput.value];
+      generationLabel.textContent = 0;
+      lengthLabel.textContent = seedInput.value.length;
+      alphabetLabel.textContent = `{${Array.from(new Set(seedInput.value.split(''))).join(', ')}}`;
+      renderRules();
+      renderOutput();
+    }
+
+    function renderRules() {
+      rulesDisplay.textContent = formatRules(rules) || 'No rules defined';
+    }
+
+    function renderOutput() {
+      const fragments = history.map((value, index) => {
+        return `<div class="generation"><strong>n=${index}</strong> ${value || '∅'}</div>`;
+      });
+      output.innerHTML = fragments.join('\n');
+      output.scrollTop = output.scrollHeight;
+    }
+
+    function deriveNext(current) {
+      return current
+        .split('')
+        .map(symbol => (symbol in rules ? rules[symbol] : symbol))
+        .join('');
+    }
+
+    function stepOnce() {
+      const maxGenerations = Number(iterationsInput.value);
+      if (history.length > maxGenerations) {
+        stop();
+        return;
+      }
+      const next = deriveNext(history[history.length - 1]);
+      history.push(next);
+      generationLabel.textContent = history.length - 1;
+      lengthLabel.textContent = next.length;
+      alphabetLabel.textContent = `{${Array.from(new Set(next.split(''))).join(', ')}}`;
+      renderOutput();
+      if (history.length - 1 >= maxGenerations) {
+        stop();
+      }
+    }
+
+    function run() {
+      if (timer) return;
+      timer = setInterval(() => {
+        stepOnce();
+      }, 300);
+      runBtn.textContent = 'Stop';
+    }
+
+    function stop() {
+      if (timer) {
+        clearInterval(timer);
+        timer = null;
+      }
+      runBtn.textContent = 'Run';
+    }
+
+    presetSelect.addEventListener('change', () => {
+      if (presetSelect.value === 'custom') {
+        rules = parseRules(rulesInput.value);
+        rebuild();
+      } else {
+        applyPreset(presetSelect.value);
+      }
+    });
+
+    rulesInput.addEventListener('input', () => {
+      rules = parseRules(rulesInput.value);
+      renderRules();
+      rebuild();
+      presetSelect.value = 'custom';
+    });
+
+    seedInput.addEventListener('change', () => {
+      rebuild();
+    });
+
+    iterationsInput.addEventListener('change', () => {
+      const value = Math.max(1, Math.min(15, Number(iterationsInput.value)));
+      iterationsInput.value = value;
+    });
+
+    runBtn.addEventListener('click', () => {
+      if (timer) {
+        stop();
+      } else {
+        run();
+      }
+    });
+
+    stepBtn.addEventListener('click', () => {
+      stop();
+      stepOnce();
+    });
+
+    resetBtn.addEventListener('click', () => {
+      stop();
+      rebuild();
+    });
+
+    // Initial render
+    applyPreset('fibonacci');
+  </script>
 </body>
-</html>
\ No newline at end of file
+</html>
diff --git a/demos/chapter3/tag-system-demo.html b/demos/chapter3/tag-system-demo.html
index 1f689e53a6d0335ff75b82cca85d9513c3ba9a06..ad21e3a64b670642a987dc63444d1652b85a8f98 100644
--- a/demos/chapter3/tag-system-demo.html
+++ b/demos/chapter3/tag-system-demo.html
@@ -1,918 +1,467 @@
 <!DOCTYPE html>
-<html lang="zh-CN">
+<html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>标记系统探索器 - 交互式序列替换实验</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            line-height: 1.6;
-            color: #e0e0e0;
-            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
-            min-height: 100vh;
-            padding: 0;
-        }
-
-        .container {
-            width: 100vw;
-            min-height: 100vh;
-            margin: 0;
-            background: rgba(26, 26, 26, 0.8);
-            backdrop-filter: blur(10px);
-            overflow: hidden;
-        }
-
-        .header {
-            background: linear-gradient(135deg, #ffd700, #ffb300);
-            color: #1a1a1a;
-            padding: 2rem;
-            text-align: center;
-        }
-
-        .header h1 {
-            font-size: 2.5rem;
-            font-weight: 700;
-            margin-bottom: 0.5rem;
-        }
-
-        .header p {
-            font-size: 1.1rem;
-            opacity: 0.8;
-        }
-
-        .main-content {
-            display: grid;
-            grid-template-columns: 400px 1fr;
-            gap: 0;
-            min-height: calc(100vh - 120px);
-        }
-
-        .controls-panel {
-            background: rgba(40, 40, 40, 0.9);
-            padding: 2rem;
-            border-right: 1px solid rgba(255, 215, 0, 0.2);
-            max-height: calc(100vh - 200px);
-            overflow-y: auto;
-        }
-
-        .visualization-area {
-            padding: 1.5rem;
-            display: flex;
-            flex-direction: column;
-            align-items: center;
-            background: rgba(20, 20, 20, 0.5);
-            overflow: auto;
-        }
-
-        .section-title {
-            color: #ffd700;
-            font-size: 1.3rem;
-            font-weight: 600;
-            margin: 1.5rem 0 1rem 0;
-            padding-bottom: 0.5rem;
-            border-bottom: 2px solid rgba(255, 215, 0, 0.3);
-        }
-
-        .section-title:first-of-type {
-            margin-top: 0;
-        }
-
-        /* Preset Systems */
-        .preset-systems {
-            display: grid;
-            grid-template-columns: repeat(2, 1fr);
-            gap: 8px;
-            margin: 1rem 0;
-        }
-
-        .preset-system {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            padding: 10px;
-            text-align: center;
-            cursor: pointer;
-            transition: all 0.3s ease;
-            font-size: 0.9rem;
-        }
-
-        .preset-system:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .preset-system.active {
-            background: rgba(255, 215, 0, 0.2);
-            border-color: #ffd700;
-        }
-
-        .preset-name {
-            font-weight: bold;
-            color: #ffd700;
-            font-size: 1.1rem;
-        }
-
-        .preset-description {
-            color: rgba(255, 255, 255, 0.7);
-            font-size: 0.8rem;
-            margin-top: 4px;
-        }
-
-        /* Control Groups */
-        .control-group {
-            margin: 1rem 0;
-        }
-
-        .control-label {
-            display: block;
-            color: rgba(255, 215, 0, 0.8);
-            font-size: 0.9rem;
-            font-weight: 500;
-            margin-bottom: 8px;
-        }
-
-        .control-row {
-            display: flex;
-            gap: 8px;
-            align-items: center;
-            margin: 8px 0;
-        }
-
-        .input-field {
-            flex: 1;
-            padding: 8px 12px;
-            background: rgba(255, 255, 255, 0.1);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            color: #e0e0e0;
-            font-family: 'Courier New', monospace;
-            font-size: 0.9rem;
-        }
-
-        .input-field:focus {
-            outline: none;
-            border-color: #ffd700;
-            box-shadow: 0 0 0 2px rgba(255, 215, 0, 0.3);
-        }
-
-        .btn {
-            padding: 8px 16px;
-            border: 1px solid rgba(255, 215, 0, 0.4);
-            border-radius: 6px;
-            background: transparent;
-            color: rgba(255, 215, 0, 0.8);
-            cursor: pointer;
-            font-size: 0.9rem;
-            transition: all 0.3s ease;
-            flex: 1;
-        }
-
-        .btn:hover {
-            background: rgba(255, 215, 0, 0.1);
-            border-color: rgba(255, 215, 0, 0.6);
-        }
-
-        .btn.primary {
-            background: rgba(255, 215, 0, 0.2);
-            color: #ffd700;
-            border-color: #ffd700;
-        }
-
-        .btn.primary:hover {
-            background: rgba(255, 215, 0, 0.3);
-        }
-
-        .btn:disabled {
-            opacity: 0.5;
-            cursor: not-allowed;
-        }
-
-        /* Rules Display */
-        .rules-display {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            border-radius: 6px;
-            padding: 12px;
-            margin: 1rem 0;
-            font-size: 0.9rem;
-            font-family: 'Courier New', monospace;
-        }
-
-        .rule-item {
-            margin-bottom: 5px;
-            color: rgba(255, 255, 255, 0.8);
-        }
-
-        .rule-symbol {
-            color: #ffd700;
-            font-weight: 600;
-        }
-
-        /* String Visualization */
-        .string-display {
-            width: 100%;
-            max-width: 800px;
-            margin: 1rem 0;
-        }
-
-        .string-container {
-            background: rgba(0, 0, 0, 0.4);
-            border: 2px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            padding: 20px;
-            min-height: 100px;
-            display: flex;
-            align-items: center;
-            justify-content: center;
-        }
-
-        .current-string {
-            font-family: 'Courier New', monospace;
-            font-size: 1.4rem;
-            color: #ffd700;
-            font-weight: bold;
-            word-break: break-all;
-            text-align: center;
-            line-height: 1.6;
-        }
-
-        .evolution-info {
-            display: flex;
-            justify-content: space-between;
-            align-items: center;
-            margin: 1rem 0;
-            padding: 12px 16px;
-            background: rgba(255, 215, 0, 0.1);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 6px;
-            font-size: 0.9rem;
-            width: 100%;
-            max-width: 800px;
-        }
-
-        .info-item {
-            display: flex;
-            flex-direction: column;
-            align-items: center;
-            gap: 4px;
-        }
-
-        .info-label {
-            color: rgba(255, 215, 0, 0.8);
-            font-size: 0.8rem;
-        }
-
-        .info-value {
-            color: #ffd700;
-            font-weight: bold;
-        }
-
-        /* History Display */
-        .history-display {
-            width: 100%;
-            max-width: 800px;
-            background: rgba(0, 0, 0, 0.3);
-            border: 1px solid rgba(255, 255, 255, 0.1);
-            border-radius: 8px;
-            padding: 20px;
-            margin: 1rem 0;
-        }
-
-        .history-title {
-            color: #ffd700;
-            font-size: 1.2rem;
-            font-weight: 600;
-            margin-bottom: 15px;
-        }
-
-        .history-content {
-            max-height: 300px;
-            overflow-y: auto;
-        }
-
-        .history-item {
-            font-family: 'Courier New', monospace;
-            font-size: 0.9em;
-            padding: 8px 0;
-            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
-            color: #c0c0c0;
-        }
-
-        .history-item:last-child {
-            border-bottom: none;
-        }
-
-        .history-step {
-            color: #ffd700;
-            font-weight: 600;
-            margin-right: 10px;
-            min-width: 40px;
-            display: inline-block;
-        }
-
-        .history-action {
-            color: rgba(255, 255, 255, 0.6);
-            font-style: italic;
-            margin-left: 10px;
-        }
-
-        /* System Analysis */
-        .system-analysis {
-            background: rgba(255, 255, 255, 0.05);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            border-radius: 6px;
-            padding: 12px;
-            margin: 1rem 0;
-            font-size: 0.9rem;
-            width: 100%;
-            max-width: 800px;
-        }
-
-        .analysis-title {
-            color: #ffd700;
-            font-weight: 600;
-            margin-bottom: 8px;
-        }
-
-        .analysis-text {
-            color: rgba(255, 255, 255, 0.8);
-            line-height: 1.5;
-        }
-
-        /* Responsive Design */
-        @media (max-width: 1200px) {
-            .main-content {
-                grid-template-columns: 350px 1fr;
-            }
-        }
-
-        @media (max-width: 1024px) {
-            .main-content {
-                grid-template-columns: 1fr;
-                min-height: auto;
-            }
-
-            .controls-panel {
-                max-height: none;
-                border-right: none;
-                border-bottom: 1px solid rgba(255, 215, 0, 0.2);
-                padding: 1.5rem;
-            }
-
-            .visualization-area {
-                padding: 1rem;
-            }
-
-            .preset-systems {
-                grid-template-columns: repeat(4, 1fr);
-            }
-        }
-
-        @media (max-width: 768px) {
-            .container {
-                margin: 0;
-                border-radius: 0;
-            }
-
-            .header {
-                padding: 1.5rem;
-            }
-
-            .header h1 {
-                font-size: 2rem;
-            }
-
-            .controls-panel,
-            .visualization-area {
-                padding: 1rem;
-            }
-
-            .preset-systems {
-                grid-template-columns: repeat(2, 1fr);
-            }
-
-            .evolution-info {
-                flex-direction: column;
-                gap: 8px;
-            }
-
-            .current-string {
-                font-size: 1.2rem;
-            }
-        }
-
-        /* Loading Animation */
-        @keyframes pulse {
-            0%, 100% {
-                opacity: 0.7;
-            }
-            50% {
-                opacity: 1;
-            }
-        }
-
-        .running {
-            animation: pulse 1.5s infinite;
-        }
-    </style>
+  <meta charset="utf-8" />
+  <meta name="viewport" content="width=device-width, initial-scale=1" />
+  <title>Tag System Demonstration</title>
+  <style>
+    :root {
+      color-scheme: light dark;
+      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
+    }
+
+    body {
+      margin: 0;
+      padding: 24px;
+      background: #f4f5f7;
+      color: #202124;
+    }
+
+    header {
+      max-width: 900px;
+      margin: 0 auto 24px auto;
+    }
+
+    h1 {
+      font-size: 1.9rem;
+      margin: 0 0 6px 0;
+      font-weight: 600;
+    }
+
+    header p {
+      margin: 4px 0 0 0;
+      max-width: 70ch;
+      line-height: 1.55;
+      color: #4a4f55;
+    }
+
+    main {
+      max-width: 1100px;
+      margin: 0 auto;
+      display: grid;
+      grid-template-columns: 340px 1fr;
+      gap: 20px;
+    }
+
+    @media (max-width: 960px) {
+      main {
+        grid-template-columns: 1fr;
+      }
+    }
+
+    .panel {
+      background: #fff;
+      border: 1px solid #d4d7dd;
+      border-radius: 8px;
+      padding: 16px;
+      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
+    }
+
+    .panel h2 {
+      margin: 0 0 12px 0;
+      font-size: 1.1rem;
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    .controls form {
+      display: grid;
+      gap: 12px;
+    }
+
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 6px;
+      font-size: 0.9rem;
+    }
+
+    select,
+    input[type="number"],
+    input[type="text"],
+    textarea {
+      padding: 6px 8px;
+      border-radius: 6px;
+      border: 1px solid #c3c7ce;
+      font-size: 0.95rem;
+      font-family: inherit;
+      background: #fff;
+      color: inherit;
+    }
+
+    textarea {
+      min-height: 110px;
+      resize: vertical;
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+    }
+
+    button {
+      padding: 7px 12px;
+      border-radius: 6px;
+      border: 1px solid #0b57d0;
+      background: #0b57d0;
+      color: #fff;
+      font-weight: 600;
+      cursor: pointer;
+      transition: background 0.2s ease;
+    }
+
+    button.secondary {
+      background: #fff;
+      color: #0b57d0;
+    }
+
+    button:disabled {
+      opacity: 0.55;
+      cursor: default;
+    }
+
+    .button-row {
+      display: flex;
+      flex-wrap: wrap;
+      gap: 8px;
+    }
+
+    .status {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
+      gap: 8px;
+      margin-top: 10px;
+      font-size: 0.9rem;
+      color: #3c4043;
+    }
+
+    .status dt {
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    .status dd {
+      margin: 0;
+    }
+
+    .rules-display {
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+      font-size: 0.85rem;
+      background: #f0f4ff;
+      border-radius: 6px;
+      padding: 8px;
+      border: 1px solid #d0daf5;
+      margin-top: 4px;
+    }
+
+    .output {
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+      font-size: 0.9rem;
+      line-height: 1.5;
+      border: 1px solid #d4d7dd;
+      border-radius: 8px;
+      background: #fafafa;
+      padding: 12px;
+      max-height: 520px;
+      overflow-y: auto;
+    }
+
+    .generation {
+      margin-bottom: 12px;
+    }
+
+    .generation strong {
+      color: #0b57d0;
+    }
+
+    .notice {
+      font-size: 0.85rem;
+      color: #5f6368;
+      line-height: 1.4;
+      margin-top: 12px;
+    }
+  </style>
 </head>
-
-<!-- Google tag (gtag.js) -->
-<script async src="https://www.googletagmanager.com/gtag/js?id=G-QR1KHESCTK"></script>
-<script>
-    window.dataLayer = window.dataLayer || [];
-    function gtag() { dataLayer.push(arguments); }
-    gtag('js', new Date());
-
-    gtag('config', 'G-QR1KHESCTK');
-</script>
-
 <body>
-    <div class="container">
-        <div class="header">
-            <h1>标记系统探索器</h1>
-            <p>交互式探索序列替换系统，理解计算复杂性的基础模型</p>
+  <header>
+    <h1>Tag System Demonstration</h1>
+    <p>
+      A tag system removes a fixed number of symbols from the front of the
+      current word and appends a replacement string determined by the first
+      symbol removed. This implementation mirrors the examples discussed in
+      Chapter&nbsp;3.
+    </p>
+  </header>
+
+  <main>
+    <section class="panel controls">
+      <h2>Configuration</h2>
+      <form>
+        <label>
+          Preset system
+          <select id="preset">
+            <option value="complex2">Deletion-2: 0→00, 1→1101</option>
+            <option value="balanced">Deletion-2: a→ab, b→a</option>
+            <option value="nks">Deletion-3: 000→00101, 101→0</option>
+            <option value="custom">Custom…</option>
+          </select>
+        </label>
+
+        <label>
+          Deletion number
+          <input type="number" id="deletion" min="1" max="6" value="2" />
+        </label>
+
+        <label>
+          Rules (e.g. <code>0 -> 00</code>)
+          <textarea id="rulesInput"></textarea>
+        </label>
+
+        <label>
+          Initial word
+          <input type="text" id="seed" value="101" />
+        </label>
+
+        <label>
+          Iterations
+          <input type="number" id="iterations" min="1" max="200" value="80" />
+        </label>
+
+        <div class="button-row">
+          <button type="button" id="runBtn">Run</button>
+          <button type="button" id="stepBtn" class="secondary">Step</button>
+          <button type="button" id="resetBtn" class="secondary">Reset</button>
         </div>
+      </form>
 
-        <div class="main-content">
-            <div class="controls-panel">
-                <div class="section-title">预设系统</div>
-                <p style="font-size: 0.9rem; color: rgba(255, 255, 255, 0.7); margin-bottom: 1rem;">
-                    选择经典标记系统进行探索：
-                </p>
-
-                <div class="preset-systems">
-                    <div class="preset-system active" data-preset="wolfram925">
-                        <div class="preset-name">Wolfram 925</div>
-                        <div class="preset-description">经典规则</div>
-                    </div>
-                    <div class="preset-system" data-preset="cyclic">
-                        <div class="preset-name">循环系统</div>
-                        <div class="preset-description">3符号循环</div>
-                    </div>
-                    <div class="preset-system" data-preset="doubling">
-                        <div class="preset-name">倍增系统</div>
-                        <div class="preset-description">二进制倍增</div>
-                    </div>
-                    <div class="preset-system" data-preset="collatz">
-                        <div class="preset-name">类科拉茨</div>
-                        <div class="preset-description">Collatz-like</div>
-                    </div>
-                </div>
-
-                <div class="section-title">系统配置</div>
-
-                <div class="control-group">
-                    <label class="control-label">删除数 (m)</label>
-                    <div class="control-row">
-                        <input type="number" class="input-field" id="deletion" value="2" min="1" max="10">
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <label class="control-label">字母表</label>
-                    <div class="control-row">
-                        <input type="text" class="input-field" id="alphabet" value="ABC" placeholder="例如: ABC 或 01">
-                    </div>
-                </div>
-
-                <div class="control-group">
-                    <label class="control-label">初始字符串</label>
-                    <div class="control-row">
-                        <input type="text" class="input-field" id="initial-string" value="AAA" placeholder="例如: AAA 或 101">
-                    </div>
-                </div>
-
-                <div class="section-title">替换规则</div>
-                <div id="rules-container">
-                    <!-- Rules will be generated dynamically -->
-                </div>
-
-                <div class="section-title">当前规则</div>
-                <div id="rules-display" class="rules-display">
-                    <!-- Current rules will be displayed here -->
-                </div>
-
-                <div class="section-title">控制操作</div>
-
-                <div class="control-group">
-                    <div class="control-row">
-                        <button class="btn primary" id="init-btn">初始化</button>
-                        <button class="btn" id="step-btn">单步</button>
-                    </div>
-                    <div class="control-row">
-                        <button class="btn" id="run-btn">运行10步</button>
-                        <button class="btn" id="run-all-btn">运行至停止</button>
-                    </div>
-                    <div class="control-row">
-                        <button class="btn" id="reset-btn">重置</button>
-                    </div>
-                </div>
-
-                <div class="system-analysis" id="system-analysis">
-                    <div class="analysis-title">系统分析</div>
-                    <div class="analysis-text" id="analysis-text">
-                        Wolfram 925系统：经典标记系统，展现了简单规则产生复杂行为的典型例子。通过删除前2个符号并根据第一个符号应用替换规则。
-                    </div>
-                </div>
-            </div>
-
-            <div class="visualization-area">
-                <div class="string-display">
-                    <div class="string-container">
-                        <div class="current-string" id="current-string">准备开始...</div>
-                    </div>
-                </div>
-
-                <div class="evolution-info">
-                    <div class="info-item">
-                        <span class="info-label">当前步数</span>
-                        <span class="info-value" id="current-step">0</span>
-                    </div>
-                    <div class="info-item">
-                        <span class="info-label">字符串长度</span>
-                        <span class="info-value" id="string-length">0</span>
-                    </div>
-                    <div class="info-item">
-                        <span class="info-label">系统状态</span>
-                        <span class="info-value" id="system-status">就绪</span>
-                    </div>
-                    <div class="info-item">
-                        <span class="info-label">行为类型</span>
-                        <span class="info-value" id="behavior-type">复杂</span>
-                    </div>
-                </div>
-
-                <div class="history-display">
-                    <div class="history-title">演化历史</div>
-                    <div class="history-content" id="history-content">
-                        <!-- Evolution steps will be displayed here -->
-                    </div>
-                </div>
-            </div>
+      <dl class="status">
+        <div>
+          <dt>Step</dt>
+          <dd id="stepLabel">0</dd>
+        </div>
+        <div>
+          <dt>Current length</dt>
+          <dd id="lengthLabel">3</dd>
+        </div>
+        <div>
+          <dt>Applied rule</dt>
+          <dd id="ruleLabel">—</dd>
         </div>
-    </div>
-
-    <script>
-        class TagSystemExplorer {
-            constructor() {
-                // Runtime state
-                this.currentString = '';
-                this.rules = {};
-                this.deletionNumber = 2;
-                this.stepCount = 0;
-                this.history = [];
-                this.isRunning = false;
-                this.animationId = null;
-                this.activePreset = 'wolfram925';
-
-                // Preset systems
-                this.presets = {
-                    wolfram925: {
-                        deletion: 2,
-                        alphabet: 'ABC',
-                        initial: 'AAA',
-                        rules: { A: 'BC', B: 'A', C: 'AAB' }
-                    },
-                    cyclic: {
-                        deletion: 1,
-                        alphabet: 'ABC',
-                        initial: 'ABC',
-                        rules: { A: 'B', B: 'C', C: 'A' }
-                    },
-                    doubling: {
-                        deletion: 1,
-                        alphabet: '01',
-                        initial: '1',
-                        rules: { '0': '00', '1': '11' }
-                    },
-                    collatz: {
-                        deletion: 1,
-                        alphabet: 'EO',
-                        initial: 'EEEOO',
-                        rules: { E: 'O', O: 'EEE' }
-                    }
-                };
-
-                this.init();
-            }
-
-            init() {
-                this.setupEventListeners();
-                this.loadPreset('wolfram925');
-            }
-
-            setupEventListeners() {
-                // Preset system buttons
-                const presetSystems = document.querySelectorAll('.preset-system');
-                presetSystems.forEach(system => {
-                    system.addEventListener('click', (e) => {
-                        this.loadPreset(e.currentTarget.dataset.preset);
-                    });
-                });
-
-                // Control buttons
-                document.getElementById('init-btn').addEventListener('click', () => this.initializeSystem());
-                document.getElementById('step-btn').addEventListener('click', () => this.stepOnce());
-                document.getElementById('run-btn').addEventListener('click', () => this.runSteps());
-                document.getElementById('run-all-btn').addEventListener('click', () => this.runUntilHalt());
-                document.getElementById('reset-btn').addEventListener('click', () => this.reset());
-
-                // Input field listeners
-                document.getElementById('alphabet').addEventListener('input', () => this.generateRulesInputs());
-            }
-
-            loadPreset(presetName) {
-                const preset = this.presets[presetName];
-                if (!preset) return;
-
-                this.activePreset = presetName;
-                this.updatePresetActiveState(presetName);
-
-                // Update input fields
-                document.getElementById('deletion').value = preset.deletion;
-                document.getElementById('alphabet').value = preset.alphabet;
-                document.getElementById('initial-string').value = preset.initial;
-
-                // Generate rule inputs and set values
-                this.generateRulesInputs();
-                
-                setTimeout(() => {
-                    for (const [symbol, replacement] of Object.entries(preset.rules)) {
-                        const input = document.getElementById(`rule-${symbol}`);
-                        if (input) {
-                            input.value = replacement;
-                        }
-                    }
-                    this.initializeSystem();
-                    this.updateSystemAnalysis();
-                }, 100);
-            }
-
-            updatePresetActiveState(activePreset) {
-                const presetSystems = document.querySelectorAll('.preset-system');
-                presetSystems.forEach(system => {
-                    system.classList.toggle('active', system.dataset.preset === activePreset);
-                });
-            }
-
-            generateRulesInputs() {
-                const alphabet = document.getElementById('alphabet').value;
-                const container = document.getElementById('rules-container');
-                
-                container.innerHTML = '';
-                
-                for (const symbol of alphabet) {
-                    const div = document.createElement('div');
-                    div.className = 'control-group';
-                    div.innerHTML = `
-                        <label class="control-label">规则 '${symbol}'</label>
-                        <div class="control-row">
-                            <input type="text" class="input-field" id="rule-${symbol}" placeholder="替换字符串" value="">
-                        </div>
-                    `;
-                    container.appendChild(div);
-                }
-            }
-
-            updateRulesDisplay() {
-                const display = document.getElementById('rules-display');
-                let html = '';
-                
-                for (const [symbol, replacement] of Object.entries(this.rules)) {
-                    html += `<div class="rule-item"><span class="rule-symbol">${symbol}</span> → ${replacement || '∅'}</div>`;
-                }
-                
-                if (html === '') {
-                    html = '<div class="rule-item">未定义规则</div>';
-                }
-                
-                html += `<div class="rule-item" style="margin-top: 10px; color: #ffd700;">删除数: ${this.deletionNumber}</div>`;
-                
-                display.innerHTML = html;
-            }
-
-            initializeSystem() {
-                this.deletionNumber = parseInt(document.getElementById('deletion').value);
-                const alphabet = document.getElementById('alphabet').value;
-                this.currentString = document.getElementById('initial-string').value;
-                
-                // Collect rules
-                this.rules = {};
-                for (const symbol of alphabet) {
-                    const ruleInput = document.getElementById(`rule-${symbol}`);
-                    if (ruleInput) {
-                        this.rules[symbol] = ruleInput.value;
-                    }
-                }
-                
-                this.stepCount = 0;
-                this.history = [];
-                
-                this.updateDisplay();
-                this.updateRulesDisplay();
-                this.addToHistory(this.currentString, '初始字符串');
-                
-                this.enableControls();
-            }
-
-            stepOnce() {
-                if (this.currentString.length < this.deletionNumber) {
-                    this.addToHistory('停止', '字符串过短');
-                    this.disableControls();
-                    this.updateSystemStatus('已停止');
-                    return false;
-                }
-
-                const firstSymbol = this.currentString[0];
-                const removedPart = this.currentString.substring(0, this.deletionNumber);
-                const remainingPart = this.currentString.substring(this.deletionNumber);
-                
-                let newString = remainingPart;
-                let replacement = '';
-                
-                if (this.rules[firstSymbol]) {
-                    replacement = this.rules[firstSymbol];
-                    newString += replacement;
-                }
-                
-                // Check for cycles
-                if (this.history.some(item => item.string === newString)) {
-                    this.addToHistory(newString, `删除 "${removedPart}", 添加 "${replacement}" (检测到循环)`);
-                    this.currentString = newString;
-                    this.stepCount++;
-                    this.updateDisplay();
-                    this.disableControls();
-                    this.updateSystemStatus('已停止 - 循环');
-                    return false;
-                }
-                
-                this.currentString = newString;
-                this.stepCount++;
-                
-                const action = replacement ? `删除 "${removedPart}", 添加 "${replacement}"` : `删除 "${removedPart}", 无规则`;
-                this.addToHistory(this.currentString, action);
-                this.updateDisplay();
-                
-                return true;
-            }
-
-            runSteps() {
-                if (this.isRunning) return;
-                
-                this.isRunning = true;
-                this.updateSystemStatus('运行中');
-                document.getElementById('run-btn').classList.add('running');
-                
-                let steps = 0;
-                const maxSteps = 10;
-                
-                const step = () => {
-                    if (!this.isRunning) return;
-                    
-                    if (steps >= maxSteps || !this.stepOnce()) {
-                        this.stopExecution();
-                        return;
-                    }
-                    
-                    steps++;
-                    this.animationId = setTimeout(step, 300);
-                };
-                
-                step();
-            }
-
-            runUntilHalt() {
-                if (this.isRunning) return;
-                
-                this.isRunning = true;
-                this.updateSystemStatus('运行中');
-                document.getElementById('run-all-btn').classList.add('running');
-                
-                const maxSteps = 1000;
-                let steps = 0;
-                
-                const step = () => {
-                    if (!this.isRunning) return;
-                    
-                    if (steps >= maxSteps) {
-                        this.addToHistory('已停止', '达到最大步数 (1000)');
-                        this.stopExecution();
-                        return;
-                    }
-                    
-                    if (!this.stepOnce()) {
-                        this.stopExecution();
-                        return;
-                    }
-                    
-                    steps++;
-                    this.animationId = setTimeout(step, 50);
-                };
-                
-                step();
-            }
-
-            stopExecution() {
-                this.isRunning = false;
-                if (this.animationId) {
-                    clearTimeout(this.animationId);
-                    this.animationId = null;
-                }
-                this.updateSystemStatus('已停止');
-                document.getElementById('run-btn').classList.remove('running');
-                document.getElementById('run-all-btn').classList.remove('running');
-            }
-
-            reset() {
-                this.stopExecution();
-                this.currentString = document.getElementById('initial-string').value;
-                this.stepCount = 0;
-                this.history = [];
-                
-                this.updateDisplay();
-                this.addToHistory(this.currentString, '重置到初始字符串');
-                this.updateSystemStatus('就绪');
-                
-                this.enableControls();
-            }
-
-            updateDisplay() {
-                document.getElementById('current-string').textContent = this.currentString || '空字符串';
-                document.getElementById('current-step').textContent = this.stepCount;
-                document.getElementById('string-length').textContent = this.currentString.length;
-                
-                // Update behavior type
-                this.updateBehaviorType();
-            }
-
-            updateBehaviorType() {
-                let behaviorType = '复杂';
-                
-                if (this.activePreset === 'cyclic') {
-                    behaviorType = '循环';
-                } else if (this.activePreset === 'doubling') {
-                    behaviorType = '倍增';
-                } else if (this.activePreset === 'collatz') {
-                    behaviorType = '类科拉茨';
-                } else if (this.currentString.length === 0) {
-                    behaviorType = '消亡';
-                } else if (this.history.length > 10 && this.currentString.length > 50) {
-                    behaviorType = '增长';
-                }
-                
-                document.getElementById('behavior-type').textContent = behaviorType;
-            }
-
-            updateSystemStatus(status) {
-                document.getElementById('system-status').textContent = status;
-            }
-
-            addToHistory(string, action) {
-                this.history.push({ step: this.stepCount, string, action });
-                
-                const historyContent = document.getElementById('history-content');
-                const item = document.createElement('div');
-                item.className = 'history-item';
-                item.innerHTML = `<span class="history-step">${this.stepCount}:</span> ${string}<span class="history-action">${action}</span>`;
-                historyContent.appendChild(item);
-                historyContent.scrollTop = historyContent.scrollHeight;
-            }
-
-            enableControls() {
-                document.getElementById('step-btn').disabled = false;
-                document.getElementById('run-btn').disabled = false;
-                document.getElementById('run-all-btn').disabled = false;
-            }
-
-            disableControls() {
-                document.getElementById('step-btn').disabled = true;
-                document.getElementById('run-btn').disabled = true;
-                document.getElementById('run-all-btn').disabled = true;
-            }
-
-            updateSystemAnalysis() {
-                const analyses = {
-                    wolfram925: "Wolfram 925系统：经典标记系统，展现了简单规则产生复杂行为的典型例子。通过删除前2个符号并根据第一个符号应用替换规则。",
-                    cyclic: "循环系统：简单的三符号循环，每个符号都替换为下一个符号，形成A→B→C→A的循环模式。",
-                    doubling: "倍增系统：二进制标记系统，每个符号都被替换为自身的两个副本，展现指数增长行为。",
-                    collatz: "类科拉茨系统：类似于著名的科拉茨猜想，偶数符号变为单个，奇数符号变为三个，展现复杂的数值行为。"
-                };
-
-                const text = analyses[this.activePreset] || `自定义系统：观察其产生的行为模式，分析其复杂性和规律性。`;
-                document.getElementById('analysis-text').textContent = text;
-            }
-        }
-
-        // Initialize on page load
-        document.addEventListener('DOMContentLoaded', () => new TagSystemExplorer());
-    </script>
+      </dl>
+
+      <div class="rules-display" id="rulesDisplay"></div>
+
+      <p class="notice">
+        If the word becomes shorter than the deletion number, the system halts.
+        Rules are keyed by the first symbol deleted at each step.
+      </p>
+    </section>
+
+    <section class="panel">
+      <h2>Evolution</h2>
+      <div class="output" id="output"></div>
+    </section>
+  </main>
+
+  <script>
+    const PRESETS = {
+      complex2: {
+        deletion: 2,
+        rules: { '0': '00', '1': '1101' },
+        seed: '1011'
+      },
+      balanced: {
+        deletion: 2,
+        rules: { a: 'ab', b: 'a' },
+        seed: 'ababa'
+      },
+      nks: {
+        deletion: 3,
+        rules: { '0': '00101', '1': '0' },
+        seed: '000101'
+      }
+    };
+
+    const presetSelect = document.getElementById('preset');
+    const deletionInput = document.getElementById('deletion');
+    const rulesInput = document.getElementById('rulesInput');
+    const seedInput = document.getElementById('seed');
+    const iterationsInput = document.getElementById('iterations');
+    const runBtn = document.getElementById('runBtn');
+    const stepBtn = document.getElementById('stepBtn');
+    const resetBtn = document.getElementById('resetBtn');
+    const stepLabel = document.getElementById('stepLabel');
+    const lengthLabel = document.getElementById('lengthLabel');
+    const ruleLabel = document.getElementById('ruleLabel');
+    const rulesDisplay = document.getElementById('rulesDisplay');
+    const output = document.getElementById('output');
+
+    let deletion = 2;
+    let rules = {};
+    let history = [];
+    let timer = null;
+
+    function formatRules(map) {
+      return Object.entries(map)
+        .map(([key, value]) => `${key} → ${value}`)
+        .join('\n');
+    }
+
+    function parseRules(text) {
+      const map = {};
+      const lines = text.split(/\r?\n/);
+      for (const line of lines) {
+        const trimmed = line.trim();
+        if (!trimmed) continue;
+        const arrow = trimmed.includes('->') ? '->' : trimmed.includes('→') ? '→' : null;
+        if (!arrow) continue;
+        const [lhsRaw, rhsRaw] = trimmed.split(arrow);
+        if (!lhsRaw || rhsRaw === undefined) continue;
+        const lhs = lhsRaw.trim();
+        const rhs = rhsRaw.trim();
+        if (!lhs) continue;
+        map[lhs] = rhs;
+      }
+      return map;
+    }
+
+    function applyPreset(name) {
+      if (name === 'custom') {
+        return;
+      }
+      const preset = PRESETS[name];
+      deletion = preset.deletion;
+      rules = { ...preset.rules };
+      deletionInput.value = preset.deletion;
+      rulesInput.value = formatRules(rules);
+      seedInput.value = preset.seed;
+      rebuild();
+    }
+
+    function rebuild() {
+      history = [{
+        word: seedInput.value,
+        applied: null,
+        removed: '',
+        appended: ''
+      }];
+      stepLabel.textContent = 0;
+      lengthLabel.textContent = seedInput.value.length;
+      ruleLabel.textContent = '—';
+      renderRules();
+      renderOutput();
+    }
+
+    function renderRules() {
+      rulesDisplay.textContent = formatRules(rules) || 'No rules defined';
+    }
+
+    function renderOutput() {
+      const fragments = history.map((entry, i) => {
+        const detail = entry.applied
+          ? ` removed ${entry.removed} → append ${entry.appended || '∅'}`
+          : '';
+        return `<div class="generation"><strong>n=${i}</strong> ${entry.word}${detail}</div>`;
+      });
+      output.innerHTML = fragments.join('\n');
+      output.scrollTop = output.scrollHeight;
+    }
+
+    function stepOnce() {
+      const limit = Number(iterationsInput.value);
+      if (history.length - 1 >= limit) {
+        stop();
+        return;
+      }
+      const current = history[history.length - 1];
+      if (current.word.length < deletion) {
+        ruleLabel.textContent = 'halt (length < deletion)';
+        stop();
+        return;
+      }
+      const removed = current.word.slice(0, deletion);
+      const key = removed[0];
+      const append = rules[key] ?? '';
+      const nextWord = current.word.slice(deletion) + append;
+      const applied = `${key}→${append}`;
+      history.push({
+        word: nextWord,
+        applied,
+        removed,
+        appended: append
+      });
+      stepLabel.textContent = history.length - 1;
+      lengthLabel.textContent = nextWord.length;
+      ruleLabel.textContent = applied;
+      renderOutput();
+      if (history.length - 1 >= limit) {
+        stop();
+      }
+    }
+
+    function run() {
+      if (timer) return;
+      timer = setInterval(() => {
+        stepOnce();
+      }, 220);
+      runBtn.textContent = 'Stop';
+    }
+
+    function stop() {
+      if (timer) {
+        clearInterval(timer);
+        timer = null;
+      }
+      runBtn.textContent = 'Run';
+    }
+
+    presetSelect.addEventListener('change', () => {
+      if (presetSelect.value === 'custom') {
+        rules = parseRules(rulesInput.value);
+        deletion = Number(deletionInput.value);
+        rebuild();
+      } else {
+        applyPreset(presetSelect.value);
+      }
+    });
+
+    rulesInput.addEventListener('input', () => {
+      rules = parseRules(rulesInput.value);
+      renderRules();
+      rebuild();
+      presetSelect.value = 'custom';
+    });
+
+    deletionInput.addEventListener('change', () => {
+      const value = Math.max(1, Math.min(6, Number(deletionInput.value)));
+      deletionInput.value = value;
+      deletion = value;
+      rebuild();
+    });
+
+    seedInput.addEventListener('change', rebuild);
+
+    iterationsInput.addEventListener('change', () => {
+      const value = Math.max(1, Math.min(200, Number(iterationsInput.value)));
+      iterationsInput.value = value;
+    });
+
+    runBtn.addEventListener('click', () => {
+      if (timer) {
+        stop();
+      } else {
+        run();
+      }
+    });
+
+    stepBtn.addEventListener('click', () => {
+      stop();
+      stepOnce();
+    });
+
+    resetBtn.addEventListener('click', () => {
+      stop();
+      rebuild();
+    });
+
+    // Initial render
+    applyPreset('complex2');
+  </script>
 </body>
-</html>
\ No newline at end of file
+</html>
diff --git a/demos/chapter3/tag-system-nks-demo.html b/demos/chapter3/tag-system-nks-demo.html
index 12da6d2897b51ed894694ae68e7c0f64cc9e6b87..d4379bd6ed0b60c246d7022df951c618eda0196e 100644
--- a/demos/chapter3/tag-system-nks-demo.html
+++ b/demos/chapter3/tag-system-nks-demo.html
@@ -1,554 +1,11 @@
 <!DOCTYPE html>
 <html lang="en">
 <head>
-  <meta charset="UTF-8" />
-  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
-  <title>NKS-Style Tag System Demo</title>
-  <style>
-    :root {
-      --bg: #0f1115;
-      --panel: #171a21;
-      --ink: #e6e6e6;
-      --muted: #aab0bd;
-      --accent: #ffd54a;
-      --accent-2: #7dd3fc;
-      --danger: #ff7171;
-      --ok: #8be28b;
-      --outline: #2a2f3a;
-    }
-    * { box-sizing: border-box; }
-    body {
-      margin: 0;
-      font-family: ui-sans-serif, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
-      background: var(--bg);
-      color: var(--ink);
-      line-height: 1.45;
-    }
-    .wrap {
-      max-width: 1100px;
-      margin: 0 auto;
-      padding: 24px 16px 56px;
-    }
-    header h1 {
-      margin: 0 0 6px 0;
-      font-size: 26px;
-      font-weight: 700;
-      letter-spacing: 0.2px;
-    }
-    header p {
-      margin: 0 0 12px 0;
-      color: var(--muted);
-      max-width: 80ch;
-    }
-    .grid {
-      display: grid;
-      grid-template-columns: 360px 1fr;
-      gap: 16px;
-      margin-top: 16px;
-    }
-    @media (max-width: 980px) {
-      .grid { grid-template-columns: 1fr; }
-    }
-    .panel {
-      background: var(--panel);
-      border: 1px solid var(--outline);
-      border-radius: 10px;
-      padding: 14px;
-    }
-    h2 {
-      font-size: 16px;
-      font-weight: 700;
-      margin: 6px 0 12px 0;
-      color: var(--accent);
-    }
-    .row { margin: 10px 0; }
-    label { display: block; font-size: 12px; color: var(--muted); margin-bottom: 6px; }
-    input[type="text"], input[type="number"], textarea, select {
-      width: 100%;
-      padding: 8px 10px;
-      border-radius: 8px;
-      border: 1px solid var(--outline);
-      background: #0f131a;
-      color: var(--ink);
-      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
-      font-size: 13px;
-    }
-    textarea { min-height: 92px; resize: vertical; }
-    .controls {
-      display: grid;
-      grid-template-columns: repeat(2, minmax(0, 1fr));
-      gap: 8px;
-      margin-top: 6px;
-    }
-    button {
-      padding: 9px 12px;
-      border-radius: 8px;
-      border: 1px solid var(--outline);
-      background: #121620;
-      color: var(--ink);
-      cursor: pointer;
-      font-weight: 600;
-    }
-    button:hover { border-color: #394152; }
-    .primary { background: #1a2130; border-color: #30384a; }
-    .accent { background: #1e2430; border-color: #4b566e; color: var(--accent); }
-    .danger { color: var(--danger); }
-    .muted { color: var(--muted); }
-    .inline { display: inline-flex; gap: 8px; align-items: center; }
-    .inline input[type="number"] { width: 88px; }
-    .status {
-      display: flex; gap: 16px; flex-wrap: wrap;
-      padding: 10px 12px; border: 1px dashed var(--outline); border-radius: 8px;
-      background: #121621;
-      font-size: 13px;
-    }
-    .status b { color: var(--accent-2); font-weight: 700; }
-    .tape {
-      border: 1px solid var(--outline);
-      border-radius: 8px;
-      background: #0f131a;
-      padding: 8px;
-      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
-      font-size: 15px;
-      overflow-x: auto;
-      white-space: pre;
-    }
-    .tape .kill { text-decoration: line-through; color: #ff9aa2; }
-    .tape .append { color: #a0ffa0; }
-    .hist {
-      max-height: 280px; overflow: auto;
-      border: 1px solid var(--outline);
-      border-radius: 8px;
-      background: #0f131a;
-      padding: 8px;
-      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
-      font-size: 12px;
-    }
-    .hist .row { display: grid; grid-template-columns: 60px 1fr; gap: 12px; padding: 4px 0; border-bottom: 1px solid #161b26; }
-    .hist .row:last-child { border-bottom: none; }
-    .legend { display: flex; gap: 8px; flex-wrap: wrap; font-size: 12px; }
-    .chip { display: inline-flex; align-items: center; gap: 6px; padding: 4px 8px; border: 1px solid var(--outline); border-radius: 999px; }
-    .swatch { width: 12px; height: 12px; border-radius: 3px; display: inline-block; }
-    .hint { color: var(--muted); font-size: 12px; }
-    .note { color: #9dd6ff; font-size: 12px; }
-    .footer { margin-top: 14px; color: var(--muted); font-size: 12px; }
-    canvas { width: 100%; height: 280px; border: 1px solid var(--outline); border-radius: 8px; background: #0e1218; }
-  </style>
-  <meta name="description" content="Interactive NKS-style Tag System demo: choose deletion number, define rules, set initial word, and watch evolution." />
-  <meta name="robots" content="noindex" />
-  <script>
-    // Utility: deterministic color per symbol
-    function colorFor(symbol) {
-      // Hash symbol to hue
-      let h = 0;
-      for (let i = 0; i < symbol.length; i++) h = (h * 131 + symbol.charCodeAt(i)) >>> 0;
-      const hue = h % 360;
-      return `hsl(${hue}, 70%, 58%)`;
-    }
-
-    // Parse rules from textarea; each line: "A -> AB"
-    function parseRules(text) {
-      const rules = new Map();
-      const lines = text.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
-      for (const line of lines) {
-        // Support forms: A->AB, A → AB, A: AB
-        const m = line.match(/^(.+?)(?:\s*[-:→]*>\s*|\s*:\s*|\s+)(.*)$/);
-        if (!m) continue;
-        const key = m[1].trim();
-        const val = m[2] != null ? m[2].trim() : '';
-        if (!key) continue;
-        rules.set(key, val);
-      }
-      return rules;
-    }
-
-    function stringifyRules(map) {
-      return Array.from(map.entries()).map(([k,v]) => `${k} -> ${v}`).join("\n");
-    }
-
-    function uniqueSymbolsFrom(rules, word) {
-      const set = new Set();
-      for (const [k,v] of rules) { for (const ch of k) set.add(ch); for (const ch of v) set.add(ch); }
-      for (const ch of word) set.add(ch);
-      return Array.from(set);
-    }
-
-    // Tag System engine
-    class TagSystem {
-      constructor(m, rules, word) {
-        this.m = Math.max(1, Number(m) || 2);
-        this.rules = new Map(rules);  // Map(symbol -> string)
-        this.word = String(word || '');
-        this.step = 0;
-        this.halted = false;
-        this.seen = new Set();
-        this.history = []; // {step, removed, looked, appended, result}
-      }
-
-      next() {
-        if (this.halted) return false;
-        if (this.word.length < this.m) {
-          this.halted = true;
-          this.history.push({ step: this.step, removed: this.word, looked: '', appended: '', result: '', event: 'halt' });
-          return false;
-        }
-        const removed = this.word.slice(0, this.m);
-        const looked = this.word[0];
-        const appended = this.rules.get(looked) ?? '';
-        const result = this.word.slice(this.m) + appended;
-        this.word = result;
-        this.step += 1;
-        const key = `#${this.word}`;
-        const loop = this.seen.has(key);
-        this.seen.add(key);
-        this.history.push({ step: this.step, removed, looked, appended, result, event: loop ? 'loop' : '' });
-        if (loop) this.halted = true;
-        return !this.halted;
-      }
-    }
-
-    // UI Controller
-    const App = {
-      running: false,
-      timer: null,
-      speedMs: 120,
-      ts: null,
-      colors: new Map(),
-      examples: {
-        // A few varied examples (not copied from existing demo)
-        'Classic 2‑tag (halts)': {
-          m: 2,
-          rules: new Map([["A","AB"],["B","A"]]),
-          init: 'AAA'
-        },
-        'Binary duplication (steady length)': {
-          m: 2,
-          rules: new Map([["0","00"],["1","11"]]),
-          init: '101001'
-        },
-        'Cyclic 3‑symbols': {
-          m: 2,
-          rules: new Map([["A","B"],["B","C"],["C","A"]]),
-          init: 'ABCABC'
-        },
-        'Growth (mismatch lengths)': {
-          m: 2,
-          rules: new Map([["A","ABA"],["B","BB"]]),
-          init: 'ABABA'
-        },
-        'Eraser': {
-          m: 2,
-          rules: new Map([["X",""],["Y","X"]]),
-          init: 'YYYYYXX'
-        }
-      },
-
-      el: {},
-
-      mount() {
-        this.cacheEls();
-        this.buildExamples();
-        this.bind();
-        // Load from URL if present, else pick first example
-        if (!this.tryLoadFromUrl()) this.loadExample(Object.keys(this.examples)[0]);
-      },
-
-      cacheEls() {
-        const q = sel => document.querySelector(sel);
-        this.el.m = q('#m');
-        this.el.rules = q('#rules');
-        this.el.init = q('#init');
-        this.el.run = q('#run');
-        this.el.step = q('#step');
-        this.el.pause = q('#pause');
-        this.el.reset = q('#reset');
-        this.el.speed = q('#speed');
-        this.el.status = q('#status');
-        this.el.length = q('#length');
-        this.el.stepNo = q('#stepNo');
-        this.el.tape = q('#tape');
-        this.el.history = q('#history');
-        this.el.legend = q('#legend');
-        this.el.examples = q('#examples');
-        this.el.share = q('#share');
-        this.el.canvas = q('#evo');
-        this.ctx = this.el.canvas.getContext('2d');
-      },
-
-      bind() {
-        this.el.run.addEventListener('click', () => this.start());
-        this.el.pause.addEventListener('click', () => this.stop());
-        this.el.reset.addEventListener('click', () => this.reset());
-        this.el.step.addEventListener('click', () => { this.ensureEngine(); this.tick(); });
-        this.el.rules.addEventListener('input', () => this.refreshLegend());
-        this.el.init.addEventListener('input', () => this.refreshLegend());
-        this.el.speed.addEventListener('input', (e) => { this.speedMs = Number(e.target.value); });
-        this.el.examples.addEventListener('change', (e) => this.loadExample(e.target.value));
-        this.el.share.addEventListener('click', () => this.shareUrl());
-        window.addEventListener('resize', () => this.drawEvolution());
-      },
-
-      buildExamples() {
-        const sel = this.el.examples;
-        sel.innerHTML = '';
-        for (const name of Object.keys(this.examples)) {
-          const opt = document.createElement('option');
-          opt.value = name; opt.textContent = name; sel.appendChild(opt);
-        }
-      },
-
-      loadExample(name) {
-        const ex = this.examples[name];
-        if (!ex) return;
-        this.el.examples.value = name;
-        this.el.m.value = ex.m;
-        this.el.rules.value = stringifyRules(ex.rules);
-        this.el.init.value = ex.init;
-        this.reset();
-        this.refreshLegend();
-      },
-
-      tryLoadFromUrl() {
-        const params = new URLSearchParams(location.search);
-        if (!params.has('m') && !params.has('rules') && !params.has('init')) return false;
-        this.el.m.value = params.get('m') || '2';
-        try {
-          const decoded = decodeURIComponent(params.get('rules') || '');
-          this.el.rules.value = decoded;
-        } catch { /* ignore */ }
-        this.el.init.value = params.get('init') || '';
-        this.reset();
-        this.refreshLegend();
-        return true;
-      },
-
-      shareUrl() {
-        const m = this.el.m.value;
-        const rules = encodeURIComponent(this.el.rules.value.trim());
-        const init = encodeURIComponent(this.el.init.value.trim());
-        const url = `${location.origin}${location.pathname}?m=${m}&rules=${rules}&init=${init}`;
-        navigator.clipboard?.writeText(url).catch(() => {});
-        this.toast('Share URL copied to clipboard');
-      },
-
-      toast(msg) {
-        this.el.status.textContent = msg;
-        setTimeout(() => this.updateStatus(), 1200);
-      },
-
-      ensureEngine() {
-        if (this.ts) return;
-        const m = Number(this.el.m.value) || 2;
-        const rules = parseRules(this.el.rules.value);
-        const init = this.el.init.value;
-        this.ts = new TagSystem(m, rules, init);
-        this.history = [{ step: 0, result: init }];
-        this.drawEvolution(true);
-        this.refreshLegend();
-        this.updateStatus();
-        this.renderTape();
-      },
-
-      start() {
-        this.ensureEngine();
-        if (this.running) return;
-        this.running = true;
-        const loop = () => {
-          if (!this.running) return;
-          if (!this.tick()) { this.stop(); return; }
-          this.timer = setTimeout(loop, this.speedMs);
-        };
-        loop();
-      },
-
-      stop() {
-        this.running = false;
-        if (this.timer) { clearTimeout(this.timer); this.timer = null; }
-        this.updateStatus();
-      },
-
-      reset() {
-        this.stop();
-        this.ts = null;
-        this.el.history.innerHTML = '';
-        this.el.tape.textContent = '';
-        this.drawEvolution(true);
-        this.updateStatus();
-      },
-
-      tick() {
-        if (!this.ts) return false;
-        const alive = this.ts.next();
-        const last = this.ts.history[this.ts.history.length - 1];
-        this.appendHistory(last);
-        this.renderTape(last);
-        this.drawEvolution();
-        this.updateStatus();
-        return alive;
-      },
-
-      updateStatus() {
-        if (!this.ts) {
-          this.el.status.innerHTML = 'Ready. Define rules and initial word, then run or step.';
-          this.el.length.textContent = '–';
-          this.el.stepNo.textContent = '–';
-          return;
-        }
-        const halted = this.ts.halted;
-        const loopy = this.ts.history.at(-1)?.event === 'loop';
-        const msg = halted ? (loopy ? 'Stopped (loop detected)' : 'Halted (word too short)') : (this.running ? 'Running…' : 'Paused');
-        this.el.status.innerHTML = msg;
-        this.el.length.textContent = String(this.ts.word.length);
-        this.el.stepNo.textContent = String(this.ts.step);
-      },
-
-      renderTape(last) {
-        if (!this.ts) { this.el.tape.textContent = ''; return; }
-        const m = this.ts.m;
-        const word = this.ts.word;
-        const prev = last || this.ts.history[this.ts.history.length - 1];
-        const removed = prev?.removed ?? '';
-        const appended = prev?.appended ?? '';
-        const kill = (removed || '').padEnd(m, ' ');
-        // Build a small narration line
-        const narr = prev?.step ? `Step ${prev.step}: delete "${removed}" append "${appended}"` : 'Initial';
-        const left = kill ? `<span class="kill">${kill}</span>` : '';
-        const right = appended ? ` ⟶ <span class="append">${appended}</span>` : '';
-        const current = word.replace(/ /g, '·');
-        this.el.tape.innerHTML = `${narr}\n${left}${current}${right}`;
-      },
-
-      appendHistory(entry) {
-        const div = document.createElement('div');
-        div.className = 'row';
-        const label = document.createElement('div');
-        label.textContent = String(entry.step).padStart(4, ' ');
-        const content = document.createElement('div');
-        const action = entry.event === 'loop' ? ' (loop)' : '';
-        content.textContent = `del:"${entry.removed}" look:"${entry.looked}" add:"${entry.appended}" -> ${entry.result}${action}`;
-        div.appendChild(label); div.appendChild(content);
-        this.el.history.appendChild(div);
-        this.el.history.scrollTop = this.el.history.scrollHeight;
-      },
-
-      refreshLegend() {
-        const rules = parseRules(this.el.rules.value);
-        const syms = uniqueSymbolsFrom(rules, this.el.init.value);
-        this.colors.clear();
-        for (const s of syms) this.colors.set(s, colorFor(s));
-        const frag = document.createDocumentFragment();
-        for (const s of syms) {
-          const chip = document.createElement('span');
-          chip.className = 'chip';
-          chip.innerHTML = `<span class="swatch" style="background:${this.colors.get(s)}"></span><span>${s}</span>`;
-          frag.appendChild(chip);
-        }
-        this.el.legend.innerHTML = '';
-        this.el.legend.appendChild(frag);
-        this.drawEvolution(true);
-      },
-
-      drawEvolution(clearOnly = false) {
-        const c = this.el.canvas; const ctx = this.ctx;
-        const DPR = Math.max(1, Math.floor(window.devicePixelRatio || 1));
-        const pxW = c.clientWidth * DPR; const pxH = c.clientHeight * DPR;
-        if (c.width !== pxW || c.height !== pxH) { c.width = pxW; c.height = pxH; }
-        ctx.clearRect(0,0,pxW,pxH);
-        if (clearOnly || !this.ts) return;
-        // Render each history row as colored cells. Left aligned like NKS figures.
-        const rowH = 12 * DPR; const gap = 2 * DPR; const cell = 8 * DPR; const cellGap = 1 * DPR;
-        const maxRows = Math.floor((pxH - gap) / (rowH + gap));
-        const history = this.ts.history.slice(-maxRows);
-        let y = gap;
-        for (const h of history) {
-          const str = h.result;
-          let x = gap;
-          for (const ch of str) {
-            const col = this.colors.get(ch) || '#39414f';
-            ctx.fillStyle = col;
-            ctx.fillRect(x, y, cell, cell);
-            x += cell + cellGap;
-            if (x > pxW - cell - gap) break; // clip
-          }
-          y += rowH + gap;
-          if (y > pxH - rowH) break;
-        }
-      }
-    };
-
-    window.addEventListener('DOMContentLoaded', () => App.mount());
-  </script>
+  <meta charset="utf-8" />
+  <meta http-equiv="refresh" content="0; url=tag-system-demo.html" />
+  <title>Tag System Demonstration</title>
 </head>
 <body>
-  <div class="wrap">
-    <header>
-      <h1>Tag System (NKS‑style) Demo</h1>
-      <p>
-        A tag system evolves a word by: (1) looking at the first symbol, appending a string determined by it, then (2) deleting a fixed number m of symbols from the front. Repeat until the word is shorter than m (halts) or a loop occurs.
-      </p>
-    </header>
-
-    <div class="grid">
-      <section class="panel">
-        <h2>Setup</h2>
-        <div class="row inline">
-          <label for="m">Deletion number m</label>
-          <input id="m" type="number" min="1" value="2" />
-        </div>
-        <div class="row">
-          <label for="rules">Rules (one per line: A -> AB)</label>
-          <textarea id="rules" spellcheck="false" placeholder="A -> AB
-B -> A"></textarea>
-        </div>
-        <div class="row">
-          <label for="init">Initial word</label>
-          <input id="init" type="text" value="AAA" spellcheck="false" />
-        </div>
-
-        <div class="row">
-          <div class="controls">
-            <button id="run" class="primary">Run</button>
-            <button id="pause">Pause</button>
-            <button id="step">Step</button>
-            <button id="reset" class="danger">Reset</button>
-          </div>
-        </div>
-        <div class="row inline">
-          <label for="speed">Speed (ms/step)</label>
-          <input id="speed" type="number" min="10" step="10" value="120" />
-          <button id="share" class="accent">Share URL</button>
-        </div>
-
-        <div class="row">
-          <label>Examples</label>
-          <select id="examples"></select>
-        </div>
-
-        <div class="row status">
-          <div>Status: <b id="status">Ready</b></div>
-          <div>Step: <b id="stepNo">–</b></div>
-          <div>Length: <b id="length">–</b></div>
-        </div>
-
-        <div class="row">
-          <label>Alphabet</label>
-          <div id="legend" class="legend"></div>
-        </div>
-        <div class="hint">Undefined symbols simply append nothing.</div>
-      </section>
-
-      <section class="panel">
-        <h2>Current State</h2>
-        <div id="tape" class="tape">Define a system and press Run.</div>
-
-        <h2>Evolution (rows over time)</h2>
-        <canvas id="evo" width="800" height="280"></canvas>
-
-        <h2>History</h2>
-        <div id="history" class="hist"></div>
-        <div class="footer note">Loop detection is based on previously seen words; when the same word reappears, the demo stops.</div>
-      </section>
-    </div>
-  </div>
+  <p>This page now redirects to <a href="tag-system-demo.html">tag-system-demo.html</a>, which reproduces the Chapter&nbsp;3 tag system example.</p>
 </body>
 </html>
diff --git a/demos/chapter3/three-color-ca-demo-standalone.html b/demos/chapter3/three-color-ca-demo-standalone.html
index 3f77be70ceb4f7f271c175687864a6ede9357e99..c6d3773d173e9b09019dd03cb790c2f7f0538f29 100644
--- a/demos/chapter3/three-color-ca-demo-standalone.html
+++ b/demos/chapter3/three-color-ca-demo-standalone.html
@@ -1,429 +1,493 @@
-<!doctype html>
+<!DOCTYPE html>
 <html lang="en">
-  <head>
-    <meta charset="utf-8" />
-    <meta name="viewport" content="width=device-width, initial-scale=1" />
-    <title>3‑Color Cellular Automata — Standalone Demo</title>
-    <style>
-      :root {
-        --bg: #0f1116;
-        --panel: #171923;
-        --muted: #8a93a6;
-        --text: #e6e8ef;
-        --accent: #60a5fa;
-        --ok: #34d399;
-        --warn: #fbbf24;
+<head>
+  <meta charset="utf-8" />
+  <meta name="viewport" content="width=device-width, initial-scale=1" />
+  <title>3-Color Totalistic Cellular Automaton (Standalone)</title>
+  <style>
+    :root {
+      color-scheme: light dark;
+      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
+    }
+
+    body {
+      margin: 0;
+      padding: 24px;
+      background: #f5f5f5;
+      color: #202124;
+    }
+
+    header {
+      max-width: 880px;
+      margin: 0 auto 24px auto;
+    }
+
+    h1 {
+      font-size: 1.9rem;
+      margin: 0 0 4px 0;
+      font-weight: 600;
+    }
+
+    header p {
+      margin: 4px 0 0 0;
+      max-width: 60ch;
+      line-height: 1.5;
+      color: #555;
+    }
+
+    main {
+      max-width: 960px;
+      margin: 0 auto;
+      display: grid;
+      grid-template-columns: 320px 1fr;
+      gap: 18px;
+    }
+
+    @media (max-width: 900px) {
+      main {
+        grid-template-columns: 1fr;
       }
-      * { box-sizing: border-box; }
-      html, body {
-        margin: 0; padding: 0; height: 100%; color: var(--text); background: var(--bg);
-        font: 14px/1.4 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica, Arial;
-      }
-      header {
-        padding: 16px 20px; border-bottom: 1px solid #24283a; background: linear-gradient(180deg, #141825, #101421);
-      }
-      header h1 { margin: 0 0 6px; font-size: 18px; }
-      header p { margin: 0; color: var(--muted); font-size: 13px; }
-      .container { display: grid; grid-template-columns: 320px 1fr; height: calc(100% - 72px); }
-      .controls {
-        padding: 14px; border-right: 1px solid #24283a; background: var(--panel); overflow: auto;
-      }
-      .group { margin-bottom: 14px; }
-      .group h2 { margin: 0 0 8px; font-size: 13px; color: var(--muted); font-weight: 600; letter-spacing: .02em; }
-      .row { display: flex; align-items: center; gap: 8px; margin: 6px 0; }
-      .row label { min-width: 90px; color: var(--muted); font-size: 12px; }
-      input[type="number"], input[type="text"], select {
-        width: 100%; padding: 6px 8px; border-radius: 6px; border: 1px solid #2a2f45; background: #0f1320; color: var(--text);
-      }
-      input[type="range"] { width: 100%; }
-      input[type="checkbox"] { transform: translateY(1px); }
-      input[type="color"] {
-        appearance: none; width: 32px; height: 24px; border: 1px solid #2a2f45; border-radius: 4px; background: none; padding: 0;
-      }
-      .buttons { display: flex; gap: 8px; flex-wrap: wrap; }
-      button {
-        padding: 6px 10px; border: 1px solid #2a2f45; border-radius: 6px; background: #0e1322; color: var(--text);
-        cursor: pointer;
-      }
-      button.primary { background: #1b243b; border-color: #2f3a57; }
-      button:active { transform: translateY(1px); }
-      .meta { color: var(--muted); font-size: 12px; }
-      .canvas-wrap { position: relative; overflow: auto; height: 100%; background: #0a0d17; }
-      canvas { display: block; image-rendering: pixelated; }
-      .footer { padding: 10px 14px; border-top: 1px solid #24283a; color: var(--muted); font-size: 12px; }
-      code { background: #0e1322; padding: 1px 4px; border-radius: 4px; border: 1px solid #2a2f45; }
-    </style>
-  </head>
-  <body>
-    <header>
-      <h1>3‑Color Cellular Automata — Standalone Demo</h1>
-      <p>1D, radius‑1, 3 states {0,1,2}. Rule encoded as a base‑3 integer over all 27 neighborhoods (L,C,R) → output.</p>
-    </header>
-    <div class="container">
-      <aside class="controls">
-        <div class="group">
-          <h2>Run</h2>
-          <div class="row buttons">
-            <button id="playPause" class="primary">Play</button>
-            <button id="step">Step</button>
-            <button id="reset">Reset</button>
-          </div>
-          <div class="row">
-            <label for="speed">Speed</label>
-            <input id="speed" type="range" min="1" max="120" step="1" value="30" />
-            <span class="meta" id="speedLabel">30 gen/s</span>
-          </div>
-          <div class="row">
-            <label>Generation</label>
-            <span id="genLabel" class="meta">0</span>
-          </div>
+    }
+
+    .panel {
+      background: #fff;
+      border: 1px solid #d0d0d0;
+      border-radius: 8px;
+      padding: 16px;
+      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
+    }
+
+    .panel h2 {
+      margin: 0 0 12px 0;
+      font-size: 1.1rem;
+      font-weight: 600;
+      color: #1a73e8;
+    }
+
+    .controls form {
+      display: grid;
+      gap: 12px;
+    }
+
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 6px;
+      font-size: 0.9rem;
+    }
+
+    select,
+    input[type="number"],
+    input[type="text"],
+    input[type="range"] {
+      padding: 6px 8px;
+      border-radius: 6px;
+      border: 1px solid #c2c2c2;
+      font-size: 0.95rem;
+      font-family: inherit;
+      background: #fff;
+      color: inherit;
+    }
+
+    input[type="number"] {
+      -moz-appearance: textfield;
+    }
+
+    input[type="number"]::-webkit-outer-spin-button,
+    input[type="number"]::-webkit-inner-spin-button {
+      -webkit-appearance: none;
+      margin: 0;
+    }
+
+    button {
+      padding: 7px 12px;
+      border-radius: 6px;
+      border: 1px solid #3367d6;
+      background: #1a73e8;
+      color: #fff;
+      font-weight: 600;
+      cursor: pointer;
+      font-family: inherit;
+      transition: background 0.2s ease;
+    }
+
+    button.secondary {
+      background: #fff;
+      color: #1a73e8;
+    }
+
+    button:disabled {
+      opacity: 0.55;
+      cursor: default;
+    }
+
+    .button-row {
+      display: flex;
+      flex-wrap: wrap;
+      gap: 8px;
+    }
+
+    .slider-row {
+      display: flex;
+      align-items: center;
+      gap: 12px;
+    }
+
+    .slider-row span {
+      font-size: 0.85rem;
+      color: #5f6368;
+      min-width: 56px;
+    }
+
+    canvas {
+      width: 100%;
+      height: auto;
+      border: 1px solid #d0d0d0;
+      border-radius: 4px;
+      background: #000;
+      image-rendering: pixelated;
+      display: block;
+    }
+
+    .rule-table {
+      display: grid;
+      grid-template-columns: repeat(7, minmax(0, 1fr));
+      gap: 6px;
+      font-size: 0.8rem;
+      margin-top: 12px;
+    }
+
+    .rule-cell {
+      border: 1px solid #d0d0d0;
+      border-radius: 4px;
+      text-align: center;
+      padding: 6px 4px;
+      line-height: 1.3;
+    }
+
+    .status {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
+      gap: 8px;
+      margin-top: 12px;
+      font-size: 0.9rem;
+      color: #3c4043;
+    }
+
+    .status dt {
+      font-weight: 600;
+      color: #1a73e8;
+    }
+
+    .status dd {
+      margin: 0;
+    }
+
+    .notice {
+      font-size: 0.85rem;
+      margin-top: 10px;
+      line-height: 1.4;
+      color: #5f6368;
+    }
+  </style>
+</head>
+<body>
+  <header>
+    <h1>3-Color Totalistic Cellular Automaton (Standalone)</h1>
+    <p>
+      This standalone copy mirrors the Chapter&nbsp;3 demonstration from
+      <em>A New Kind of Science</em>. It evolves a one-dimensional, radius-1,
+      three-color totalistic cellular automaton where the next state of a cell
+      depends only on the sum of its own value and its two neighbors.
+    </p>
+  </header>
+
+  <main>
+    <section class="panel controls">
+      <h2>Controls</h2>
+      <form id="controlForm">
+        <label>
+          Preset rule
+          <select id="presetRule">
+            <option value="777">Rule 777 — complex</option>
+            <option value="600">Rule 600 — triangular</option>
+            <option value="924">Rule 924 — nested</option>
+            <option value="1059">Rule 1059 — fractal-like</option>
+            <option value="1545">Rule 1545 — random</option>
+            <option value="1635">Rule 1635 — periodic</option>
+            <option value="custom">Custom…</option>
+          </select>
+        </label>
+
+        <label id="customRuleRow" hidden>
+          Custom rule number (0 – 2186)
+          <input type="number" id="customRule" min="0" max="2186" value="777" />
+        </label>
+
+        <label>
+          Initial condition
+          <select id="initialSeed">
+            <option value="single">Single black cell</option>
+            <option value="three">Three random cells</option>
+            <option value="random">Random 30%</option>
+            <option value="gradient">Color gradient</option>
+          </select>
+        </label>
+
+        <label class="slider-row">
+          <span>Speed</span>
+          <input type="range" id="speed" min="40" max="600" step="20" value="200" />
+          <span id="speedLabel">200 ms</span>
+        </label>
+
+        <div class="button-row">
+          <button type="button" id="runBtn">Run</button>
+          <button type="button" id="stepBtn" class="secondary">Step</button>
+          <button type="button" id="resetBtn" class="secondary">Reset</button>
         </div>
+      </form>
 
-        <div class="group">
-          <h2>Grid</h2>
-          <div class="row">
-            <label for="width">Width</label>
-            <input id="width" type="number" min="16" max="2048" step="1" value="256" />
-          </div>
-          <div class="row">
-            <label for="cellSize">Cell Size</label>
-            <input id="cellSize" type="range" min="2" max="10" value="3" />
-            <span class="meta" id="cellSizeLabel">3 px</span>
-          </div>
-          <div class="row">
-            <label for="wrap">Wrap</label>
-            <input id="wrap" type="checkbox" checked />
-          </div>
-          <div class="row">
-            <label for="initMode">Initial Row</label>
-            <select id="initMode">
-              <option value="single" selected>Single 1 in center</option>
-              <option value="random">Random</option>
-            </select>
-            <button id="randomizeInit">Randomize</button>
-          </div>
+      <dl class="status">
+        <div>
+          <dt>Generation</dt>
+          <dd id="generationCount">0</dd>
         </div>
-
-        <div class="group">
-          <h2>Rule</h2>
-          <div class="row">
-            <label for="ruleNumber">Base‑10</label>
-            <input id="ruleNumber" type="number" min="0" step="1" />
-            <button id="randomizeRule">Random</button>
-          </div>
-          <div class="row">
-            <label for="ruleBase3">Base‑3 (27 digits)</label>
-            <input id="ruleBase3" type="text" placeholder="digits[26]..digits[0]" />
-          </div>
-          <div class="meta">
-            Mapping: index = L×9 + C×3 + R; digits[0] → (0,0,0), digits[26] → (2,2,2).
-          </div>
+        <div>
+          <dt>White / Gray / Black</dt>
+          <dd id="population">0 · 0 · 0</dd>
         </div>
-
-        <div class="group">
-          <h2>Colors</h2>
-          <div class="row">
-            <label>State 0</label>
-            <input id="color0" type="color" value="#000000" />
-            <label>1</label>
-            <input id="color1" type="color" value="#ffcc00" />
-            <label>2</label>
-            <input id="color2" type="color" value="#00aaff" />
-          </div>
+        <div>
+          <dt>Rule (base 3)</dt>
+          <dd id="ruleTernary">0000000</dd>
         </div>
-      </aside>
-
-      <main class="canvas-wrap">
-        <canvas id="ca"></canvas>
-      </main>
-    </div>
-
-    <div class="footer">
-      Notes: This implements a 1D, radius‑1, 3‑state CA. The rule number is interpreted as a base‑3 integer of 27 digits.
-      For a neighborhood (L,C,R) with states in {0,1,2}, its index is L×9 + C×3 + R. The output state is the base‑3 digit at that index.
-    </div>
-
-    <script>
-      (function() {
-        'use strict';
-
-        function clamp(n, lo, hi) { return Math.max(lo, Math.min(hi, n)); }
-
-        function numberToBase3Digits(num, length = 27) {
-          const digits = new Array(length).fill(0);
-          let n = Math.floor(Number(num));
-          if (!Number.isFinite(n) || n < 0) n = 0;
-          for (let i = 0; i < length && n > 0; i++) {
-            digits[i] = (n % 3) | 0; // digits[0] corresponds to (0,0,0)
-            n = Math.floor(n / 3);
-          }
-          return digits;
-        }
-
-        function digitsToNumber(digits) {
-          let n = 0; let pow = 1;
-          for (let i = 0; i < digits.length; i++) { n += pow * (digits[i] | 0); pow *= 3; }
-          return n;
-        }
-
-        function digitsToString(digits) {
-          return digits.slice().reverse().join(''); // high → low
-        }
-
-        function stringToDigits(str) {
-          const s = (str || '').trim().replace(/[^012]/g, '');
-          const out = new Array(27).fill(0);
-          // s[0] is most significant (for (2,2,2)), s[last] is for (0,0,0)
-          let j = 26;
-          for (let i = 0; i < s.length && j >= 0; i++, j--) {
-            const c = s[i]; out[j] = c === '2' ? 2 : c === '1' ? 1 : 0;
-          }
-          return out;
-        }
-
-        class ThreeColorCA {
-          constructor(opts) {
-            this.width = opts.width | 0;
-            this.wrap = !!opts.wrap;
-            this.ruleDigits = numberToBase3Digits(opts.ruleNumber ?? 0, 27);
-            this.generation = 0;
-            this.rows = [];
-            this.state = new Int8Array(this.width);
-            const init = opts.initial || 'single';
-            if (init === 'single') {
-              this.state[(this.width / 2) | 0] = 1;
-            } else if (init === 'random') {
-              for (let i = 0; i < this.width; i++) this.state[i] = (Math.random() * 3) | 0;
-            } else if (Array.isArray(opts.initialState)) {
-              for (let i = 0; i < this.width && i < opts.initialState.length; i++) this.state[i] = opts.initialState[i] | 0;
-            }
-            this.rows.push(this.state.slice());
-          }
-          setRuleNumber(n) {
-            this.ruleDigits = numberToBase3Digits(n, 27);
-          }
-          setWrap(wrap) { this.wrap = !!wrap; }
-          step() {
-            const w = this.width; const next = new Int8Array(w); const curr = this.state; const digits = this.ruleDigits;
-            for (let x = 0; x < w; x++) {
-              const c = curr[x];
-              const l = (x === 0 ? (this.wrap ? curr[w - 1] : 0) : curr[x - 1]);
-              const r = (x === w - 1 ? (this.wrap ? curr[0] : 0) : curr[x + 1]);
-              const idx = l * 9 + c * 3 + r;
-              next[x] = digits[idx];
-            }
-            this.state = next; this.rows.push(next.slice()); this.generation++;
-            return next;
-          }
-          reset(width, initMode) {
-            if (width != null) this.width = width | 0;
-            this.generation = 0; this.rows = []; this.state = new Int8Array(this.width);
-            const init = initMode || 'single';
-            if (init === 'single') { this.state[(this.width / 2) | 0] = 1; }
-            else if (init === 'random') { for (let i = 0; i < this.width; i++) this.state[i] = (Math.random() * 3) | 0; }
-            this.rows.push(this.state.slice());
-          }
-        }
-
-        class CanvasRenderer {
-          constructor(canvas, colors, cellSize = 3) {
-            this.canvas = canvas;
-            this.ctx = canvas.getContext('2d', { alpha: false });
-            this.colors = colors || ['#000000', '#ffcc00', '#00aaff'];
-            this.cellSize = cellSize | 0;
+      </dl>
+
+      <p class="notice">
+        The table below lists the output color for each possible neighbor sum.
+        Totals 0–6 correspond to averages 0, 1/3, 2/3, 1, 4/3, 5/3 and 2, just
+        as shown in the original NKS demonstration.
+      </p>
+
+      <div class="rule-table" id="ruleTable"></div>
+    </section>
+
+    <section class="panel">
+      <h2>Evolution</h2>
+      <canvas id="caCanvas" width="151" height="150" aria-label="3-color cellular automaton"></canvas>
+    </section>
+  </main>
+
+  <script>
+    const WIDTH = 151;
+    const HEIGHT = 150;
+
+    const presetSelect = document.getElementById('presetRule');
+    const customRow = document.getElementById('customRuleRow');
+    const customInput = document.getElementById('customRule');
+    const seedSelect = document.getElementById('initialSeed');
+    const speedInput = document.getElementById('speed');
+    const speedLabel = document.getElementById('speedLabel');
+    const runBtn = document.getElementById('runBtn');
+    const stepBtn = document.getElementById('stepBtn');
+    const resetBtn = document.getElementById('resetBtn');
+    const generationLabel = document.getElementById('generationCount');
+    const populationLabel = document.getElementById('population');
+    const ruleTernaryLabel = document.getElementById('ruleTernary');
+    const ruleTableContainer = document.getElementById('ruleTable');
+
+    const canvas = document.getElementById('caCanvas');
+    const ctx = canvas.getContext('2d');
+
+    let ruleNumber = 777;
+    let ruleTable = buildRuleTable(ruleNumber);
+    let rows = createEmptyRows();
+    let currentGeneration = 0;
+    let timer = null;
+
+    function createEmptyRows() {
+      return Array.from({ length: HEIGHT }, () => new Array(WIDTH).fill(0));
+    }
+
+    function buildRuleTable(number) {
+      const n = Math.max(0, Math.min(2186, Math.floor(Number(number) || 0)));
+      const digits = n.toString(3).padStart(7, '0');
+      const table = new Array(7).fill(0);
+      for (let i = 0; i < 7; i++) {
+        table[i] = Number(digits[6 - i]);
+      }
+      ruleNumber = n;
+      return table;
+    }
+
+    function applySeed(mode) {
+      rows = createEmptyRows();
+      const center = Math.floor(WIDTH / 2);
+      switch (mode) {
+        case 'single':
+          rows[0][center] = 2;
+          break;
+        case 'three':
+          for (let offset = -1; offset <= 1; offset++) {
+            rows[0][center + offset] = Math.floor(Math.random() * 3);
           }
-          setColors(colors) { this.colors = colors.slice(0, 3); }
-          setCellSize(px) { this.cellSize = clamp(px | 0, 1, 20); }
-          drawAll(rows) {
-            if (!rows.length) return;
-            const wCells = rows[0].length; const hCells = rows.length; const cs = this.cellSize;
-            const canvas = this.canvas; const ctx = this.ctx; ctx.imageSmoothingEnabled = false;
-            canvas.width = wCells * cs; canvas.height = hCells * cs;
-            // Build 1:1 ImageData, then scale drawImage for crisp pixels
-            const img = ctx.createImageData(wCells, hCells);
-            const palette = this.colors.map(hexToRGBA);
-            for (let y = 0; y < hCells; y++) {
-              const row = rows[y];
-              for (let x = 0; x < wCells; x++) {
-                const v = row[x] | 0; const rgba = palette[v] || [0, 0, 0, 255];
-                const i = (y * wCells + x) * 4; img.data[i] = rgba[0]; img.data[i + 1] = rgba[1]; img.data[i + 2] = rgba[2]; img.data[i + 3] = 255;
-              }
-            }
-            const temp = document.createElement('canvas'); temp.width = wCells; temp.height = hCells;
-            temp.getContext('2d').putImageData(img, 0, 0);
-            ctx.clearRect(0, 0, canvas.width, canvas.height);
-            ctx.drawImage(temp, 0, 0, wCells, hCells, 0, 0, wCells * cs, hCells * cs);
+          break;
+        case 'random':
+          for (let x = 0; x < WIDTH; x++) {
+            rows[0][x] = Math.random() < 0.3 ? Math.floor(Math.random() * 3) : 0;
           }
-          appendRow(row, yIndex) {
-            const wCells = row.length; const cs = this.cellSize; const canvas = this.canvas; const ctx = this.ctx; ctx.imageSmoothingEnabled = false;
-            // If width or height changed, redraw full for simplicity
-            if (canvas.width !== wCells * cs || canvas.height < (yIndex + 1) * cs) {
-              // Expand and redraw entire content is handled externally via drawAll
-              return false;
-            }
-            for (let x = 0; x < wCells; x++) {
-              ctx.fillStyle = this.colors[row[x]];
-              ctx.fillRect(x * cs, yIndex * cs, cs, cs);
-            }
-            return true;
+          break;
+        case 'gradient':
+          for (let x = 0; x < WIDTH; x++) {
+            const ratio = x / (WIDTH - 1);
+            rows[0][x] = Math.min(2, Math.floor(ratio * 3));
           }
-        }
+          break;
+      }
+      currentGeneration = 0;
+      stop();
+      redrawAll();
+      updateStatus();
+    }
+
+    function evolveOnce() {
+      if (currentGeneration >= HEIGHT - 1) {
+        stop();
+        return false;
+      }
 
-        function hexToRGBA(hex) {
-          let h = (hex || '#000000').replace('#', '').trim();
-          if (h.length === 3) h = h.split('').map(c => c + c).join('');
-          const r = parseInt(h.slice(0, 2), 16) || 0;
-          const g = parseInt(h.slice(2, 4), 16) || 0;
-          const b = parseInt(h.slice(4, 6), 16) || 0;
-          return [r, g, b, 255];
-        }
+      const prev = rows[currentGeneration];
+      const next = rows[currentGeneration + 1];
+      const wrap = true;
 
-        // UI elements
-        const els = {
-          canvas: document.getElementById('ca'),
-          width: document.getElementById('width'),
-          cellSize: document.getElementById('cellSize'),
-          cellSizeLabel: document.getElementById('cellSizeLabel'),
-          ruleNumber: document.getElementById('ruleNumber'),
-          ruleBase3: document.getElementById('ruleBase3'),
-          wrap: document.getElementById('wrap'),
-          initMode: document.getElementById('initMode'),
-          playPause: document.getElementById('playPause'),
-          step: document.getElementById('step'),
-          reset: document.getElementById('reset'),
-          randomizeRule: document.getElementById('randomizeRule'),
-          randomizeInit: document.getElementById('randomizeInit'),
-          speed: document.getElementById('speed'),
-          speedLabel: document.getElementById('speedLabel'),
-          color0: document.getElementById('color0'),
-          color1: document.getElementById('color1'),
-          color2: document.getElementById('color2'),
-          genLabel: document.getElementById('genLabel'),
-        };
-
-        // Defaults
-        const DEFAULT_RULE = (() => {
-          // A small, hand-crafted base-3 string of length 27 to start with (symmetric-ish)
-          // This is arbitrary, intended only to show structure.
-          const s = '210120012001200120012001200'; // 27 digits
-          const digits = stringToDigits(s);
-          return digitsToNumber(digits);
-        })();
-
-        const colors = [els.color0.value, els.color1.value, els.color2.value];
-        const ca = new ThreeColorCA({ width: +els.width.value, wrap: els.wrap.checked, ruleNumber: DEFAULT_RULE, initial: 'single' });
-        const renderer = new CanvasRenderer(els.canvas, colors, +els.cellSize.value);
-
-        // Initialize UI fields for rule
-        function refreshRuleInputsFromDigits() {
-          const digits = ca.ruleDigits;
-          els.ruleNumber.value = String(digitsToNumber(digits));
-          els.ruleBase3.value = digitsToString(digits);
-        }
+      for (let x = 0; x < WIDTH; x++) {
+        const left = prev[(x - 1 + WIDTH) % WIDTH];
+        const center = prev[x];
+        const right = prev[(x + 1) % WIDTH];
+        const sum = left + center + right;
+        next[x] = ruleTable[sum];
+      }
 
-        refreshRuleInputsFromDigits();
-        renderer.drawAll(ca.rows);
-
-        // Animation loop
-        let running = false; let rafId = 0; let lastTime = 0; let msPerGen = 1000 / (+els.speed.value);
-
-        function loop(t) {
-          if (!running) return;
-          if (!lastTime) lastTime = t;
-          const dt = t - lastTime;
-          if (dt >= msPerGen) {
-            const steps = Math.max(1, Math.floor(dt / msPerGen));
-            for (let i = 0; i < steps; i++) {
-              ca.step();
-              // Try incremental append; if geometry changed, redraw all
-              if (!renderer.appendRow(ca.state, ca.generation)) {
-                renderer.drawAll(ca.rows);
-              }
-            }
-            lastTime = t;
-            els.genLabel.textContent = String(ca.generation);
-            // autoscroll to bottom
-            const wrap = els.canvas.parentElement; wrap.scrollTop = wrap.scrollHeight;
-          }
-          rafId = requestAnimationFrame(loop);
-        }
+      currentGeneration += 1;
+      drawRow(currentGeneration);
+      updateStatus();
+      return true;
+    }
+
+    function drawRow(rowIndex) {
+      const row = rows[rowIndex];
+      for (let x = 0; x < WIDTH; x++) {
+        const value = row[x];
+        ctx.fillStyle = value === 0 ? '#ffffff' : value === 1 ? '#888888' : '#000000';
+        ctx.fillRect(x, rowIndex, 1, 1);
+      }
+    }
 
-        function start() {
-          if (running) return;
-          running = true; lastTime = 0; els.playPause.textContent = 'Pause'; rafId = requestAnimationFrame(loop);
-        }
-        function stop() {
-          running = false; els.playPause.textContent = 'Play'; if (rafId) cancelAnimationFrame(rafId);
-        }
+    function redrawAll() {
+      ctx.fillStyle = '#000000';
+      ctx.fillRect(0, 0, WIDTH, HEIGHT);
+      for (let g = 0; g <= currentGeneration; g++) {
+        drawRow(g);
+      }
+    }
 
-        // Handlers
-        els.playPause.addEventListener('click', () => { running ? stop() : start(); });
-        els.step.addEventListener('click', () => {
-          stop(); ca.step(); els.genLabel.textContent = String(ca.generation);
-          if (!renderer.appendRow(ca.state, ca.generation)) renderer.drawAll(ca.rows);
-          const wrap = els.canvas.parentElement; wrap.scrollTop = wrap.scrollHeight;
-        });
-        els.reset.addEventListener('click', () => {
-          stop(); ca.reset(+els.width.value, els.initMode.value);
-          renderer.setCellSize(+els.cellSize.value); renderer.drawAll(ca.rows); els.genLabel.textContent = '0';
-        });
-
-        els.speed.addEventListener('input', () => {
-          const s = clamp(+els.speed.value || 1, 1, 240); els.speedLabel.textContent = s + ' gen/s';
-          msPerGen = 1000 / s;
-        });
-
-        els.width.addEventListener('change', () => { /* apply on reset */ });
-        els.cellSize.addEventListener('input', () => {
-          const px = clamp(+els.cellSize.value || 3, 1, 20); els.cellSizeLabel.textContent = px + ' px';
-          renderer.setCellSize(px); renderer.drawAll(ca.rows);
-        });
-        els.wrap.addEventListener('change', () => { ca.setWrap(els.wrap.checked); });
-        els.initMode.addEventListener('change', () => { /* apply on reset */ });
-
-        els.randomizeInit.addEventListener('click', () => {
-          stop(); ca.reset(+els.width.value, 'random'); renderer.drawAll(ca.rows); els.genLabel.textContent = '0';
-        });
-
-        // Rule inputs
-        function applyRuleNumber(n) {
-          n = Math.floor(Math.max(0, Math.min(n, Math.pow(3, 27) - 1)));
-          ca.setRuleNumber(n); refreshRuleInputsFromDigits();
-        }
+    function updateStatus() {
+      generationLabel.textContent = currentGeneration;
 
-        els.ruleNumber.addEventListener('input', () => {
-          const v = +els.ruleNumber.value; if (Number.isFinite(v)) applyRuleNumber(v);
-        });
-        els.ruleBase3.addEventListener('input', () => {
-          const digits = stringToDigits(els.ruleBase3.value);
-          const n = digitsToNumber(digits); applyRuleNumber(n);
-        });
-        els.randomizeRule.addEventListener('click', () => {
-          // 0 .. 3^27 - 1 (<= 7.625e12) fits in JS Number safely
-          const max = Math.pow(3, 27);
-          const n = Math.floor(Math.random() * max);
-          applyRuleNumber(n);
-        });
-
-        // Color changes
-        function refreshPalette() {
-          renderer.setColors([els.color0.value, els.color1.value, els.color2.value]);
-          renderer.drawAll(ca.rows);
+      let counts = [0, 0, 0];
+      for (let g = 0; g <= currentGeneration; g++) {
+        for (let x = 0; x < WIDTH; x++) {
+          counts[rows[g][x]] += 1;
         }
-        els.color0.addEventListener('input', refreshPalette);
-        els.color1.addEventListener('input', refreshPalette);
-        els.color2.addEventListener('input', refreshPalette);
-
-        // Keyboard shortcuts
-        window.addEventListener('keydown', (e) => {
-          if (e.target && (e.target.tagName === 'INPUT' || e.target.tagName === 'SELECT' || e.target.tagName === 'TEXTAREA')) return;
-          if (e.code === 'Space') { e.preventDefault(); running ? stop() : start(); }
-          else if (e.key === 'r') { e.preventDefault(); els.reset.click(); }
-          else if (e.key === 's') { e.preventDefault(); els.step.click(); }
-        });
-
-      })();
-    </script>
-  </body>
-  </html>
+      }
+      populationLabel.textContent = counts.join(' · ');
+      ruleTernaryLabel.textContent = ruleNumber.toString(3).padStart(7, '0');
+    }
+
+    function updateRuleTableDisplay() {
+      const averages = ['0', '1/3', '2/3', '1', '4/3', '5/3', '2'];
+      ruleTableContainer.innerHTML = '';
+      for (let i = 0; i < 7; i++) {
+        const cell = document.createElement('div');
+        cell.className = 'rule-cell';
+        cell.textContent = `${averages[i]} → ${ruleTable[i]}`;
+        cell.style.background = ruleTable[i] === 0 ? '#ffffff' : ruleTable[i] === 1 ? '#888888' : '#000000';
+        cell.style.color = ruleTable[i] === 0 ? '#202124' : '#ffffff';
+        ruleTableContainer.appendChild(cell);
+      }
+    }
+
+    function run() {
+      if (timer) return;
+      const delay = Number(speedInput.value);
+      timer = setInterval(() => {
+        const ok = evolveOnce();
+        if (!ok) stop();
+      }, delay);
+      runBtn.textContent = 'Stop';
+    }
+
+    function stop() {
+      if (timer) {
+        clearInterval(timer);
+        timer = null;
+      }
+      runBtn.textContent = 'Run';
+    }
+
+    presetSelect.addEventListener('change', () => {
+      if (presetSelect.value === 'custom') {
+        customRow.hidden = false;
+        customInput.focus();
+      } else {
+        customRow.hidden = true;
+        customInput.value = presetSelect.value;
+        ruleTable = buildRuleTable(presetSelect.value);
+        updateRuleTableDisplay();
+        applySeed(seedSelect.value);
+      }
+    });
+
+    customInput.addEventListener('input', () => {
+      const value = Number(customInput.value);
+      ruleTable = buildRuleTable(value);
+      updateRuleTableDisplay();
+      applySeed(seedSelect.value);
+    });
+
+    seedSelect.addEventListener('change', () => {
+      applySeed(seedSelect.value);
+    });
+
+    speedInput.addEventListener('input', () => {
+      speedLabel.textContent = `${speedInput.value} ms`;
+      if (timer) {
+        stop();
+        run();
+      }
+    });
 
+    runBtn.addEventListener('click', () => {
+      if (timer) {
+        stop();
+      } else {
+        run();
+      }
+    });
+
+    stepBtn.addEventListener('click', () => {
+      stop();
+      evolveOnce();
+    });
+
+    resetBtn.addEventListener('click', () => {
+      applySeed(seedSelect.value);
+    });
+
+    // Initial render
+    updateRuleTableDisplay();
+    applySeed('single');
+    redrawAll();
+    updateStatus();
+  </script>
+</body>
+</html>
diff --git a/demos/chapter3/three-color-ca-demo.html b/demos/chapter3/three-color-ca-demo.html
index c0e8c48e8b86ab68ed9afb2bdcb42843a387aa25..1a2b754c0b8e24a25a03e0a7020517d2f4c7a9e4 100644
--- a/demos/chapter3/three-color-ca-demo.html
+++ b/demos/chapter3/three-color-ca-demo.html
@@ -1,547 +1,493 @@
 <!DOCTYPE html>
 <html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>3-Color Cellular Automata Demo - NKS Explorer</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%);
-            color: #e0e0e0;
-            min-height: 100vh;
-            padding: 20px;
-        }
-
-        .container {
-            max-width: 1200px;
-            margin: 0 auto;
-        }
-
-        .header {
-            text-align: center;
-            margin-bottom: 30px;
-            padding: 20px;
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .header h1 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            font-size: 2.5em;
-            font-weight: 700;
-        }
-
-        .header p {
-            color: #b8b8b8;
-            font-size: 1.1em;
-            line-height: 1.6;
-        }
-
-        .controls {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
-            gap: 20px;
-            margin-bottom: 30px;
-        }
-
-        .control-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .control-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-            font-size: 1.2em;
-        }
-
-        .control-group {
-            margin-bottom: 15px;
-        }
-
-        label {
-            display: block;
-            color: #d0d0d0;
-            margin-bottom: 5px;
-            font-weight: 500;
-        }
-
-        select, input[type="range"], button {
-            width: 100%;
-            padding: 10px;
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            background: rgba(0, 0, 0, 0.3);
-            color: #e0e0e0;
-            font-size: 14px;
-        }
-
-        button {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.2), rgba(255, 215, 0, 0.3));
-            cursor: pointer;
-            transition: all 0.3s ease;
-            margin: 5px 0;
-        }
-
-        button:hover {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.3), rgba(255, 215, 0, 0.4));
-            transform: translateY(-2px);
-            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.2);
-        }
-
-        .canvas-container {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            text-align: center;
-            margin-bottom: 20px;
-        }
-
-        #caCanvas {
-            border: 2px solid rgba(255, 215, 0, 0.3);
-            border-radius: 10px;
-            background: #000;
-            max-width: 100%;
-        }
-
-        .rule-display {
-            display: flex;
-            justify-content: center;
-            align-items: center;
-            gap: 10px;
-            margin-bottom: 15px;
-        }
-
-        .rule-cell {
-            width: 30px;
-            height: 30px;
-            border: 1px solid #ffd700;
-            display: flex;
-            align-items: center;
-            justify-content: center;
-            font-weight: bold;
-            border-radius: 4px;
-        }
-
-        .info-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .info-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-        }
-
-        .info-panel p {
-            color: #d0d0d0;
-            line-height: 1.6;
-            margin-bottom: 10px;
-        }
-
-        .stats {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
-            gap: 15px;
-            margin-top: 15px;
-        }
-
-        .stat-item {
-            text-align: center;
-            padding: 10px;
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 8px;
-        }
-
-        .stat-value {
-            font-size: 1.5em;
-            font-weight: bold;
-            color: #ffd700;
-        }
-
-        .stat-label {
-            font-size: 0.9em;
-            color: #b8b8b8;
-        }
-
-        @media (max-width: 768px) {
-            .controls {
-                grid-template-columns: 1fr;
-            }
-            
-            .header h1 {
-                font-size: 2em;
-            }
-            
-            .rule-cell {
-                width: 25px;
-                height: 25px;
-            }
-        }
-    </style>
+  <meta charset="utf-8" />
+  <meta name="viewport" content="width=device-width, initial-scale=1" />
+  <title>3-Color Totalistic Cellular Automaton</title>
+  <style>
+    :root {
+      color-scheme: light dark;
+      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
+    }
+
+    body {
+      margin: 0;
+      padding: 24px;
+      background: #f5f5f5;
+      color: #202124;
+    }
+
+    header {
+      max-width: 880px;
+      margin: 0 auto 24px auto;
+    }
+
+    h1 {
+      font-size: 1.9rem;
+      margin: 0 0 4px 0;
+      font-weight: 600;
+    }
+
+    header p {
+      margin: 4px 0 0 0;
+      max-width: 60ch;
+      line-height: 1.5;
+      color: #555;
+    }
+
+    main {
+      max-width: 960px;
+      margin: 0 auto;
+      display: grid;
+      grid-template-columns: 320px 1fr;
+      gap: 18px;
+    }
+
+    @media (max-width: 900px) {
+      main {
+        grid-template-columns: 1fr;
+      }
+    }
+
+    .panel {
+      background: #fff;
+      border: 1px solid #d0d0d0;
+      border-radius: 8px;
+      padding: 16px;
+      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
+    }
+
+    .panel h2 {
+      margin: 0 0 12px 0;
+      font-size: 1.1rem;
+      font-weight: 600;
+      color: #1a73e8;
+    }
+
+    .controls form {
+      display: grid;
+      gap: 12px;
+    }
+
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 6px;
+      font-size: 0.9rem;
+    }
+
+    select,
+    input[type="number"],
+    input[type="text"],
+    input[type="range"] {
+      padding: 6px 8px;
+      border-radius: 6px;
+      border: 1px solid #c2c2c2;
+      font-size: 0.95rem;
+      font-family: inherit;
+      background: #fff;
+      color: inherit;
+    }
+
+    input[type="number"] {
+      -moz-appearance: textfield;
+    }
+
+    input[type="number"]::-webkit-outer-spin-button,
+    input[type="number"]::-webkit-inner-spin-button {
+      -webkit-appearance: none;
+      margin: 0;
+    }
+
+    button {
+      padding: 7px 12px;
+      border-radius: 6px;
+      border: 1px solid #3367d6;
+      background: #1a73e8;
+      color: #fff;
+      font-weight: 600;
+      cursor: pointer;
+      font-family: inherit;
+      transition: background 0.2s ease;
+    }
+
+    button.secondary {
+      background: #fff;
+      color: #1a73e8;
+    }
+
+    button:disabled {
+      opacity: 0.55;
+      cursor: default;
+    }
+
+    .button-row {
+      display: flex;
+      flex-wrap: wrap;
+      gap: 8px;
+    }
+
+    .slider-row {
+      display: flex;
+      align-items: center;
+      gap: 12px;
+    }
+
+    .slider-row span {
+      font-size: 0.85rem;
+      color: #5f6368;
+      min-width: 56px;
+    }
+
+    canvas {
+      width: 100%;
+      height: auto;
+      border: 1px solid #d0d0d0;
+      border-radius: 4px;
+      background: #000;
+      image-rendering: pixelated;
+      display: block;
+    }
+
+    .rule-table {
+      display: grid;
+      grid-template-columns: repeat(7, minmax(0, 1fr));
+      gap: 6px;
+      font-size: 0.8rem;
+      margin-top: 12px;
+    }
+
+    .rule-cell {
+      border: 1px solid #d0d0d0;
+      border-radius: 4px;
+      text-align: center;
+      padding: 6px 4px;
+      line-height: 1.3;
+    }
+
+    .status {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
+      gap: 8px;
+      margin-top: 12px;
+      font-size: 0.9rem;
+      color: #3c4043;
+    }
+
+    .status dt {
+      font-weight: 600;
+      color: #1a73e8;
+    }
+
+    .status dd {
+      margin: 0;
+    }
+
+    .notice {
+      font-size: 0.85rem;
+      margin-top: 10px;
+      line-height: 1.4;
+      color: #5f6368;
+    }
+  </style>
 </head>
 <body>
-    <div class="container">
-        <div class="header">
-            <h1>3-Color Cellular Automata Demo</h1>
-            <p>Explore Wolfram's 3-color totalistic cellular automata from "A New Kind of Science"<br>
-               These rules use three colors (White=0, Gray=1, Black=2) with totalistic neighborhood averaging</p>
+  <header>
+    <h1>3-Color Totalistic Cellular Automaton</h1>
+    <p>
+      This reproduction follows the demonstration from Chapter&nbsp;3 of
+      <em>A New Kind of Science</em>. It evolves a one-dimensional, radius-1,
+      three-color totalistic cellular automaton where the next state of a cell
+      depends only on the sum of its own value and its two neighbors.
+    </p>
+  </header>
+
+  <main>
+    <section class="panel controls">
+      <h2>Controls</h2>
+      <form id="controlForm">
+        <label>
+          Preset rule
+          <select id="presetRule">
+            <option value="777">Rule 777 — complex</option>
+            <option value="600">Rule 600 — triangular</option>
+            <option value="924">Rule 924 — nested</option>
+            <option value="1059">Rule 1059 — fractal-like</option>
+            <option value="1545">Rule 1545 — random</option>
+            <option value="1635">Rule 1635 — periodic</option>
+            <option value="custom">Custom…</option>
+          </select>
+        </label>
+
+        <label id="customRuleRow" hidden>
+          Custom rule number (0 – 2186)
+          <input type="number" id="customRule" min="0" max="2186" value="777" />
+        </label>
+
+        <label>
+          Initial condition
+          <select id="initialSeed">
+            <option value="single">Single black cell</option>
+            <option value="three">Three random cells</option>
+            <option value="random">Random 30%</option>
+            <option value="gradient">Color gradient</option>
+          </select>
+        </label>
+
+        <label class="slider-row">
+          <span>Speed</span>
+          <input type="range" id="speed" min="40" max="600" step="20" value="200" />
+          <span id="speedLabel">200 ms</span>
+        </label>
+
+        <div class="button-row">
+          <button type="button" id="runBtn">Run</button>
+          <button type="button" id="stepBtn" class="secondary">Step</button>
+          <button type="button" id="resetBtn" class="secondary">Reset</button>
         </div>
+      </form>
 
-        <div class="controls">
-            <div class="control-panel">
-                <h3>Rule Configuration</h3>
-                <div class="control-group">
-                    <label for="ruleSelect">Predefined Rules:</label>
-                    <select id="ruleSelect">
-                        <option value="777">Rule 777 - Complex Patterns</option>
-                        <option value="600">Rule 600 - Triangular Structures</option>
-                        <option value="924">Rule 924 - Nested Patterns</option>
-                        <option value="1059">Rule 1059 - Fractal-like</option>
-                        <option value="1545">Rule 1545 - Chaotic</option>
-                        <option value="1635">Rule 1635 - Periodic</option>
-                        <option value="custom">Custom Rule</option>
-                    </select>
-                </div>
-                <div class="control-group" id="customRuleGroup" style="display: none;">
-                    <label for="customRule">Custom Rule (0-2186):</label>
-                    <input type="number" id="customRule" min="0" max="2186" value="777">
-                </div>
-                <div class="control-group">
-                    <label for="speed">Animation Speed:</label>
-                    <input type="range" id="speed" min="50" max="1000" value="200">
-                    <span id="speedValue">200ms</span>
-                </div>
-            </div>
-
-            <div class="control-panel">
-                <h3>Simulation Control</h3>
-                <button id="startBtn">Start Animation</button>
-                <button id="stopBtn">Stop Animation</button>
-                <button id="stepBtn">Single Step</button>
-                <button id="resetBtn">Reset Grid</button>
-                <button id="randomBtn">Random Seed</button>
-            </div>
-
-            <div class="control-panel">
-                <h3>Initial Conditions</h3>
-                <div class="control-group">
-                    <label for="seedType">Seed Pattern:</label>
-                    <select id="seedType">
-                        <option value="single">Single Black Cell</option>
-                        <option value="three">Three Random Cells</option>
-                        <option value="random">Random Pattern</option>
-                        <option value="gradient">Color Gradient</option>
-                    </select>
-                </div>
-            </div>
+      <dl class="status">
+        <div>
+          <dt>Generation</dt>
+          <dd id="generationCount">0</dd>
         </div>
-
-        <div class="canvas-container">
-            <h3 style="color: #ffd700; margin-bottom: 15px;">Current Rule Lookup Table</h3>
-            <div class="rule-display" id="ruleDisplay"></div>
-            <canvas id="caCanvas" width="800" height="600"></canvas>
+        <div>
+          <dt>White / Gray / Black</dt>
+          <dd id="population">0 · 0 · 0</dd>
         </div>
-
-        <div class="info-panel">
-            <h3>About 3-Color Cellular Automata</h3>
-            <p>
-                Stephen Wolfram explored 3-color cellular automata in "A New Kind of Science" to understand how 
-                increasing the number of possible states affects computational complexity. These systems use 
-                <strong>totalistic rules</strong>, where the new color depends only on the average of neighboring cells.
-            </p>
-            <p>
-                With 3 colors (0=White, 1=Gray, 2=Black) and nearest-neighbor interactions, there are exactly 
-                <strong>2,187 possible totalistic rules</strong>. Each rule can be represented by a lookup table 
-                showing the output for each possible neighborhood average (0, 1/3, 2/3, 1, 4/3, 5/3, 2).
-            </p>
-
-            <div class="stats">
-                <div class="stat-item">
-                    <div class="stat-value" id="currentRule">777</div>
-                    <div class="stat-label">Current Rule</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="generation">0</div>
-                    <div class="stat-label">Generation</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="whiteCount">0</div>
-                    <div class="stat-label">White Cells</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="grayCount">0</div>
-                    <div class="stat-label">Gray Cells</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="blackCount">0</div>
-                    <div class="stat-label">Black Cells</div>
-                </div>
-            </div>
+        <div>
+          <dt>Rule (base 3)</dt>
+          <dd id="ruleTernary">0000000</dd>
         </div>
-    </div>
-
-    <script>
-        class ThreeColorCA {
-            constructor(canvasId, width = 200, height = 150) {
-                this.canvas = document.getElementById(canvasId);
-                this.ctx = this.canvas.getContext('2d');
-                this.width = width;
-                this.height = height;
-                this.cellSize = Math.min(this.canvas.width / width, this.canvas.height / height);
-                this.grid = new Array(height).fill().map(() => new Array(width).fill(0));
-                this.rule = 777; // Default rule
-                this.ruleTable = this.generateRuleTable(this.rule);
-                this.generation = 0;
-                this.animationId = null;
-                this.isRunning = false;
-                
-                this.colors = ['#ffffff', '#808080', '#000000']; // White, Gray, Black
-                
-                this.initializeGrid();
-                this.updateRuleDisplay();
-                this.draw();
-            }
-
-            generateRuleTable(ruleNumber) {
-                // Convert rule number to ternary (base 3) with 7 digits
-                const ternary = ruleNumber.toString(3).padStart(7, '0');
-                const table = {};
-                
-                // Possible sums for 3 neighbors: 0, 1, 2, 3, 4, 5, 6
-                // Corresponding averages: 0, 1/3, 2/3, 1, 4/3, 5/3, 2
-                const sums = [0, 1, 2, 3, 4, 5, 6];
-                
-                for (let i = 0; i < 7; i++) {
-                    table[sums[i]] = parseInt(ternary[6-i]);
-                }
-                
-                return table;
-            }
-
-            updateRuleDisplay() {
-                const display = document.getElementById('ruleDisplay');
-                const sums = [0, 1, 2, 3, 4, 5, 6];
-                const averages = ['0', '1/3', '2/3', '1', '4/3', '5/3', '2'];
-                
-                display.innerHTML = '';
-                
-                for (let i = 0; i < 7; i++) {
-                    const cellDiv = document.createElement('div');
-                    cellDiv.className = 'rule-cell';
-                    cellDiv.style.backgroundColor = this.colors[this.ruleTable[sums[i]]];
-                    cellDiv.style.color = this.ruleTable[sums[i]] === 0 ? '#000' : '#fff';
-                    cellDiv.innerHTML = `${averages[i]}<br>→${this.ruleTable[sums[i]]}`;
-                    cellDiv.style.fontSize = '10px';
-                    display.appendChild(cellDiv);
-                }
-                
-                document.getElementById('currentRule').textContent = this.rule;
-            }
-
-            initializeGrid(seedType = 'single') {
-                // Clear grid
-                for (let y = 0; y < this.height; y++) {
-                    for (let x = 0; x < this.width; x++) {
-                        this.grid[y][x] = 0;
-                    }
-                }
-
-                const centerX = Math.floor(this.width / 2);
-                
-                switch (seedType) {
-                    case 'single':
-                        this.grid[0][centerX] = 2; // Single black cell
-                        break;
-                    case 'three':
-                        this.grid[0][centerX - 1] = Math.floor(Math.random() * 3);
-                        this.grid[0][centerX] = Math.floor(Math.random() * 3);
-                        this.grid[0][centerX + 1] = Math.floor(Math.random() * 3);
-                        break;
-                    case 'random':
-                        for (let x = 0; x < this.width; x++) {
-                            if (Math.random() < 0.3) {
-                                this.grid[0][x] = Math.floor(Math.random() * 3);
-                            }
-                        }
-                        break;
-                    case 'gradient':
-                        for (let x = 0; x < this.width; x++) {
-                            const ratio = x / (this.width - 1);
-                            this.grid[0][x] = Math.floor(ratio * 3);
-                        }
-                        break;
-                }
-                
-                this.generation = 0;
-                this.updateStats();
-                this.draw();
-            }
-
-            step() {
-                if (this.generation >= this.height - 1) return;
-                
-                const newRow = new Array(this.width).fill(0);
-                const currentRow = this.generation;
-                
-                for (let x = 0; x < this.width; x++) {
-                    const left = this.grid[currentRow][(x - 1 + this.width) % this.width];
-                    const center = this.grid[currentRow][x];
-                    const right = this.grid[currentRow][(x + 1) % this.width];
-                    
-                    const sum = left + center + right;
-                    newRow[x] = this.ruleTable[sum] || 0;
-                }
-                
-                this.generation++;
-                for (let x = 0; x < this.width; x++) {
-                    this.grid[this.generation][x] = newRow[x];
-                }
-                
-                this.updateStats();
-                this.draw();
-            }
-
-            updateStats() {
-                let whiteCells = 0, grayCells = 0, blackCells = 0;
-                
-                for (let y = 0; y <= this.generation && y < this.height; y++) {
-                    for (let x = 0; x < this.width; x++) {
-                        switch (this.grid[y][x]) {
-                            case 0: whiteCells++; break;
-                            case 1: grayCells++; break;
-                            case 2: blackCells++; break;
-                        }
-                    }
-                }
-                
-                document.getElementById('generation').textContent = this.generation;
-                document.getElementById('whiteCount').textContent = whiteCells;
-                document.getElementById('grayCount').textContent = grayCells;
-                document.getElementById('blackCount').textContent = blackCells;
-            }
-
-            draw() {
-                this.ctx.fillStyle = '#000000';
-                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
-                
-                for (let y = 0; y <= this.generation && y < this.height; y++) {
-                    for (let x = 0; x < this.width; x++) {
-                        const color = this.colors[this.grid[y][x]];
-                        this.ctx.fillStyle = color;
-                        this.ctx.fillRect(
-                            x * this.cellSize, 
-                            y * this.cellSize, 
-                            this.cellSize, 
-                            this.cellSize
-                        );
-                    }
-                }
-            }
-
-            setRule(ruleNumber) {
-                this.rule = Math.max(0, Math.min(2186, ruleNumber));
-                this.ruleTable = this.generateRuleTable(this.rule);
-                this.updateRuleDisplay();
-            }
-
-            start(speed = 200) {
-                if (this.isRunning) return;
-                
-                this.isRunning = true;
-                const animate = () => {
-                    if (!this.isRunning || this.generation >= this.height - 1) {
-                        this.isRunning = false;
-                        return;
-                    }
-                    
-                    this.step();
-                    this.animationId = setTimeout(animate, speed);
-                };
-                animate();
-            }
-
-            stop() {
-                this.isRunning = false;
-                if (this.animationId) {
-                    clearTimeout(this.animationId);
-                    this.animationId = null;
-                }
-            }
+      </dl>
+
+      <p class="notice">
+        The table below lists the output color for each possible neighbor sum.
+        Totals 0–6 correspond to averages 0, 1/3, 2/3, 1, 4/3, 5/3 and 2, just
+        as shown in the original NKS demonstration.
+      </p>
+
+      <div class="rule-table" id="ruleTable"></div>
+    </section>
+
+    <section class="panel">
+      <h2>Evolution</h2>
+      <canvas id="caCanvas" width="151" height="150" aria-label="3-color cellular automaton"></canvas>
+    </section>
+  </main>
+
+  <script>
+    const WIDTH = 151;
+    const HEIGHT = 150;
+
+    const presetSelect = document.getElementById('presetRule');
+    const customRow = document.getElementById('customRuleRow');
+    const customInput = document.getElementById('customRule');
+    const seedSelect = document.getElementById('initialSeed');
+    const speedInput = document.getElementById('speed');
+    const speedLabel = document.getElementById('speedLabel');
+    const runBtn = document.getElementById('runBtn');
+    const stepBtn = document.getElementById('stepBtn');
+    const resetBtn = document.getElementById('resetBtn');
+    const generationLabel = document.getElementById('generationCount');
+    const populationLabel = document.getElementById('population');
+    const ruleTernaryLabel = document.getElementById('ruleTernary');
+    const ruleTableContainer = document.getElementById('ruleTable');
+
+    const canvas = document.getElementById('caCanvas');
+    const ctx = canvas.getContext('2d');
+
+    let ruleNumber = 777;
+    let ruleTable = buildRuleTable(ruleNumber);
+    let rows = createEmptyRows();
+    let currentGeneration = 0;
+    let timer = null;
+
+    function createEmptyRows() {
+      return Array.from({ length: HEIGHT }, () => new Array(WIDTH).fill(0));
+    }
+
+    function buildRuleTable(number) {
+      const n = Math.max(0, Math.min(2186, Math.floor(Number(number) || 0)));
+      const digits = n.toString(3).padStart(7, '0');
+      const table = new Array(7).fill(0);
+      for (let i = 0; i < 7; i++) {
+        table[i] = Number(digits[6 - i]);
+      }
+      ruleNumber = n;
+      return table;
+    }
+
+    function applySeed(mode) {
+      rows = createEmptyRows();
+      const center = Math.floor(WIDTH / 2);
+      switch (mode) {
+        case 'single':
+          rows[0][center] = 2;
+          break;
+        case 'three':
+          for (let offset = -1; offset <= 1; offset++) {
+            rows[0][center + offset] = Math.floor(Math.random() * 3);
+          }
+          break;
+        case 'random':
+          for (let x = 0; x < WIDTH; x++) {
+            rows[0][x] = Math.random() < 0.3 ? Math.floor(Math.random() * 3) : 0;
+          }
+          break;
+        case 'gradient':
+          for (let x = 0; x < WIDTH; x++) {
+            const ratio = x / (WIDTH - 1);
+            rows[0][x] = Math.min(2, Math.floor(ratio * 3));
+          }
+          break;
+      }
+      currentGeneration = 0;
+      stop();
+      redrawAll();
+      updateStatus();
+    }
+
+    function evolveOnce() {
+      if (currentGeneration >= HEIGHT - 1) {
+        stop();
+        return false;
+      }
+
+      const prev = rows[currentGeneration];
+      const next = rows[currentGeneration + 1];
+      const wrap = true;
+
+      for (let x = 0; x < WIDTH; x++) {
+        const left = prev[(x - 1 + WIDTH) % WIDTH];
+        const center = prev[x];
+        const right = prev[(x + 1) % WIDTH];
+        const sum = left + center + right;
+        next[x] = ruleTable[sum];
+      }
+
+      currentGeneration += 1;
+      drawRow(currentGeneration);
+      updateStatus();
+      return true;
+    }
+
+    function drawRow(rowIndex) {
+      const row = rows[rowIndex];
+      for (let x = 0; x < WIDTH; x++) {
+        const value = row[x];
+        ctx.fillStyle = value === 0 ? '#ffffff' : value === 1 ? '#888888' : '#000000';
+        ctx.fillRect(x, rowIndex, 1, 1);
+      }
+    }
+
+    function redrawAll() {
+      ctx.fillStyle = '#000000';
+      ctx.fillRect(0, 0, WIDTH, HEIGHT);
+      for (let g = 0; g <= currentGeneration; g++) {
+        drawRow(g);
+      }
+    }
+
+    function updateStatus() {
+      generationLabel.textContent = currentGeneration;
+
+      let counts = [0, 0, 0];
+      for (let g = 0; g <= currentGeneration; g++) {
+        for (let x = 0; x < WIDTH; x++) {
+          counts[rows[g][x]] += 1;
         }
-
-        // Initialize the cellular automaton
-        const ca = new ThreeColorCA('caCanvas', 200, 150);
-
-        // Event listeners
-        document.getElementById('ruleSelect').addEventListener('change', (e) => {
-            const value = e.target.value;
-            const customGroup = document.getElementById('customRuleGroup');
-            
-            if (value === 'custom') {
-                customGroup.style.display = 'block';
-                const customRule = parseInt(document.getElementById('customRule').value);
-                ca.setRule(customRule);
-            } else {
-                customGroup.style.display = 'none';
-                ca.setRule(parseInt(value));
-            }
-        });
-
-        document.getElementById('customRule').addEventListener('input', (e) => {
-            ca.setRule(parseInt(e.target.value));
-        });
-
-        document.getElementById('speed').addEventListener('input', (e) => {
-            document.getElementById('speedValue').textContent = e.target.value + 'ms';
-        });
-
-        document.getElementById('startBtn').addEventListener('click', () => {
-            const speed = parseInt(document.getElementById('speed').value);
-            ca.start(speed);
-        });
-
-        document.getElementById('stopBtn').addEventListener('click', () => {
-            ca.stop();
-        });
-
-        document.getElementById('stepBtn').addEventListener('click', () => {
-            ca.step();
-        });
-
-        document.getElementById('resetBtn').addEventListener('click', () => {
-            ca.stop();
-            const seedType = document.getElementById('seedType').value;
-            ca.initializeGrid(seedType);
-        });
-
-        document.getElementById('randomBtn').addEventListener('click', () => {
-            ca.stop();
-            ca.initializeGrid('random');
-        });
-
-        document.getElementById('seedType').addEventListener('change', (e) => {
-            ca.stop();
-            ca.initializeGrid(e.target.value);
-        });
-    </script>
+      }
+      populationLabel.textContent = counts.join(' · ');
+      ruleTernaryLabel.textContent = ruleNumber.toString(3).padStart(7, '0');
+    }
+
+    function updateRuleTableDisplay() {
+      const averages = ['0', '1/3', '2/3', '1', '4/3', '5/3', '2'];
+      ruleTableContainer.innerHTML = '';
+      for (let i = 0; i < 7; i++) {
+        const cell = document.createElement('div');
+        cell.className = 'rule-cell';
+        cell.textContent = `${averages[i]} → ${ruleTable[i]}`;
+        cell.style.background = ruleTable[i] === 0 ? '#ffffff' : ruleTable[i] === 1 ? '#888888' : '#000000';
+        cell.style.color = ruleTable[i] === 0 ? '#202124' : '#ffffff';
+        ruleTableContainer.appendChild(cell);
+      }
+    }
+
+    function run() {
+      if (timer) return;
+      const delay = Number(speedInput.value);
+      timer = setInterval(() => {
+        const ok = evolveOnce();
+        if (!ok) stop();
+      }, delay);
+      runBtn.textContent = 'Stop';
+    }
+
+    function stop() {
+      if (timer) {
+        clearInterval(timer);
+        timer = null;
+      }
+      runBtn.textContent = 'Run';
+    }
+
+    presetSelect.addEventListener('change', () => {
+      if (presetSelect.value === 'custom') {
+        customRow.hidden = false;
+        customInput.focus();
+      } else {
+        customRow.hidden = true;
+        customInput.value = presetSelect.value;
+        ruleTable = buildRuleTable(presetSelect.value);
+        updateRuleTableDisplay();
+        applySeed(seedSelect.value);
+      }
+    });
+
+    customInput.addEventListener('input', () => {
+      const value = Number(customInput.value);
+      ruleTable = buildRuleTable(value);
+      updateRuleTableDisplay();
+      applySeed(seedSelect.value);
+    });
+
+    seedSelect.addEventListener('change', () => {
+      applySeed(seedSelect.value);
+    });
+
+    speedInput.addEventListener('input', () => {
+      speedLabel.textContent = `${speedInput.value} ms`;
+      if (timer) {
+        stop();
+        run();
+      }
+    });
+
+    runBtn.addEventListener('click', () => {
+      if (timer) {
+        stop();
+      } else {
+        run();
+      }
+    });
+
+    stepBtn.addEventListener('click', () => {
+      stop();
+      evolveOnce();
+    });
+
+    resetBtn.addEventListener('click', () => {
+      applySeed(seedSelect.value);
+    });
+
+    // Initial render
+    updateRuleTableDisplay();
+    applySeed('single');
+    redrawAll();
+    updateStatus();
+  </script>
 </body>
-</html>
\ No newline at end of file
+</html>
diff --git a/demos/chapter3/turing-machine-demo.html b/demos/chapter3/turing-machine-demo.html
index a3cb58a482fe0a454e3bcca5bd49e4214c1c4afb..acdeb84d69394c8ace9a41d0d649469e10763975 100644
--- a/demos/chapter3/turing-machine-demo.html
+++ b/demos/chapter3/turing-machine-demo.html
@@ -1,934 +1,781 @@
 <!DOCTYPE html>
 <html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Turing Machine Demo - NKS Explorer</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
-            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%);
-            color: #e0e0e0;
-            min-height: 100vh;
-            padding: 20px;
-        }
-
-        .container {
-            max-width: 1400px;
-            margin: 0 auto;
-        }
-
-        .header {
-            text-align: center;
-            margin-bottom: 30px;
-            padding: 20px;
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .header h1 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            font-size: 2.5em;
-            font-weight: 700;
-        }
-
-        .header p {
-            color: #b8b8b8;
-            font-size: 1.1em;
-            line-height: 1.6;
-        }
-
-        .controls {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
-            gap: 20px;
-            margin-bottom: 30px;
-        }
-
-        .control-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .control-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-            font-size: 1.2em;
-        }
-
-        .control-group {
-            margin-bottom: 15px;
-        }
-
-        label {
-            display: block;
-            color: #d0d0d0;
-            margin-bottom: 5px;
-            font-weight: 500;
-        }
-
-        select, input[type="range"], input[type="text"], button {
-            width: 100%;
-            padding: 10px;
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 8px;
-            background: rgba(0, 0, 0, 0.3);
-            color: #e0e0e0;
-            font-size: 14px;
-        }
-
-        button {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.2), rgba(255, 215, 0, 0.3));
-            cursor: pointer;
-            transition: all 0.3s ease;
-            margin: 5px 0;
-        }
-
-        button:hover {
-            background: linear-gradient(45deg, rgba(255, 215, 0, 0.3), rgba(255, 215, 0, 0.4));
-            transform: translateY(-2px);
-            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.2);
-        }
-
-        .canvas-container {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-            text-align: center;
-            margin-bottom: 20px;
-        }
-
-        #tmCanvas {
-            border: 2px solid rgba(255, 215, 0, 0.3);
-            border-radius: 10px;
-            background: #000;
-            max-width: 100%;
-        }
-
-        .state-display {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-bottom: 15px;
-            display: flex;
-            flex-wrap: wrap;
-            justify-content: center;
-            gap: 10px;
-        }
-
-        .state-indicator {
-            display: flex;
-            align-items: center;
-            gap: 10px;
-            padding: 8px 12px;
-            background: rgba(255, 215, 0, 0.1);
-            border-radius: 8px;
-            font-family: 'Courier New', monospace;
-            font-size: 14px;
-        }
-
-        .state-dot {
-            width: 12px;
-            height: 12px;
-            border-radius: 50%;
-        }
-
-        .rule-table {
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 10px;
-            padding: 15px;
-            margin-bottom: 15px;
-            overflow-x: auto;
-        }
-
-        .rule-table h4 {
-            color: #ffd700;
-            margin-bottom: 10px;
-            text-align: center;
-        }
-
-        .rule-grid {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
-            gap: 10px;
-        }
-
-        .rule-entry {
-            background: rgba(255, 215, 0, 0.1);
-            border-radius: 5px;
-            padding: 8px;
-            font-family: 'Courier New', monospace;
-            font-size: 12px;
-            text-align: center;
-        }
-
-        .rule-condition {
-            color: #ffd700;
-            font-weight: bold;
-            margin-bottom: 3px;
-        }
-
-        .rule-action {
-            color: #d0d0d0;
-        }
-
-        .machine-indicators {
-            display: flex;
-            justify-content: center;
-            align-items: center;
-            gap: 20px;
-            margin: 15px 0;
-            flex-wrap: wrap;
-        }
-
-        .indicator {
-            display: flex;
-            align-items: center;
-            gap: 5px;
-            font-size: 14px;
-        }
-
-        .indicator-dot {
-            width: 12px;
-            height: 12px;
-            border-radius: 50%;
-        }
-
-        .custom-rule-editor {
-            display: none;
-            background: rgba(0, 0, 0, 0.2);
-            border-radius: 10px;
-            padding: 15px;
-            margin-top: 15px;
-        }
-
-        .custom-rule-editor textarea {
-            width: 100%;
-            height: 100px;
-            background: rgba(0, 0, 0, 0.5);
-            border: 1px solid rgba(255, 215, 0, 0.3);
-            border-radius: 5px;
-            color: #e0e0e0;
-            padding: 10px;
-            font-family: 'Courier New', monospace;
-            font-size: 12px;
-            resize: vertical;
-        }
-
-        .info-panel {
-            background: rgba(255, 255, 255, 0.05);
-            border-radius: 15px;
-            padding: 20px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 215, 0, 0.2);
-        }
-
-        .info-panel h3 {
-            color: #ffd700;
-            margin-bottom: 15px;
-        }
-
-        .info-panel p {
-            color: #d0d0d0;
-            line-height: 1.6;
-            margin-bottom: 10px;
-        }
-
-        .stats {
-            display: grid;
-            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
-            gap: 15px;
-            margin-top: 15px;
-        }
-
-        .stat-item {
-            text-align: center;
-            padding: 10px;
-            background: rgba(0, 0, 0, 0.3);
-            border-radius: 8px;
-        }
-
-        .stat-value {
-            font-size: 1.5em;
-            font-weight: bold;
-            color: #ffd700;
-        }
-
-        .stat-label {
-            font-size: 0.9em;
-            color: #b8b8b8;
-        }
-
-        @media (max-width: 768px) {
-            .controls {
-                grid-template-columns: 1fr;
-            }
-            
-            .header h1 {
-                font-size: 2em;
-            }
-            
-            .rule-grid {
-                grid-template-columns: 1fr;
-            }
-            
-            .machine-indicators {
-                flex-direction: column;
-                gap: 10px;
-            }
-        }
-    </style>
+  <meta charset="utf-8" />
+  <meta name="viewport" content="width=device-width, initial-scale=1" />
+  <title>Turing Machine Demonstration</title>
+  <style>
+    :root {
+      color-scheme: light dark;
+      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
+    }
+
+    body {
+      margin: 0;
+      padding: 24px;
+      background: #f4f5f7;
+      color: #202124;
+    }
+
+    header {
+      max-width: 900px;
+      margin: 0 auto 24px auto;
+    }
+
+    h1 {
+      font-size: 1.9rem;
+      margin: 0 0 6px 0;
+      font-weight: 600;
+    }
+
+    header p {
+      margin: 4px 0 0 0;
+      max-width: 70ch;
+      line-height: 1.55;
+      color: #4a4f55;
+    }
+
+    main {
+      max-width: 1100px;
+      margin: 0 auto;
+      display: grid;
+      grid-template-columns: 340px 1fr;
+      gap: 20px;
+    }
+
+    @media (max-width: 960px) {
+      main {
+        grid-template-columns: 1fr;
+      }
+    }
+
+    .panel {
+      background: #fff;
+      border: 1px solid #d4d7dd;
+      border-radius: 8px;
+      padding: 16px;
+      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
+    }
+
+    .panel h2 {
+      margin: 0 0 12px 0;
+      font-size: 1.1rem;
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    .controls form {
+      display: grid;
+      gap: 12px;
+    }
+
+    label {
+      display: flex;
+      flex-direction: column;
+      gap: 6px;
+      font-size: 0.9rem;
+    }
+
+    select,
+    input[type="number"],
+    input[type="text"],
+    input[type="range"] {
+      padding: 6px 8px;
+      border-radius: 6px;
+      border: 1px solid #c3c7ce;
+      font-size: 0.95rem;
+      font-family: inherit;
+      background: #fff;
+      color: inherit;
+    }
+
+    input[type="number"] {
+      -moz-appearance: textfield;
+    }
+
+    input[type="number"]::-webkit-outer-spin-button,
+    input[type="number"]::-webkit-inner-spin-button {
+      -webkit-appearance: none;
+      margin: 0;
+    }
+
+    table {
+      width: 100%;
+      border-collapse: collapse;
+      font-size: 0.85rem;
+    }
+
+    table th,
+    table td {
+      border: 1px solid #d4d7dd;
+      padding: 6px;
+      text-align: center;
+    }
+
+    table th {
+      background: #eef3fd;
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    button {
+      padding: 7px 12px;
+      border-radius: 6px;
+      border: 1px solid #0b57d0;
+      background: #0b57d0;
+      color: #fff;
+      font-weight: 600;
+      cursor: pointer;
+      transition: background 0.2s ease;
+    }
+
+    button.secondary {
+      background: #fff;
+      color: #0b57d0;
+    }
+
+    button:disabled {
+      opacity: 0.55;
+      cursor: default;
+    }
+
+    .button-row {
+      display: flex;
+      flex-wrap: wrap;
+      gap: 8px;
+      margin-top: 4px;
+    }
+
+    .slider-row {
+      display: flex;
+      align-items: center;
+      gap: 12px;
+    }
+
+    .slider-row span {
+      font-size: 0.85rem;
+      color: #5f6368;
+      min-width: 56px;
+    }
+
+    .tape-view {
+      display: flex;
+      justify-content: center;
+      gap: 2px;
+      flex-wrap: wrap;
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+    }
+
+    .cell {
+      width: 26px;
+      height: 34px;
+      border: 1px solid #d4d7dd;
+      border-radius: 4px;
+      background: #fafafa;
+      display: flex;
+      align-items: center;
+      justify-content: center;
+      font-size: 0.9rem;
+      position: relative;
+    }
+
+    .cell.head {
+      background: #ffe0b2;
+      border-color: #f57c00;
+      font-weight: 600;
+    }
+
+    .cell.head::after {
+      content: "⌄";
+      position: absolute;
+      top: -18px;
+      font-size: 0.9rem;
+      color: #f57c00;
+    }
+
+    .status {
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
+      gap: 8px;
+      margin: 12px 0;
+      font-size: 0.9rem;
+    }
+
+    .status dt {
+      font-weight: 600;
+      color: #0b57d0;
+    }
+
+    .status dd {
+      margin: 0;
+    }
+
+    .log {
+      border-top: 1px solid #d4d7dd;
+      margin-top: 12px;
+      padding-top: 12px;
+      font-family: "IBM Plex Mono", "SFMono-Regular", Menlo, Consolas, monospace;
+      max-height: 220px;
+      overflow-y: auto;
+      font-size: 0.85rem;
+    }
+
+    .log p {
+      margin: 4px 0;
+    }
+
+    .notice {
+      font-size: 0.85rem;
+      line-height: 1.4;
+      color: #5f6368;
+      margin-top: 12px;
+    }
+  </style>
 </head>
 <body>
-    <div class="container">
-        <div class="header">
-            <h1>Turing Machine Demo</h1>
-            <p>Explore Wolfram's Turing machines from "A New Kind of Science"<br>
-               Universal computation with simple rules: head states, tape symbols, and transition rules</p>
+  <header>
+    <h1>Turing Machine Demonstration</h1>
+    <p>
+      The original Chapter&nbsp;3 demo lets you explore the behaviour of small
+      Turing machines. Choose one of Wolfram's catalogued machines or define
+      your own transition table. The tape display shows the neighbourhood around
+      the head; orange marks the current head position.
+    </p>
+  </header>
+
+  <main>
+    <section class="panel controls">
+      <h2>Machine</h2>
+      <form>
+        <label>
+          Preset
+          <select id="preset">
+            <option value="simple2state">Simple 2-state (page 78)</option>
+            <option value="wolfram3024">Wolfram #3024 (page 79)</option>
+            <option value="wolfram982">Wolfram #982 (page 79)</option>
+            <option value="wolfram925">Wolfram #925 (page 79)</option>
+            <option value="famous23">Famous 2-state 3-symbol</option>
+            <option value="universal25">Universal 2-state 5-symbol</option>
+            <option value="busy3">Busy Beaver 3-state</option>
+            <option value="custom">Custom…</option>
+          </select>
+        </label>
+
+        <label>
+          State count
+          <input type="number" id="stateCount" min="1" max="6" value="2" />
+        </label>
+
+        <label>
+          Symbol count
+          <input type="number" id="symbolCount" min="2" max="6" value="2" />
+        </label>
+
+        <table id="ruleTable">
+          <thead></thead>
+          <tbody></tbody>
+        </table>
+
+        <label>
+          Initial tape (digits)
+          <input type="text" id="initialTape" value="1" />
+        </label>
+
+        <label>
+          Maximum steps
+          <input type="number" id="maxSteps" min="1" max="2000" value="400" />
+        </label>
+
+        <label class="slider-row">
+          <span>Speed</span>
+          <input type="range" id="speed" min="40" max="600" step="20" value="200" />
+          <span id="speedLabel">200 ms</span>
+        </label>
+
+        <div class="button-row">
+          <button type="button" id="runBtn">Run</button>
+          <button type="button" id="stepBtn" class="secondary">Step</button>
+          <button type="button" id="resetBtn" class="secondary">Reset</button>
         </div>
-
-        <div class="controls">
-            <div class="control-panel">
-                <h3>Turing Machine Selection</h3>
-                <div class="control-group">
-                    <label for="machinePreset">Predefined Machines:</label>
-                    <select id="machinePreset">
-                        <option value="simple2state">Simple 2-State (Page 78)</option>
-                        <option value="wolfram3024">Wolfram #3024 (Page 79)</option>
-                        <option value="wolfram982">Wolfram #982 (Page 79)</option>
-                        <option value="wolfram925">Wolfram #925 (Page 79)</option>
-                        <option value="famous23">Famous 2-State 3-Symbol</option>
-                        <option value="universal25">Universal 2-State 5-Symbol</option>
-                        <option value="busy3">Busy Beaver 3-State</option>
-                        <option value="custom">Custom Machine</option>
-                    </select>
-                </div>
-                
-                <div class="custom-rule-editor" id="customRuleEditor">
-                    <label for="customRules">Custom Rules (JSON format):</label>
-                    <textarea id="customRules" placeholder='Example:
-{
-  "1,0": [2, 1, "R"],
-  "1,1": [2, 0, "L"],
-  "2,0": [1, 1, "L"],
-  "2,1": [1, 0, "R"]
-}'></textarea>
-                    <button id="applyCustom">Apply Custom Rules</button>
-                </div>
-            </div>
-
-            <div class="control-panel">
-                <h3>Simulation Control</h3>
-                <div class="control-group">
-                    <label for="speed">Animation Speed:</label>
-                    <input type="range" id="speed" min="50" max="2000" value="500">
-                    <span id="speedValue">500ms</span>
-                </div>
-                <button id="startBtn">Start Simulation</button>
-                <button id="stopBtn">Stop Simulation</button>
-                <button id="stepBtn">Single Step</button>
-                <button id="resetBtn">Reset Machine</button>
-            </div>
-
-            <div class="control-panel">
-                <h3>Initial Configuration</h3>
-                <div class="control-group">
-                    <label for="initialTape">Initial Tape:</label>
-                    <input type="text" id="initialTape" value="000000000000" placeholder="e.g., 001100110">
-                </div>
-                <div class="control-group">
-                    <label for="headPosition">Head Start Position:</label>
-                    <input type="range" id="headPosition" min="0" max="50" value="6">
-                    <span id="headPosValue">6</span>
-                </div>
-                <div class="control-group">
-                    <label for="initialState">Initial State:</label>
-                    <select id="initialState">
-                        <option value="1">State 1</option>
-                        <option value="2">State 2</option>
-                        <option value="3">State 3</option>
-                    </select>
-                </div>
-            </div>
+      </form>
+    </section>
+
+    <section class="panel">
+      <h2>Evolution</h2>
+      <dl class="status">
+        <div>
+          <dt>Step</dt>
+          <dd id="stepLabel">0</dd>
         </div>
-
-        <div class="canvas-container">
-            <h3 style="color: #ffd700; margin-bottom: 15px;">Turing Machine Visualization</h3>
-            
-            <div class="state-display" id="stateDisplay">
-                <div class="state-indicator">
-                    <span>Current State:</span>
-                    <div class="state-dot" id="currentStateDot" style="background: #ff6b6b;"></div>
-                    <span id="currentStateText">1</span>
-                </div>
-                <div class="state-indicator">
-                    <span>Head Position:</span>
-                    <span id="headPositionText">6</span>
-                </div>
-                <div class="state-indicator">
-                    <span>Current Symbol:</span>
-                    <span id="currentSymbolText">0</span>
-                </div>
-            </div>
-
-            <div class="machine-indicators">
-                <div class="indicator">
-                    <div class="indicator-dot" style="background: #ff6b6b;"></div>
-                    <span>Tape Head</span>
-                </div>
-                <div class="indicator">
-                    <div class="indicator-dot" style="background: #ffffff;"></div>
-                    <span>Symbol 0</span>
-                </div>
-                <div class="indicator">
-                    <div class="indicator-dot" style="background: #4ecdc4;"></div>
-                    <span>Symbol 1</span>
-                </div>
-                <div class="indicator">
-                    <div class="indicator-dot" style="background: #45b7d1;"></div>
-                    <span>Symbol 2</span>
-                </div>
-                <div class="indicator">
-                    <div class="indicator-dot" style="background: #96ceb4;"></div>
-                    <span>Symbol 3</span>
-                </div>
-            </div>
-
-            <canvas id="tmCanvas" width="1200" height="500"></canvas>
-
-            <div class="rule-table" id="ruleTable">
-                <h4>Transition Rules</h4>
-                <div class="rule-grid" id="ruleGrid"></div>
-            </div>
+        <div>
+          <dt>State</dt>
+          <dd id="stateLabel">1</dd>
         </div>
-
-        <div class="info-panel">
-            <h3>About Turing Machines</h3>
-            <p>
-                Turing machines, extensively studied by Stephen Wolfram in "A New Kind of Science," are fundamental 
-                models of computation consisting of a <strong>tape</strong> of cells, a <strong>head</strong> that 
-                can read and write symbols, and a finite set of <strong>states</strong>. The machine follows 
-                <strong>transition rules</strong> that determine what symbol to write, which direction to move, 
-                and what new state to enter based on the current state and symbol.
-            </p>
-            <p>
-                Wolfram demonstrated that even very simple Turing machines can exhibit complex behavior and achieve 
-                <strong>universal computation</strong>. His famous <strong>2-state 3-symbol machine</strong> was 
-                proven universal in 2007, making it the smallest known universal Turing machine. This supports his 
-                <strong>Principle of Computational Equivalence</strong> - that complex computation is ubiquitous 
-                in simple systems.
-            </p>
-
-            <div class="stats">
-                <div class="stat-item">
-                    <div class="stat-value" id="currentSteps">0</div>
-                    <div class="stat-label">Steps</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="currentState">1</div>
-                    <div class="stat-label">State</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="headPos">6</div>
-                    <div class="stat-label">Head Position</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="tapeSize">12</div>
-                    <div class="stat-label">Tape Size</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="onesOnTape">0</div>
-                    <div class="stat-label">Ones on Tape</div>
-                </div>
-                <div class="stat-item">
-                    <div class="stat-value" id="nonZeroSymbols">0</div>
-                    <div class="stat-label">Non-Zero Symbols</div>
-                </div>
-            </div>
+        <div>
+          <dt>Head position</dt>
+          <dd id="headLabel">0</dd>
         </div>
-    </div>
-
-    <script>
-        class TuringMachine {
-            constructor(canvasId) {
-                this.canvas = document.getElementById(canvasId);
-                this.ctx = this.canvas.getContext('2d');
-                this.tape = [];
-                this.headPosition = 0;
-                this.currentState = 1;
-                this.rules = {};
-                this.steps = 0;
-                this.isRunning = false;
-                this.animationId = null;
-                this.history = [];
-                this.maxHistory = 100;
-                
-                this.colors = {
-                    0: '#ffffff',  // White
-                    1: '#4ecdc4',  // Cyan
-                    2: '#45b7d1',  // Blue
-                    3: '#96ceb4',  // Light green
-                    4: '#ffd93d'   // Yellow
-                };
-                
-                this.stateColors = {
-                    1: '#ff6b6b',  // Red
-                    2: '#4ecdc4',  // Cyan
-                    3: '#45b7d1',  // Blue
-                    4: '#96ceb4',  // Green
-                    5: '#ffd93d'   // Yellow
-                };
-                
-                this.cellWidth = 40;
-                this.cellHeight = 30;
-                this.initializeMachine();
-            }
-
-            initializeMachine() {
-                // Default simple 2-state machine from NKS page 78
-                this.rules = {
-                    "1,0": [2, 1, "R"],  // State 1, Symbol 0 -> State 2, Write 1, Move Right
-                    "1,1": [2, 0, "L"],  // State 1, Symbol 1 -> State 2, Write 0, Move Left
-                    "2,0": [1, 1, "L"],  // State 2, Symbol 0 -> State 1, Write 1, Move Left
-                    "2,1": [1, 1, "R"]   // State 2, Symbol 1 -> State 1, Write 1, Move Right
-                };
-                
-                this.setTape("000000000000");
-                this.headPosition = 6;
-                this.currentState = 1;
-                this.steps = 0;
-                this.history = [];
-                this.updateRuleDisplay();
-                this.updateStats();
-                this.draw();
-            }
-
-            setMachine(preset) {
-                switch (preset) {
-                    case 'simple2state':
-                        this.rules = {
-                            "1,0": [2, 1, "R"],
-                            "1,1": [2, 0, "L"], 
-                            "2,0": [1, 1, "L"],
-                            "2,1": [1, 1, "R"]
-                        };
-                        break;
-                    case 'wolfram3024':
-                        // Wolfram machine #3024 from page 79
-                        this.rules = {
-                            "1,0": [3, 1, "L"],
-                            "1,1": [2, 0, "R"],
-                            "2,0": [1, 1, "R"],
-                            "2,1": [3, 1, "R"],
-                            "3,0": [2, 1, "R"],
-                            "3,1": [1, 0, "L"]
-                        };
-                        break;
-                    case 'wolfram982':
-                        // Wolfram machine #982 from page 79
-                        this.rules = {
-                            "1,0": [2, 1, "R"],
-                            "1,1": [3, 0, "R"],
-                            "2,0": [3, 1, "L"],
-                            "2,1": [2, 0, "R"],
-                            "3,0": [1, 1, "L"],
-                            "3,1": [1, 0, "L"]
-                        };
-                        break;
-                    case 'wolfram925':
-                        // Wolfram machine #925 from page 79
-                        this.rules = {
-                            "1,0": [2, 1, "R"],
-                            "1,1": [3, 0, "L"],
-                            "2,0": [3, 1, "L"],
-                            "2,1": [2, 0, "R"],
-                            "3,0": [1, 1, "L"],
-                            "3,1": [1, 0, "R"]
-                        };
-                        break;
-                    case 'famous23':
-                        // Famous 2-state 3-symbol machine (Wolfram #596440)
-                        this.rules = {
-                            "1,0": [2, 1, "R"],
-                            "1,1": [2, 2, "L"],
-                            "1,2": [1, 1, "L"],
-                            "2,0": [1, 2, "L"],
-                            "2,1": [2, 2, "R"],
-                            "2,2": [1, 0, "R"]
-                        };
-                        break;
-                    case 'universal25':
-                        // Universal 2-state 5-symbol machine
-                        this.rules = {
-                            "1,0": [2, 1, "R"],
-                            "1,1": [1, 2, "L"],
-                            "1,2": [1, 3, "L"],
-                            "1,3": [1, 4, "R"],
-                            "1,4": [2, 0, "R"],
-                            "2,0": [1, 0, "L"],
-                            "2,1": [2, 1, "R"],
-                            "2,2": [2, 2, "R"],
-                            "2,3": [2, 3, "R"],
-                            "2,4": [1, 1, "L"]
-                        };
-                        break;
-                    case 'busy3':
-                        // Busy Beaver 3-state machine
-                        this.rules = {
-                            "1,0": [2, 1, "R"],
-                            "1,1": [3, 1, "L"],
-                            "2,0": [1, 1, "L"],
-                            "2,1": [2, 1, "R"],
-                            "3,0": [2, 1, "L"],
-                            "3,1": [1, 1, "R"]
-                        };
-                        break;
-                }
-                
-                this.updateRuleDisplay();
-                this.updateStats();
-                this.draw();
-            }
-
-            setCustomRules(rulesText) {
-                try {
-                    const parsed = JSON.parse(rulesText);
-                    this.rules = parsed;
-                    this.updateRuleDisplay();
-                    this.updateStats();
-                    this.draw();
-                    return true;
-                } catch (e) {
-                    alert('Invalid JSON format for rules');
-                    return false;
-                }
-            }
-
-            setTape(tapeString) {
-                this.tape = tapeString.split('').map(char => {
-                    const num = parseInt(char);
-                    return isNaN(num) ? 0 : Math.min(4, Math.max(0, num));
-                });
-                
-                // Ensure minimum tape size
-                while (this.tape.length < 20) {
-                    this.tape.push(0);
-                }
-                
-                this.headPosition = Math.min(this.headPosition, this.tape.length - 1);
-            }
-
-            expandTape() {
-                // Expand tape if head is near edges
-                if (this.headPosition < 5) {
-                    this.tape.unshift(...new Array(10).fill(0));
-                    this.headPosition += 10;
-                }
-                if (this.headPosition >= this.tape.length - 5) {
-                    this.tape.push(...new Array(10).fill(0));
-                }
-            }
-
-            step() {
-                if (this.isHalted()) return false;
-                
-                this.expandTape();
-                
-                const currentSymbol = this.tape[this.headPosition];
-                const ruleKey = `${this.currentState},${currentSymbol}`;
-                const rule = this.rules[ruleKey];
-                
-                if (!rule) {
-                    // No rule found - machine halts
-                    return false;
-                }
-                
-                const [newState, newSymbol, direction] = rule;
-                
-                // Save current state to history
-                this.history.push({
-                    tape: [...this.tape],
-                    headPosition: this.headPosition,
-                    currentState: this.currentState,
-                    step: this.steps
-                });
-                
-                if (this.history.length > this.maxHistory) {
-                    this.history.shift();
-                }
-                
-                // Apply rule
-                this.tape[this.headPosition] = newSymbol;
-                this.currentState = newState;
-                
-                // Move head
-                if (direction === "R") {
-                    this.headPosition++;
-                } else if (direction === "L") {
-                    this.headPosition--;
-                }
-                
-                // Ensure head stays within bounds
-                this.headPosition = Math.max(0, Math.min(this.headPosition, this.tape.length - 1));
-                
-                this.steps++;
-                this.updateStats();
-                this.draw();
-                
-                return true;
-            }
-
-            isHalted() {
-                const currentSymbol = this.tape[this.headPosition];
-                const ruleKey = `${this.currentState},${currentSymbol}`;
-                return !this.rules[ruleKey];
-            }
-
-            updateRuleDisplay() {
-                const ruleGrid = document.getElementById('ruleGrid');
-                ruleGrid.innerHTML = '';
-                
-                Object.entries(this.rules).forEach(([key, rule]) => {
-                    const [state, symbol] = key.split(',');
-                    const [newState, newSymbol, direction] = rule;
-                    
-                    const entry = document.createElement('div');
-                    entry.className = 'rule-entry';
-                    
-                    const condition = document.createElement('div');
-                    condition.className = 'rule-condition';
-                    condition.textContent = `State ${state}, Symbol ${symbol}`;
-                    
-                    const action = document.createElement('div');
-                    action.className = 'rule-action';
-                    const dirText = direction === "R" ? "→" : direction === "L" ? "←" : "Stay";
-                    action.textContent = `→ State ${newState}, Write ${newSymbol}, ${dirText}`;
-                    
-                    entry.appendChild(condition);
-                    entry.appendChild(action);
-                    ruleGrid.appendChild(entry);
-                });
-            }
-
-            updateStats() {
-                const onesCount = this.tape.filter(cell => cell === 1).length;
-                const nonZeroCount = this.tape.filter(cell => cell !== 0).length;
-                
-                document.getElementById('currentSteps').textContent = this.steps;
-                document.getElementById('currentState').textContent = this.currentState;
-                document.getElementById('headPos').textContent = this.headPosition;
-                document.getElementById('tapeSize').textContent = this.tape.length;
-                document.getElementById('onesOnTape').textContent = onesCount;
-                document.getElementById('nonZeroSymbols').textContent = nonZeroCount;
-                
-                document.getElementById('currentStateText').textContent = this.currentState;
-                document.getElementById('headPositionText').textContent = this.headPosition;
-                document.getElementById('currentSymbolText').textContent = this.tape[this.headPosition] || 0;
-                
-                const stateDot = document.getElementById('currentStateDot');
-                stateDot.style.background = this.stateColors[this.currentState] || '#ff6b6b';
-            }
-
-            draw() {
-                // Clear canvas
-                this.ctx.fillStyle = '#000000';
-                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
-                
-                // Calculate visible range
-                const visibleCells = Math.floor(this.canvas.width / this.cellWidth);
-                const startIndex = Math.max(0, this.headPosition - Math.floor(visibleCells / 2));
-                const endIndex = Math.min(this.tape.length, startIndex + visibleCells);
-                
-                // Draw tape cells
-                for (let i = startIndex; i < endIndex; i++) {
-                    const x = (i - startIndex) * this.cellWidth;
-                    const y = this.canvas.height / 2 - this.cellHeight / 2;
-                    
-                    // Cell background
-                    const symbol = this.tape[i] || 0;
-                    this.ctx.fillStyle = this.colors[symbol] || '#ffffff';
-                    this.ctx.fillRect(x, y, this.cellWidth, this.cellHeight);
-                    
-                    // Cell border
-                    this.ctx.strokeStyle = '#333333';
-                    this.ctx.lineWidth = 1;
-                    this.ctx.strokeRect(x, y, this.cellWidth, this.cellHeight);
-                    
-                    // Cell text
-                    this.ctx.fillStyle = symbol === 0 ? '#000000' : '#ffffff';
-                    this.ctx.font = 'bold 16px monospace';
-                    this.ctx.textAlign = 'center';
-                    this.ctx.textBaseline = 'middle';
-                    this.ctx.fillText(symbol.toString(), x + this.cellWidth / 2, y + this.cellHeight / 2);
-                    
-                    // Index labels
-                    this.ctx.fillStyle = '#666666';
-                    this.ctx.font = '10px monospace';
-                    this.ctx.fillText(i.toString(), x + this.cellWidth / 2, y + this.cellHeight + 12);
-                }
-                
-                // Draw head
-                if (this.headPosition >= startIndex && this.headPosition < endIndex) {
-                    const headX = (this.headPosition - startIndex) * this.cellWidth;
-                    const headY = this.canvas.height / 2 - this.cellHeight / 2 - 40;
-                    
-                    // Head triangle
-                    this.ctx.fillStyle = this.stateColors[this.currentState] || '#ff6b6b';
-                    this.ctx.beginPath();
-                    this.ctx.moveTo(headX + this.cellWidth / 2, headY + 30);
-                    this.ctx.lineTo(headX + this.cellWidth / 2 - 15, headY);
-                    this.ctx.lineTo(headX + this.cellWidth / 2 + 15, headY);
-                    this.ctx.closePath();
-                    this.ctx.fill();
-                    
-                    // State label
-                    this.ctx.fillStyle = '#ffffff';
-                    this.ctx.font = 'bold 12px monospace';
-                    this.ctx.textAlign = 'center';
-                    this.ctx.fillText(`S${this.currentState}`, headX + this.cellWidth / 2, headY + 15);
-                }
-                
-                // Draw history (if space allows)
-                if (this.canvas.height > 200 && this.history.length > 1) {
-                    const historyHeight = 100;
-                    const historyY = this.canvas.height - historyHeight - 10;
-                    
-                    this.ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
-                    this.ctx.fillRect(0, historyY, this.canvas.width, historyHeight);
-                    
-                    const recentHistory = this.history.slice(-20);
-                    const stepHeight = historyHeight / recentHistory.length;
-                    
-                    recentHistory.forEach((snapshot, index) => {
-                        const alpha = 0.3 + (index / recentHistory.length) * 0.7;
-                        const y = historyY + index * stepHeight;
-                        
-                        for (let i = startIndex; i < endIndex && i < snapshot.tape.length; i++) {
-                            const x = (i - startIndex) * this.cellWidth;
-                            const symbol = snapshot.tape[i] || 0;
-                            
-                            if (symbol !== 0) {
-                                this.ctx.fillStyle = this.colors[symbol] + Math.floor(alpha * 255).toString(16).padStart(2, '0');
-                                this.ctx.fillRect(x, y, this.cellWidth, stepHeight);
-                            }
-                            
-                            if (i === snapshot.headPosition) {
-                                this.ctx.fillStyle = `rgba(255, 107, 107, ${alpha})`;
-                                this.ctx.fillRect(x, y, this.cellWidth, stepHeight);
-                            }
-                        }
-                    });
-                }
-            }
-
-            start(speed = 500) {
-                if (this.isRunning) return;
-                
-                this.isRunning = true;
-                const animate = () => {
-                    if (!this.isRunning) return;
-                    
-                    const canContinue = this.step();
-                    if (!canContinue) {
-                        this.isRunning = false;
-                        alert('Machine halted - no rule found for current state/symbol combination');
-                        return;
-                    }
-                    
-                    this.animationId = setTimeout(animate, speed);
-                };
-                animate();
-            }
-
-            stop() {
-                this.isRunning = false;
-                if (this.animationId) {
-                    clearTimeout(this.animationId);
-                    this.animationId = null;
-                }
-            }
-
-            reset(tapeString = "000000000000", headPos = 6, initialState = 1) {
-                this.stop();
-                this.setTape(tapeString);
-                this.headPosition = headPos;
-                this.currentState = initialState;
-                this.steps = 0;
-                this.history = [];
-                this.updateStats();
-                this.draw();
-            }
-        }
-
-        // Initialize the Turing Machine
-        const tm = new TuringMachine('tmCanvas');
-
-        // Event listeners
-        document.getElementById('machinePreset').addEventListener('change', (e) => {
-            const preset = e.target.value;
-            const customEditor = document.getElementById('customRuleEditor');
-            
-            if (preset === 'custom') {
-                customEditor.style.display = 'block';
-            } else {
-                customEditor.style.display = 'none';
-                tm.setMachine(preset);
+      </dl>
+
+      <div class="tape-view" id="tapeView" aria-label="Turing machine tape"></div>
+
+      <div class="log" id="log"></div>
+
+      <p class="notice">
+        Each log entry shows the state, scanned symbol, and the action taken.
+        The machine halts when no rule is defined for the current
+        state/symbol pair or when the "halt" target is chosen explicitly.
+      </p>
+    </section>
+  </main>
+
+  <script>
+    const PRESETS = {
+      simple2state: {
+        states: 2,
+        symbols: 2,
+        transitions: {
+          '1,0': { write: 1, move: 'R', next: 2 },
+          '1,1': { write: 0, move: 'L', next: 2 },
+          '2,0': { write: 1, move: 'L', next: 1 },
+          '2,1': { write: 1, move: 'R', next: 1 }
+        }
+      },
+      wolfram3024: {
+        states: 3,
+        symbols: 2,
+        transitions: {
+          '1,0': { write: 1, move: 'L', next: 3 },
+          '1,1': { write: 0, move: 'R', next: 2 },
+          '2,0': { write: 1, move: 'R', next: 1 },
+          '2,1': { write: 1, move: 'R', next: 3 },
+          '3,0': { write: 1, move: 'R', next: 2 },
+          '3,1': { write: 0, move: 'L', next: 1 }
+        }
+      },
+      wolfram982: {
+        states: 3,
+        symbols: 2,
+        transitions: {
+          '1,0': { write: 1, move: 'R', next: 2 },
+          '1,1': { write: 0, move: 'R', next: 3 },
+          '2,0': { write: 1, move: 'L', next: 3 },
+          '2,1': { write: 0, move: 'R', next: 2 },
+          '3,0': { write: 1, move: 'L', next: 1 },
+          '3,1': { write: 0, move: 'L', next: 1 }
+        }
+      },
+      wolfram925: {
+        states: 3,
+        symbols: 2,
+        transitions: {
+          '1,0': { write: 1, move: 'R', next: 2 },
+          '1,1': { write: 0, move: 'L', next: 3 },
+          '2,0': { write: 1, move: 'L', next: 3 },
+          '2,1': { write: 0, move: 'R', next: 2 },
+          '3,0': { write: 1, move: 'L', next: 1 },
+          '3,1': { write: 0, move: 'R', next: 1 }
+        }
+      },
+      famous23: {
+        states: 2,
+        symbols: 3,
+        transitions: {
+          '1,0': { write: 1, move: 'R', next: 2 },
+          '1,1': { write: 2, move: 'L', next: 2 },
+          '1,2': { write: 1, move: 'L', next: 1 },
+          '2,0': { write: 2, move: 'L', next: 1 },
+          '2,1': { write: 2, move: 'R', next: 2 },
+          '2,2': { write: 0, move: 'R', next: 1 }
+        }
+      },
+      universal25: {
+        states: 2,
+        symbols: 5,
+        transitions: {
+          '1,0': { write: 1, move: 'R', next: 2 },
+          '1,1': { write: 2, move: 'L', next: 1 },
+          '1,2': { write: 3, move: 'L', next: 1 },
+          '1,3': { write: 4, move: 'R', next: 1 },
+          '1,4': { write: 0, move: 'R', next: 2 },
+          '2,0': { write: 0, move: 'L', next: 1 },
+          '2,1': { write: 1, move: 'R', next: 2 },
+          '2,2': { write: 2, move: 'R', next: 2 },
+          '2,3': { write: 3, move: 'R', next: 2 },
+          '2,4': { write: 1, move: 'L', next: 1 }
+        }
+      },
+      busy3: {
+        states: 3,
+        symbols: 2,
+        transitions: {
+          '1,0': { write: 1, move: 'R', next: 2 },
+          '1,1': { write: 1, move: 'L', next: 3 },
+          '2,0': { write: 1, move: 'L', next: 1 },
+          '2,1': { write: 1, move: 'R', next: 2 },
+          '3,0': { write: 1, move: 'L', next: 2 },
+          '3,1': { write: 1, move: 'R', next: 1 }
+        }
+      }
+    };
+
+    const presetSelect = document.getElementById('preset');
+    const stateCountInput = document.getElementById('stateCount');
+    const symbolCountInput = document.getElementById('symbolCount');
+    const ruleTable = document.getElementById('ruleTable');
+    const initialTapeInput = document.getElementById('initialTape');
+    const maxStepsInput = document.getElementById('maxSteps');
+    const speedInput = document.getElementById('speed');
+    const speedLabel = document.getElementById('speedLabel');
+    const runBtn = document.getElementById('runBtn');
+    const stepBtn = document.getElementById('stepBtn');
+    const resetBtn = document.getElementById('resetBtn');
+    const stepLabel = document.getElementById('stepLabel');
+    const stateLabel = document.getElementById('stateLabel');
+    const headLabel = document.getElementById('headLabel');
+    const tapeView = document.getElementById('tapeView');
+    const logContainer = document.getElementById('log');
+
+    let machine = {
+      states: 2,
+      symbols: 2,
+      transitions: {}
+    };
+    let transitionInputs = new Map();
+    let tape;
+    let head;
+    let state;
+    let stepCount;
+    let timer = null;
+    let logs = [];
+
+    function cloneTransitions(source) {
+      const result = {};
+      for (const key in source) {
+        result[key] = { ...source[key] };
+      }
+      return result;
+    }
+
+    function applyPreset(name) {
+      if (name === 'custom') {
+        stateCountInput.removeAttribute('disabled');
+        symbolCountInput.removeAttribute('disabled');
+        machine.states = Math.max(1, Math.min(6, Number(stateCountInput.value)));
+        machine.symbols = Math.max(2, Math.min(6, Number(symbolCountInput.value)));
+        rebuildRuleTable();
+        resetMachine();
+        return;
+      }
+
+      const preset = PRESETS[name];
+      machine.states = preset.states;
+      machine.symbols = preset.symbols;
+      machine.transitions = cloneTransitions(preset.transitions);
+      stateCountInput.value = preset.states;
+      symbolCountInput.value = preset.symbols;
+      stateCountInput.setAttribute('disabled', '');
+      symbolCountInput.setAttribute('disabled', '');
+      rebuildRuleTable();
+      resetMachine();
+    }
+
+    function ensureCustomMode() {
+      if (presetSelect.value !== 'custom') {
+        presetSelect.value = 'custom';
+        stateCountInput.removeAttribute('disabled');
+        symbolCountInput.removeAttribute('disabled');
+      }
+    }
+
+    function rebuildRuleTable() {
+      transitionInputs.clear();
+      const thead = ruleTable.querySelector('thead');
+      const tbody = ruleTable.querySelector('tbody');
+      thead.innerHTML = '';
+      tbody.innerHTML = '';
+
+      const headerRow = document.createElement('tr');
+      headerRow.appendChild(document.createElement('th'));
+      for (let symbol = 0; symbol < machine.symbols; symbol++) {
+        const th = document.createElement('th');
+        th.textContent = `Symbol ${symbol}`;
+        headerRow.appendChild(th);
+      }
+      thead.appendChild(headerRow);
+
+      for (let stateId = 1; stateId <= machine.states; stateId++) {
+        const row = document.createElement('tr');
+        const stateCell = document.createElement('th');
+        stateCell.textContent = `State ${stateId}`;
+        row.appendChild(stateCell);
+
+        for (let symbol = 0; symbol < machine.symbols; symbol++) {
+          const key = `${stateId},${symbol}`;
+          const td = document.createElement('td');
+          td.appendChild(buildTransitionEditor(stateId, symbol, key));
+          row.appendChild(td);
+        }
+        tbody.appendChild(row);
+      }
+    }
+
+    function buildTransitionEditor(stateId, symbol, key) {
+      const container = document.createElement('div');
+      container.style.display = 'grid';
+      container.style.gridTemplateColumns = 'repeat(3, minmax(0, 1fr))';
+      container.style.gap = '4px';
+
+      const writeSelect = document.createElement('select');
+      for (let value = 0; value < machine.symbols; value++) {
+        const option = document.createElement('option');
+        option.value = String(value);
+        option.textContent = `W${value}`;
+        writeSelect.appendChild(option);
+      }
+
+      const moveSelect = document.createElement('select');
+      ['L', 'S', 'R'].forEach(move => {
+        const option = document.createElement('option');
+        option.value = move;
+        option.textContent = move;
+        moveSelect.appendChild(option);
+      });
+
+      const nextSelect = document.createElement('select');
+      for (let value = 1; value <= machine.states; value++) {
+        const option = document.createElement('option');
+        option.value = String(value);
+        option.textContent = `→${value}`;
+        nextSelect.appendChild(option);
+      }
+      const haltOption = document.createElement('option');
+      haltOption.value = '0';
+      haltOption.textContent = 'halt';
+      nextSelect.appendChild(haltOption);
+
+      const instr = machine.transitions[key];
+      if (instr) {
+        writeSelect.value = String(instr.write);
+        moveSelect.value = instr.move;
+        nextSelect.value = String(instr.next);
+      } else {
+        nextSelect.value = '0';
+      }
+
+      function updateTransition() {
+        ensureCustomMode();
+        const write = Number(writeSelect.value);
+        const move = moveSelect.value;
+        const next = Number(nextSelect.value);
+        if (next === 0 && move === 'S' && write === symbol) {
+          delete machine.transitions[key];
+        } else {
+          machine.transitions[key] = { write, move, next };
+        }
+      }
+
+      writeSelect.addEventListener('change', updateTransition);
+      moveSelect.addEventListener('change', updateTransition);
+      nextSelect.addEventListener('change', updateTransition);
+
+      container.append(writeSelect, moveSelect, nextSelect);
+      transitionInputs.set(key, { writeSelect, moveSelect, nextSelect });
+      return container;
+    }
+
+    function resetMachine() {
+      tape = new Map();
+      head = 0;
+      state = 1;
+      stepCount = 0;
+      logs = [];
+
+      const seed = initialTapeInput.value.trim();
+      if (seed.length > 0) {
+        const offset = -Math.floor(seed.length / 2);
+        for (let i = 0; i < seed.length; i++) {
+          const symbol = Number(seed[i]);
+          if (Number.isFinite(symbol) && symbol < machine.symbols) {
+            const position = i + offset;
+            if (symbol !== 0) {
+              tape.set(position, symbol);
             }
-        });
-
-        document.getElementById('applyCustom').addEventListener('click', () => {
-            const rulesText = document.getElementById('customRules').value;
-            tm.setCustomRules(rulesText);
-        });
-
-        document.getElementById('speed').addEventListener('input', (e) => {
-            document.getElementById('speedValue').textContent = e.target.value + 'ms';
-        });
-
-        document.getElementById('headPosition').addEventListener('input', (e) => {
-            document.getElementById('headPosValue').textContent = e.target.value;
-        });
-
-        document.getElementById('startBtn').addEventListener('click', () => {
-            const speed = parseInt(document.getElementById('speed').value);
-            tm.start(speed);
-        });
-
-        document.getElementById('stopBtn').addEventListener('click', () => {
-            tm.stop();
-        });
-
-        document.getElementById('stepBtn').addEventListener('click', () => {
-            tm.step();
-        });
-
-        document.getElementById('resetBtn').addEventListener('click', () => {
-            const tapeString = document.getElementById('initialTape').value || "000000000000";
-            const headPos = parseInt(document.getElementById('headPosition').value);
-            const initialState = parseInt(document.getElementById('initialState').value);
-            tm.reset(tapeString, headPos, initialState);
-        });
-
-        document.getElementById('initialTape').addEventListener('change', (e) => {
-            const tapeString = e.target.value || "000000000000";
-            const headPos = parseInt(document.getElementById('headPosition').value);
-            const initialState = parseInt(document.getElementById('initialState').value);
-            tm.reset(tapeString, headPos, initialState);
-        });
-    </script>
+          }
+        }
+      }
+
+      stop();
+      renderTape();
+      updateStatus();
+      renderLog();
+    }
+
+    function symbolAt(position) {
+      return tape.has(position) ? tape.get(position) : 0;
+    }
+
+    function writeSymbol(position, value) {
+      if (value === 0) {
+        tape.delete(position);
+      } else {
+        tape.set(position, value);
+      }
+    }
+
+    function moveDelta(move) {
+      if (move === 'L') return -1;
+      if (move === 'R') return 1;
+      return 0;
+    }
+
+    function stepOnce() {
+      if (state === 0) {
+        stop();
+        return;
+      }
+
+      if (stepCount >= Number(maxStepsInput.value)) {
+        stop();
+        return;
+      }
+
+      const symbol = symbolAt(head);
+      const key = `${state},${symbol}`;
+      const instr = machine.transitions[key];
+
+      if (!instr) {
+        logs.push(`Step ${stepCount}: no rule for (state ${state}, symbol ${symbol}) → halt`);
+        state = 0;
+        renderLog();
+        updateStatus();
+        stop();
+        return;
+      }
+
+      writeSymbol(head, instr.write);
+      const delta = moveDelta(instr.move);
+      const nextState = instr.next;
+      const logEntry = `Step ${stepCount}: state ${state}, read ${symbol} → write ${instr.write}, ${instr.move}, next ${nextState}`;
+      logs.push(logEntry);
+
+      head += delta;
+      state = nextState;
+      stepCount += 1;
+
+      renderTape();
+      updateStatus();
+      renderLog();
+
+      if (state === 0) {
+        logs.push(`Machine halted after ${stepCount} steps.`);
+        renderLog();
+        stop();
+      }
+    }
+
+    function renderTape() {
+      tapeView.innerHTML = '';
+      const fragment = document.createDocumentFragment();
+      const span = 20;
+      for (let pos = head - span; pos <= head + span; pos++) {
+        const cell = document.createElement('div');
+        cell.className = 'cell';
+        if (pos === head) cell.classList.add('head');
+        const symbol = symbolAt(pos);
+        cell.textContent = symbol;
+        fragment.appendChild(cell);
+      }
+      tapeView.appendChild(fragment);
+    }
+
+    function updateStatus() {
+      stepLabel.textContent = stepCount;
+      stateLabel.textContent = state === 0 ? 'halt' : state;
+      headLabel.textContent = head;
+    }
+
+    function renderLog() {
+      const start = Math.max(0, logs.length - 30);
+      const slice = logs.slice(start);
+      logContainer.innerHTML = slice.map(entry => `<p>${entry}</p>`).join('');
+      logContainer.scrollTop = logContainer.scrollHeight;
+    }
+
+    function run() {
+      if (timer) return;
+      const delay = Number(speedInput.value);
+      timer = setInterval(() => {
+        stepOnce();
+      }, delay);
+      runBtn.textContent = 'Stop';
+    }
+
+    function stop() {
+      if (timer) {
+        clearInterval(timer);
+        timer = null;
+      }
+      runBtn.textContent = 'Run';
+    }
+
+    presetSelect.addEventListener('change', () => {
+      const value = presetSelect.value;
+      applyPreset(value);
+    });
+
+    stateCountInput.addEventListener('change', () => {
+      ensureCustomMode();
+      const value = Math.max(1, Math.min(6, Number(stateCountInput.value)));
+      machine.states = value;
+      stateCountInput.value = value;
+      rebuildRuleTable();
+      resetMachine();
+    });
+
+    symbolCountInput.addEventListener('change', () => {
+      ensureCustomMode();
+      const value = Math.max(2, Math.min(6, Number(symbolCountInput.value)));
+      machine.symbols = value;
+      symbolCountInput.value = value;
+      rebuildRuleTable();
+      resetMachine();
+    });
+
+    speedInput.addEventListener('input', () => {
+      speedLabel.textContent = `${speedInput.value} ms`;
+      if (timer) {
+        stop();
+        run();
+      }
+    });
+
+    runBtn.addEventListener('click', () => {
+      if (timer) {
+        stop();
+      } else {
+        run();
+      }
+    });
+
+    stepBtn.addEventListener('click', () => {
+      stop();
+      stepOnce();
+    });
+
+    resetBtn.addEventListener('click', () => {
+      resetMachine();
+    });
+
+    initialTapeInput.addEventListener('change', resetMachine);
+    maxStepsInput.addEventListener('change', () => {
+      const value = Math.max(1, Math.min(2000, Number(maxStepsInput.value)));
+      maxStepsInput.value = value;
+    });
+
+    // Initial setup
+    presetSelect.value = 'simple2state';
+    applyPreset('simple2state');
+  </script>
 </body>
-</html>
\ No newline at end of file
+</html>
